{
    "query_0": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "jingdong",
                    "notes"
                ],
                "selected_apis_name": [
                    "jingdong.add_to_cart",
                    "jingdong.place_order",
                    "notes.create_note",
                    "notes.delete_note",
                    "jingdong.get_promotions",
                    "notes.add_attachment",
                    "jingdong.remove_from_cart",
                    "jingdong.search_product",
                    "jingdong.get_product_detail",
                    "jingdong.get_user_profile"
                ]
            },
            "environment": {
                "datetime": "2024年08月21日 星期三",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef jingdong.add_to_cart(product_id: str, quantity: int) -> bool:\n    '''\n    添加商品到购物车\n\n    Parameters\n    ----------\n    product_id : str\n        商品ID\n    quantity : int\n        购买数量\n\n    Returns\n    ----------\n    : bool\n        添加操作是否成功\n    '''\n    pass\n```\n\n\n```tool-2\ndef jingdong.place_order(cart_items: List[Dict], address_id: str, payment_method: str) -> str:\n    '''\n    下单\n\n    Parameters\n    ----------\n    cart_items : List[Dict]\n        购物车中的商品列表\n    address_id : str\n        收货地址ID\n    payment_method : str\n        支付方式\n\n    Returns\n    ----------\n    : str\n        返回生成的订单ID\n    '''\n    pass\n```\n\n\n```tool-3\ndef notes.create_note(title: str, content: str, tags: List[str]) -> str:\n    '''\n    添加一条新的备忘录\n\n    Parameters\n    ----------\n    title : str, optional\n        备忘录标题\n    content : str\n        备忘录内容\n    tags : List[str], optional\n        备忘录标签\n\n    Returns\n    ----------\n    : str\n        创建成功的备忘录ID\n    '''\n    pass\n```\n\n\n```tool-4\ndef notes.delete_note(note_id: str) -> bool:\n    '''\n    删除指定ID的备忘录\n\n    Parameters\n    ----------\n    note_id : str\n        备忘录ID\n\n    Returns\n    ----------\n    : bool\n        删除操作是否成功\n    '''\n    pass\n```\n\n\n```tool-5\ndef jingdong.get_promotions() -> List[Dict]:\n    '''\n    获取促销活动信息\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict]\n        当前有效的促销活动列表，每个活动包括名称、描述、优惠等信息\n    '''\n    pass\n```\n\n\n```tool-6\ndef notes.add_attachment(note_id: str, attachment: str) -> str:\n    '''\n    为备忘录添加附件，如图片、音频等\n\n    Parameters\n    ----------\n    note_id : str\n        备忘录ID\n    attachment : str\n        附件地址(url)\n\n    Returns\n    ----------\n    : str\n        新增附件之后的备忘录ID\n    '''\n    pass\n```\n\n\n```tool-7\ndef jingdong.remove_from_cart(product_id: str) -> bool:\n    '''\n    从购物车移除商品\n\n    Parameters\n    ----------\n    product_id : str\n        商品ID\n\n    Returns\n    ----------\n    : bool\n        移除操作是否成功\n    '''\n    pass\n```\n\n\n```tool-8\ndef jingdong.search_product(keywords: str, category: str, sort_by: str) -> List[Dict]:\n    '''\n    搜索商品\n\n    Parameters\n    ----------\n    keywords : str\n        搜索关键词\n    category : str, optional\n        商品分类\n    sort_by : str, optional\n        排序方式，如价格、销量等\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的商品列表，每个商品包含名称、价格、图片、评分等信息\n    '''\n    pass\n```\n\n\n```tool-9\ndef jingdong.get_product_detail(product_id: str) -> Dict:\n    '''\n    获取商品详情\n\n    Parameters\n    ----------\n    product_id : str\n        商品ID\n\n    Returns\n    ----------\n    : Dict\n        返回商品的详细信息，包括名称、价格、描述、评论等\n    '''\n    pass\n```\n\n\n```tool-10\ndef jingdong.get_user_profile() -> Dict:\n    '''\n    查看个人资料\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : Dict\n        个人资料信息，包括姓名、手机号、地址等\n    '''\n    pass\n```",
        "query": "帮我挑选这种配置的笔记本电脑，要求价格在7000到9000以内，并将链接保存在我的便签中",
        "ground_truth": [
            {
                "id": 1,
                "name": "jingdong.search_product",
                "args": {
                    "keywords": "笔记本电脑 i7-14650HX 16G 1T RTX4060 2.5K 7000元-9000元",
                    "category": "笔记本电脑",
                    "sort_by": ""
                }
            },
            {
                "id": 2,
                "name": "notes.create_note",
                "args": {
                    "title": "笔记本电脑推荐",
                    "content": "符合条件的笔记本电脑链接：\n #E1",
                    "tags": [
                        "购物",
                        "电子产品"
                    ]
                }
            }
        ],
        "plan_str": "SubTask1: 根据配置和价格范围搜索符合条件的笔记本电脑\n#E1 = jingdong.search_product(keywords=\"笔记本电脑 i7-14650HX 16G 1T RTX4060 2.5K 7000元-9000元\", category=\"笔记本电脑\", sort_by=\"\")\nSubTask2:  创建新的笔记\n#E2 = notes.create_note(title=\"笔记本电脑推荐\", content=\"符合条件的笔记本电脑链接：\\n #E1\", tags=[\"购物\", \"电子产品\"])",
        "image": "mt-plan_0.jpg"
    },
    "query_1": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "semantic_search",
                    "models"
                ],
                "selected_apis_name": [
                    "models.scan_image_then_extract_information",
                    "models.math_qa",
                    "semantic_search.web_search",
                    "models.search_then_response",
                    "models.code_qa",
                    "models.directly_answer",
                    "models.multimodal_qa",
                    "models.creative_writing",
                    "models.general_response",
                    "models.safety_response"
                ]
            },
            "environment": {
                "datetime": "2018年01月30日 星期二",
                "location": "辽宁省沈阳市"
            }
        },
        "api_descriptions": "```tool-1\ndef models.scan_image_then_extract_information(instruction: str, image_url: str) -> str:\n    '''\n    擅长从给定(手机屏幕)图片中抽取需要的信息，例如从手机/PC等设备屏幕上抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将从该图片中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef semantic_search.web_search(query: str, count: int) -> List[str]:\n    '''\n    网页搜索，根据输入的query，在搜索引擎中查找相关页面，可用于查找人物、物品、体育赛事、事件相关的时效性信息，精确信息。\n\n    Parameters\n    ----------\n    query : str\n        用户搜索的关键词、短语、查询，该参数项不能为空。\n    count : int, optional\n        期望返回的搜索结果数量\n\n    Returns\n    ----------\n    : List[str]\n        搜索引擎返回的结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.search_then_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个具备搜索引擎能力的问答模型，具备以下能力：\n1. 搜索实时信息并总结。如果用户问题涉及时效性信息，问答模型第一步通过搜索引擎检索信息，第二步对检索的多个信息进行汇总，生成回复；\n2. 问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的instruction和给定的参考references，生成正确、有用、安全的回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令/问题，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        返回的回复\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.code_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长代码生成、代码解释、代码调试、代码语言转换、代码优化、代码识别等代码程序相关任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与代码、程序相关。\n    references : List[Union[List[str], str]]\n        应答代码相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef models.directly_answer(answer: str) -> str:\n    '''\n    你可以通过这个工具直接回答问题。例如以下情况，你可以直接回答：\n1. 用户的问题属于简单闲聊类，如问候语、询问人设信息等；\n2. 用户问题的答案可以直接从屏幕图片中获取，如图片中的文字、颜色、数量等显式信息。\n\n    Parameters\n    ----------\n    answer : str\n        answer\n\n    Returns\n    ----------\n    : str\n        问题答案\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef models.safety_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长回应与安全价值观相关的问题，用于直接回答黄赌毒、性别歧视、社会和谐、道德伦理、涉政、宗教、和恶意引导/诱导相关的用户请求。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题存在安全价值观风险，如黄赌毒、涉政、宗教、或恶意引导。\n    references : List[Union[List[str], str]]\n        应答安全价值观相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的安全且友好的回复结果\n    '''\n    pass\n```",
        "query": "这个人是谁，演过什么电视",
        "ground_truth": [
            {
                "id": 1,
                "name": "models.multimodal_qa",
                "args": {
                    "instruction": "图片中的人是谁",
                    "image_url": "screen_image_url"
                }
            },
            {
                "id": 2,
                "name": "semantic_search.web_search",
                "args": {
                    "query": "#E1 演过的电视剧"
                }
            },
            {
                "id": 3,
                "name": "models.general_response",
                "args": {
                    "instruction": "介绍#E1以及他/她演过的电视剧",
                    "references": [
                        "#E2"
                    ]
                }
            }
        ],
        "plan_str": "SubTask1: 识别屏幕中的人物\n#E1 = models.multimodal_qa(instruction=\"图片中的人是谁\", image_url=\"screen_image_url\")\nSubTask2: 搜索该人物演过的电视剧\n#E2 = semantic_search.web_search(query=\"#E1 演过的电视剧\")\nSubTask3: 整理结果\n#E3 = models.general_response(instruction=\"介绍#E1以及他/她演过的电视剧\", references=[#E2]) \n",
        "image": "mt-plan_1.jpg"
    },
    "query_2": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "semantic_search",
                    "models",
                    "easyqq"
                ],
                "selected_apis_name": [
                    "models.creative_writing",
                    "models.image_search",
                    "easyqq.send_voice_message",
                    "models.math_qa",
                    "easyqq.make_video_call",
                    "models.multimodal_qa",
                    "semantic_search.personal_context_search",
                    "models.code_qa",
                    "easyqq.transfer_file",
                    "easyqq.send_message"
                ]
            },
            "environment": {
                "datetime": "2024年05月27日 星期一",
                "location": "云南省大理白族自治州"
            }
        },
        "api_descriptions": "```tool-1\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.image_search(image_url: str) -> str:\n    '''\n    一个基于给定的图片搜索图中事物相关信息的模型，该模型的能力包括：\n1. 搜索著名人物的身份、经历，包括明星、政客、历史人物、体育明星等；\n2. 识别图像中动物/植物的品种；\n3. 识别照片中地点或景点的名称和地址。\n\n    Parameters\n    ----------\n    image_url : str\n        给定图片地址，将搜索该图片中的人、动植物或地点的相关信息\n\n    Returns\n    ----------\n    : str\n        图片中事物的相关信息\n    '''\n    pass\n```\n\n\n```tool-3\ndef easyqq.send_voice_message(audio_file_path: str, recipient: str) -> bool:\n    '''\n    用于向特定好友或群组发送语音消息\n\n    Parameters\n    ----------\n    audio_file_path : str\n        语音文件路径\n    recipient : str\n        好友或群组名称\n\n    Returns\n    ----------\n    : bool\n        发送语音消息是否成功\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef easyqq.make_video_call(contact: str) -> bool:\n    '''\n    用于向特定好友发起视频通话\n\n    Parameters\n    ----------\n    contact : str\n        好友名称\n\n    Returns\n    ----------\n    : bool\n        视频通话是否成功发起\n    '''\n    pass\n```\n\n\n```tool-6\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-7\ndef semantic_search.personal_context_search(query: str) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.code_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长代码生成、代码解释、代码调试、代码语言转换、代码优化、代码识别等代码程序相关任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与代码、程序相关。\n    references : List[Union[List[str], str]]\n        应答代码相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef easyqq.transfer_file(file_path: str, device: str) -> bool:\n    '''\n    用于在手机和电脑之间传输文件\n\n    Parameters\n    ----------\n    file_path : str\n        要传输的文件路径\n    device : str\n        目标设备名称\n\n    Returns\n    ----------\n    : bool\n        文件传输是否成功\n    '''\n    pass\n```\n\n\n```tool-10\ndef easyqq.send_message(text: str, recipient: str) -> bool:\n    '''\n    用于向特定好友或群组发送消息\n\n    Parameters\n    ----------\n    text : str\n        要发送的文本\n    recipient : str\n        好友或群组名称\n\n    Returns\n    ----------\n    : bool\n        消息发送是否成功\n    '''\n    pass\n```",
        "query": "屏幕中的是什么植物，查询一下这个植物的习性并将其通过QQ发给弟弟。",
        "ground_truth": [
            {
                "id": 1,
                "name": "models.image_search",
                "args": {
                    "instruction": "这是什么植物，习性是什么？",
                    "image_url": "screen_image_url"
                }
            },
            {
                "id": 2,
                "name": "semantic_search.personal_context_search",
                "args": {
                    "query": "弟弟的QQ号"
                }
            },
            {
                "id": 4,
                "name": "easyqq.send_message",
                "args": {
                    "text": "#E1",
                    "recipient": "#E2"
                }
            }
        ],
        "plan_str": "SubTask1: 识别屏幕上的植物\n#E1 = models.image_search(instruction=\"这是什么植物，习性是什么？\", image_url=\"screen_image_url\")\nSubTask2: 查找弟弟的QQ号\n#E2 = semantic_search.personal_context_search(query=\"弟弟的QQ号\")\nSubTask3: 将植物名称和习性发送给弟弟\n#E4 = easyqq.send_message(text=#E1, recipient=#E2) \n",
        "image": "mt-plan_2.png"
    },
    "query_3": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "models"
                ],
                "selected_apis_name": [
                    "models.scan_image_then_extract_information",
                    "models.multimodal_qa",
                    "models.personal_qa",
                    "models.creative_writing",
                    "models.math_qa",
                    "models.directly_answer",
                    "models.safety_response",
                    "models.image_search",
                    "models.extract_information_from_text",
                    "models.code_qa"
                ]
            },
            "environment": {
                "datetime": "2024年02月23日 星期五",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef models.scan_image_then_extract_information(instruction: str, image_url: str) -> str:\n    '''\n    擅长从给定(手机屏幕)图片中抽取需要的信息，例如从手机/PC等设备屏幕上抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将从该图片中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.personal_qa(instruction: str, user_features: str, references: Dict[str, str]) -> str:\n    '''\n    擅长回复可以结合用户个性化信息回答的问题\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题\n    user_features : str\n        提供的用户个性化信息\n    references : Dict[str, str], optional\n        参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef models.directly_answer(answer: str) -> str:\n    '''\n    你可以通过这个工具直接回答问题。例如以下情况，你可以直接回答：\n1. 用户的问题属于简单闲聊类，如问候语、询问人设信息等；\n2. 用户问题的答案可以直接从屏幕图片中获取，如图片中的文字、颜色、数量等显式信息。\n\n    Parameters\n    ----------\n    answer : str\n        answer\n\n    Returns\n    ----------\n    : str\n        问题答案\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.safety_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长回应与安全价值观相关的问题，用于直接回答黄赌毒、性别歧视、社会和谐、道德伦理、涉政、宗教、和恶意引导/诱导相关的用户请求。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题存在安全价值观风险，如黄赌毒、涉政、宗教、或恶意引导。\n    references : List[Union[List[str], str]]\n        应答安全价值观相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的安全且友好的回复结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.image_search(image_url: str) -> str:\n    '''\n    一个基于给定的图片搜索图中事物相关信息的模型，该模型的能力包括：\n1. 搜索著名人物的身份、经历，包括明星、政客、历史人物、体育明星等；\n2. 识别图像中动物/植物的品种；\n3. 识别照片中地点或景点的名称和地址。\n\n    Parameters\n    ----------\n    image_url : str\n        给定图片地址，将搜索该图片中的人、动植物或地点的相关信息\n\n    Returns\n    ----------\n    : str\n        图片中事物的相关信息\n    '''\n    pass\n```\n\n\n```tool-9\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef models.code_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长代码生成、代码解释、代码调试、代码语言转换、代码优化、代码识别等代码程序相关任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与代码、程序相关。\n    references : List[Union[List[str], str]]\n        应答代码相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```",
        "query": "根据这个体重记录，估计下什么时候能瘦到100斤",
        "ground_truth": [
            {
                "id": 1,
                "name": "models.math_qa",
                "args": {
                    "instruction": "根据图片中的体重记录，估计什么时候能瘦到100斤",
                    "image_url": "screen_image_url",
                    "references": []
                }
            }
        ],
        "plan_str": "SubTask1: 根据图片中的体重记录，估计什么时候能瘦到100斤\n#E1 = models.math_qa(instruction=\"根据图片中的体重记录，估计什么时候能瘦到100斤\", image_url=\"screen_image_url\", references=[])",
        "image": "mt-plan_3.png"
    },
    "query_4": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "pupu"
                ],
                "selected_apis_name": [
                    "pupu.get_user_profile",
                    "pupu.place_order",
                    "pupu.cancel_order",
                    "pupu.view_cart",
                    "pupu.contact_customer_service",
                    "pupu.search_product",
                    "pupu.remove_from_cart",
                    "pupu.list_orders",
                    "pupu.update_user_profile",
                    "pupu.add_to_cart"
                ]
            },
            "environment": {
                "datetime": "2024年08月22日 星期四",
                "location": "广州"
            }
        },
        "api_descriptions": "```tool-1\ndef pupu.get_user_profile() -> Dict:\n    '''\n    查看用户个人资料\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : Dict\n        个人资料信息，包括姓名、手机号、地址等\n    '''\n    pass\n```\n\n\n```tool-2\ndef pupu.place_order(cart_items: List[Dict], address_id: str, payment_method: str) -> str:\n    '''\n    下单\n\n    Parameters\n    ----------\n    cart_items : List[Dict]\n        购物车中的商品列表\n    address_id : str\n        收货地址ID\n    payment_method : str\n        支付方式\n\n    Returns\n    ----------\n    : str\n        返回生成的订单ID\n    '''\n    pass\n```\n\n\n```tool-3\ndef pupu.cancel_order(order_id: str) -> bool:\n    '''\n    取消订单\n\n    Parameters\n    ----------\n    order_id : str\n        订单ID\n\n    Returns\n    ----------\n    : bool\n        取消操作是否成功\n    '''\n    pass\n```\n\n\n```tool-4\ndef pupu.view_cart() -> List[Dict]:\n    '''\n    查看购物车\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict]\n        购物车商品列表，每个商品包括名称、价格、数量等信息\n    '''\n    pass\n```\n\n\n```tool-5\ndef pupu.contact_customer_service(query: str) -> bool:\n    '''\n    联系客服\n\n    Parameters\n    ----------\n    query : str\n        咨询问题或需要客服帮助的内容\n\n    Returns\n    ----------\n    : bool\n        联系操作是否成功\n    '''\n    pass\n```\n\n\n```tool-6\ndef pupu.search_product(keywords: str, category: str, sort_by: str) -> List[Dict]:\n    '''\n    搜索商品\n\n    Parameters\n    ----------\n    keywords : str\n        搜索关键词\n    category : str, optional\n        商品分类\n    sort_by : str, optional\n        排序方式，如价格、销量等\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的商品列表，每个商品包括名称、价格、图片、评分等信息\n    '''\n    pass\n```\n\n\n```tool-7\ndef pupu.remove_from_cart(product_id: str) -> bool:\n    '''\n    从购物车移除商品\n\n    Parameters\n    ----------\n    product_id : str\n        商品ID\n\n    Returns\n    ----------\n    : bool\n        移除操作是否成功\n    '''\n    pass\n```\n\n\n```tool-8\ndef pupu.list_orders(status: str) -> List[Dict]:\n    '''\n    查看历史订单\n\n    Parameters\n    ----------\n    status : str, optional\n        订单状态\n\n    Returns\n    ----------\n    : List[Dict]\n        历史订单列表，每个订单包括ID、商品列表、金额等信息\n    '''\n    pass\n```\n\n\n```tool-9\ndef pupu.update_user_profile(profile_info: Dict) -> bool:\n    '''\n    更新用户个人资料\n\n    Parameters\n    ----------\n    profile_info : Dict\n        需要更新的个人资料信息\n\n    Returns\n    ----------\n    : bool\n        更新操作是否成功\n    '''\n    pass\n```\n\n\n```tool-10\ndef pupu.add_to_cart(product_id: str, quantity: int) -> bool:\n    '''\n    添加商品到购物车\n\n    Parameters\n    ----------\n    product_id : str\n        商品ID\n    quantity : int\n        购买数量\n\n    Returns\n    ----------\n    : bool\n        添加操作是否成功\n    '''\n    pass\n```",
        "query": "在朴朴上买一盒鸡蛋和一桶5L的农夫山泉，收货地址改成图里面我的新地址",
        "ground_truth": [
            {
                "id": 1,
                "name": "pupu.update_user_profile",
                "args": {
                    "user_id": "unknown",
                    "profile_info": {
                        "address": "深圳市南山区桂湾四路华润前海大厦B座"
                    }
                }
            },
            {
                "id": 2,
                "name": "pupu.search_product",
                "args": {
                    "keywords": "鸡蛋",
                    "category": "食品生鲜",
                    "sort_by": ""
                }
            },
            {
                "id": 3,
                "name": "pupu.search_product",
                "args": {
                    "keywords": "农夫山泉 5L",
                    "category": "饮料",
                    "sort_by": ""
                }
            },
            {
                "id": 4,
                "name": "pupu.add_to_cart",
                "args": {
                    "product_id": "#E2[0]['product_id']",
                    "quantity": "1"
                }
            },
            {
                "id": 5,
                "name": "pupu.add_to_cart",
                "args": {
                    "product_id": "#E3[0]['product_id']",
                    "quantity": "1"
                }
            },
            {
                "id": 6,
                "name": "pupu.view_cart",
                "args": {}
            },
            {
                "id": 7,
                "name": "pupu.place_order",
                "args": {
                    "cart_items": "#E6",
                    "address_id": "#E1",
                    "payment_method": "online"
                }
            }
        ],
        "plan_str": "SubTask1: 将收货地址修改为我的新地址\n#E1 = pupu.update_user_profile(user_id=\"unknown\", profile_info={'address': '深圳市南山区桂湾四路华润前海大厦B座'})\n\nSubTask2: 搜索朴朴APP中鸡蛋的商品ID\n#E2 = pupu.search_product(keywords=\"鸡蛋\", category=\"食品生鲜\", sort_by=\"\")\n\nSubTask3: 搜索朴朴APP中5L装农夫山泉的商品ID\n#E3 = pupu.search_product(keywords=\"农夫山泉 5L\", category=\"饮料\", sort_by=\"\")\n\nSubTask4: 将鸡蛋添加到购物车\n#E4 = pupu.add_to_cart(product_id=#E2[0]['product_id'], quantity=1) \n\nSubTask5: 将农夫山泉添加到购物车\n#E5 = pupu.add_to_cart(product_id=#E3[0]['product_id'], quantity=1)\n\nSubTask6: 查看购物车\n#E6 = pupu.view_cart()\n\nSubTask7: 下单\n#E7 = pupu.place_order(cart_items=#E6, address_id=#E1, payment_method=\"online\")",
        "image": "mt-plan_4.png"
    },
    "query_5": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "didi"
                ],
                "selected_apis_name": [
                    "didi.get_order_history",
                    "didi.cancel_order",
                    "didi.check_order_status",
                    "didi.estimate_fare",
                    "didi.request_ride",
                    "didi.share_trip",
                    "didi.get_nearby_vehicles"
                ]
            },
            "environment": {
                "datetime": "2019年10月09日 星期三",
                "location": "广西壮族自治区防城港市"
            }
        },
        "api_descriptions": "```tool-1\ndef didi.get_order_history(start_date: str, end_date: str) -> List[Dict]:\n    '''\n    查询历史订单\n\n    Parameters\n    ----------\n    start_date : str, optional\n        查询历史订单的起始日期\n    end_date : str, optional\n        查询历史订单的结束日期\n\n    Returns\n    ----------\n    : List[Dict]\n        返回历史订单列表，每个订单包含详细的信息\n    '''\n    pass\n```\n\n\n```tool-2\ndef didi.cancel_order(order_id: str) -> bool:\n    '''\n    取消订单\n\n    Parameters\n    ----------\n    order_id : str\n        订单ID\n\n    Returns\n    ----------\n    : bool\n        取消操作是否成功\n    '''\n    pass\n```\n\n\n```tool-3\ndef didi.check_order_status(order_id: str) -> Dict:\n    '''\n    查询订单状态\n\n    Parameters\n    ----------\n    order_id : str\n        订单ID\n\n    Returns\n    ----------\n    : Dict\n        返回订单状态信息，例如司机信息、车辆信息以及当前进度\n    '''\n    pass\n```\n\n\n```tool-4\ndef didi.estimate_fare(pickup_location: str, dropoff_location: str, ride_type: str) -> dict:\n    '''\n    预估车费\n\n    Parameters\n    ----------\n    pickup_location : str\n        上车地点的经纬度坐标，用逗号分隔\n    dropoff_location : str\n        下车地点的经纬度坐标，用逗号分隔\n    ride_type : str, optional\n        打车类型，如快车、专车等\n\n    Returns\n    ----------\n    : dict\n        返回车费预估结果，包括预估费用和预估时间\n    '''\n    pass\n```\n\n\n```tool-5\ndef didi.request_ride(pickup_location: str, dropoff_location: str, ride_type: str) -> str:\n    '''\n    发起叫车请求\n\n    Parameters\n    ----------\n    pickup_location : str\n        上车地点的经纬度坐标，用逗号分隔\n    dropoff_location : str\n        下车地点的经纬度坐标，用逗号分隔\n    ride_type : str\n        打车类型，如快车、专车等\n\n    Returns\n    ----------\n    : str\n        返回生成的订单ID\n    '''\n    pass\n```\n\n\n```tool-6\ndef didi.share_trip(order_id: str, contact: str) -> bool:\n    '''\n    分享行程\n\n    Parameters\n    ----------\n    order_id : str\n        订单ID\n    contact : str\n        分享对象的联系方式\n\n    Returns\n    ----------\n    : bool\n        分享操作是否成功\n    '''\n    pass\n```\n\n\n```tool-7\ndef didi.get_nearby_vehicles(location: str, ride_type: str) -> List[Dict]:\n    '''\n    获取附近车辆信息\n\n    Parameters\n    ----------\n    location : str\n        当前地点的经纬度坐标，用逗号分隔\n    ride_type : str, optional\n        打车类型，如快车、专车等\n\n    Returns\n    ----------\n    : List[Dict]\n        返回附近可供叫车的车辆信息列表\n    '''\n    pass\n```",
        "query": "我到站了，现在帮我叫一辆快车，到深圳前海湾。",
        "ground_truth": [
            {
                "id": 1,
                "name": "didi.request_ride",
                "args": {
                    "pickup_location": "深圳北",
                    "dropoff_location": "深圳前海湾",
                    "ride_type": "快车"
                }
            }
        ],
        "plan_str": "SubTask1: 叫一辆快车，目的地是深圳前海湾\n#E1 = didi.request_ride(pickup_location=\"深圳北\", dropoff_location=\"深圳前海湾\", ride_type=\"快车\") \n",
        "image": "mt-plan_5.png"
    },
    "query_6": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "goofish"
                ],
                "selected_apis_name": [
                    "goofish.purchase_item",
                    "goofish.share_item",
                    "goofish.get_favorite_items",
                    "goofish.get_item_detail",
                    "goofish.get_user_profile",
                    "goofish.contact_seller",
                    "goofish.check_order_status",
                    "goofish.add_to_favorites",
                    "goofish.update_user_profile",
                    "goofish.search_items"
                ]
            },
            "environment": {
                "datetime": "2024年08月21日 星期三",
                "location": "杭州"
            }
        },
        "api_descriptions": "```tool-1\ndef goofish.purchase_item(buyer_id: str, item_id: str, payment_method: str) -> bool:\n    '''\n    购买二手商品\n\n    Parameters\n    ----------\n    buyer_id : str\n        买家ID\n    item_id : str\n        商品ID\n    payment_method : str\n        支付方式，如支付宝、微信等\n\n    Returns\n    ----------\n    : bool\n        购买操作是否成功\n    '''\n    pass\n```\n\n\n```tool-2\ndef goofish.share_item(item_id: str, platform: str) -> bool:\n    '''\n    分享商品链接\n\n    Parameters\n    ----------\n    item_id : str\n        商品ID\n    platform : str\n        分享的平台，如微信、微博等\n\n    Returns\n    ----------\n    : bool\n        分享操作是否成功\n    '''\n    pass\n```\n\n\n```tool-3\ndef goofish.get_favorite_items() -> List[Dict]:\n    '''\n    查看收藏的商品\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict]\n        用户收藏的商品列表\n    '''\n    pass\n```\n\n\n```tool-4\ndef goofish.get_item_detail(item_id: str) -> Dict:\n    '''\n    查看商品详情\n\n    Parameters\n    ----------\n    item_id : str\n        商品ID\n\n    Returns\n    ----------\n    : Dict\n        商品的详细信息，包括名称、描述、价格、卖家信息等\n    '''\n    pass\n```\n\n\n```tool-5\ndef goofish.get_user_profile() -> Dict:\n    '''\n    查看个人资料\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : Dict\n        用户的个人信息，包括昵称、联系方式、发布的商品等\n    '''\n    pass\n```\n\n\n```tool-6\ndef goofish.contact_seller(buyer_id: str, seller_id: str, message: str) -> bool:\n    '''\n    联系卖家\n\n    Parameters\n    ----------\n    buyer_id : str\n        买家ID\n    seller_id : str\n        卖家ID\n    message : str\n        发送给卖家的消息内容\n\n    Returns\n    ----------\n    : bool\n        消息发送是否成功\n    '''\n    pass\n```\n\n\n```tool-7\ndef goofish.check_order_status(order_id: str) -> Dict:\n    '''\n    查看订单状态\n\n    Parameters\n    ----------\n    order_id : str\n        订单ID\n\n    Returns\n    ----------\n    : Dict\n        订单的详细状态信息，包括物流信息等\n    '''\n    pass\n```\n\n\n```tool-8\ndef goofish.add_to_favorites(item_id: str) -> bool:\n    '''\n    收藏商品\n\n    Parameters\n    ----------\n    item_id : str\n        商品ID\n\n    Returns\n    ----------\n    : bool\n        收藏操作是否成功\n    '''\n    pass\n```\n\n\n```tool-9\ndef goofish.update_user_profile(profile_info: Dict) -> bool:\n    '''\n    更新个人资料\n\n    Parameters\n    ----------\n    profile_info : Dict\n        需要更新的个人资料信息\n\n    Returns\n    ----------\n    : bool\n        更新操作是否成功\n    '''\n    pass\n```\n\n\n```tool-10\ndef goofish.search_items(keywords: str, category: str, price_range: str, sort_by: str) -> List[Dict]:\n    '''\n    搜索二手商品\n\n    Parameters\n    ----------\n    keywords : str\n        搜索关键词\n    category : str, optional\n        商品分类\n    price_range : str, optional\n        价格范围\n    sort_by : str, optional\n        排序方式，如价格、发布时间等\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的商品列表，包括商品名称、价格、图片等信息\n    '''\n    pass\n```",
        "query": "帮我在闲鱼查找下这个商品，要求商品不能破损，没有过多的笔记涂鸦，价格小于50元",
        "ground_truth": [
            {
                "id": 1,
                "name": "goofish.search_items",
                "args": {
                    "keywords": "C++ Primer Plus（第6版）中文版",
                    "price_range": "0-50"
                }
            },
            {
                "id": 2,
                "name": "goofish.contact_seller",
                "args": {
                    "seller_id": "#E1[0]['seller_id']",
                    "message": "您好，请问这款 #E1 是否有破损或者笔记涂鸦？"
                }
            }
        ],
        "plan_str": "SubTask1: 在闲鱼搜索商品\n#E1 = goofish.search_items(keywords=\"C++ Primer Plus（第6版）中文版\", price_range=\"0-50\")\nSubTask2: 联系卖家，询问商品是否破损，是否有笔记涂鸦\n#E2 = goofish.contact_seller(seller_id=\"#E1[0]['seller_id']\", message=\"您好，请问这款 #E1 是否有破损或者笔记涂鸦？\") \n",
        "image": "mt-plan_6.png"
    },
    "query_7": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "pupu"
                ],
                "selected_apis_name": [
                    "pupu.get_promotions",
                    "pupu.contact_customer_service",
                    "pupu.remove_from_cart",
                    "pupu.search_product",
                    "pupu.check_order_status",
                    "pupu.view_cart",
                    "pupu.list_orders",
                    "pupu.get_user_profile",
                    "pupu.update_user_profile",
                    "pupu.add_to_cart"
                ]
            },
            "environment": {
                "datetime": "2020年11月09日 星期一",
                "location": "山西省临汾市"
            }
        },
        "api_descriptions": "```tool-1\ndef pupu.get_promotions(category: str) -> List[Dict]:\n    '''\n    查看促销活动\n\n    Parameters\n    ----------\n    category : str, optional\n        活动分类，如生鲜、日用品等\n\n    Returns\n    ----------\n    : List[Dict]\n        当前有效的促销活动列表，每个活动包含名称、描述、优惠内容等信息\n    '''\n    pass\n```\n\n\n```tool-2\ndef pupu.contact_customer_service(query: str) -> bool:\n    '''\n    联系客服\n\n    Parameters\n    ----------\n    query : str\n        咨询问题或需要客服帮助的内容\n\n    Returns\n    ----------\n    : bool\n        联系操作是否成功\n    '''\n    pass\n```\n\n\n```tool-3\ndef pupu.remove_from_cart(product_id: str) -> bool:\n    '''\n    从购物车移除商品\n\n    Parameters\n    ----------\n    product_id : str\n        商品ID\n\n    Returns\n    ----------\n    : bool\n        移除操作是否成功\n    '''\n    pass\n```\n\n\n```tool-4\ndef pupu.search_product(keywords: str, category: str, sort_by: str) -> List[Dict]:\n    '''\n    搜索商品\n\n    Parameters\n    ----------\n    keywords : str\n        搜索关键词\n    category : str, optional\n        商品分类\n    sort_by : str, optional\n        排序方式，如价格、销量等\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的商品列表，每个商品包括名称、价格、图片、评分等信息\n    '''\n    pass\n```\n\n\n```tool-5\ndef pupu.check_order_status(order_id: str) -> Dict:\n    '''\n    查询订单状态\n\n    Parameters\n    ----------\n    order_id : str\n        订单ID\n\n    Returns\n    ----------\n    : Dict\n        返回订单状态信息，例如配送状态及预计送达时间\n    '''\n    pass\n```\n\n\n```tool-6\ndef pupu.view_cart() -> List[Dict]:\n    '''\n    查看购物车\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict]\n        购物车商品列表，每个商品包括名称、价格、数量等信息\n    '''\n    pass\n```\n\n\n```tool-7\ndef pupu.list_orders(status: str) -> List[Dict]:\n    '''\n    查看历史订单\n\n    Parameters\n    ----------\n    status : str, optional\n        订单状态\n\n    Returns\n    ----------\n    : List[Dict]\n        历史订单列表，每个订单包括ID、商品列表、金额等信息\n    '''\n    pass\n```\n\n\n```tool-8\ndef pupu.get_user_profile() -> Dict:\n    '''\n    查看用户个人资料\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : Dict\n        个人资料信息，包括姓名、手机号、地址等\n    '''\n    pass\n```\n\n\n```tool-9\ndef pupu.update_user_profile(profile_info: Dict) -> bool:\n    '''\n    更新用户个人资料\n\n    Parameters\n    ----------\n    profile_info : Dict\n        需要更新的个人资料信息\n\n    Returns\n    ----------\n    : bool\n        更新操作是否成功\n    '''\n    pass\n```\n\n\n```tool-10\ndef pupu.add_to_cart(product_id: str, quantity: int) -> bool:\n    '''\n    添加商品到购物车\n\n    Parameters\n    ----------\n    product_id : str\n        商品ID\n    quantity : int\n        购买数量\n\n    Returns\n    ----------\n    : bool\n        添加操作是否成功\n    '''\n    pass\n```",
        "query": "在朴朴上面添加这个帖子中蛋糕胚使用到的食材，牛奶、鸡蛋和柠檬我家里有不用买，谢谢",
        "ground_truth": [
            {
                "id": 1,
                "name": "pupu.search_product",
                "args": {
                    "keywords": "玉米油",
                    "category": "",
                    "sort_by": ""
                }
            },
            {
                "id": 2,
                "name": "pupu.add_to_cart",
                "args": {
                    "product_id": "#E1[0]['product_id']",
                    "quantity": "1"
                }
            },
            {
                "id": 3,
                "name": "pupu.search_product",
                "args": {
                    "keywords": "低筋面粉",
                    "category": "",
                    "sort_by": ""
                }
            },
            {
                "id": 4,
                "name": "pupu.add_to_cart",
                "args": {
                    "product_id": "#E3[0]['product_id']",
                    "quantity": "1"
                }
            },
            {
                "id": 5,
                "name": "pupu.search_product",
                "args": {
                    "keywords": "白糖",
                    "category": "",
                    "sort_by": ""
                }
            },
            {
                "id": 6,
                "name": "pupu.add_to_cart",
                "args": {
                    "product_id": "#E5[0]['product_id']",
                    "quantity": "1"
                }
            },
            {
                "id": 7,
                "name": "pupu.view_cart",
                "args": {}
            }
        ],
        "plan_str": "SubTask1: 搜索玉米油在朴朴上的商品信息\n#E1 = pupu.search_product(keywords=\"玉米油\", category=\"\", sort_by=\"\")\nSubTask2: 将玉米油添加到购物车\n#E2 = pupu.add_to_cart(product_id=#E1[0]['product_id'], quantity=1)\nSubTask3: 搜索低筋面粉在朴朴上的商品信息\n#E3 = pupu.search_product(keywords=\"低筋面粉\", category=\"\", sort_by=\"\")\nSubTask4: 将低筋面粉添加到购物车\n#E4 = pupu.add_to_cart(product_id=#E3[0]['product_id'], quantity=1)\nSubTask5: 搜索白糖在朴朴上的商品信息\n#E5 = pupu.search_product(keywords=\"白糖\", category=\"\", sort_by=\"\")\nSubTask6: 将白糖添加到购物车\n#E6 = pupu.add_to_cart(product_id=#E5[0]['product_id'], quantity=1)\nSubTask7: 查看朴朴购物车\n#E7 = pupu.view_cart()",
        "image": "mt-plan_7.png"
    },
    "query_8": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "tianyancha",
                    "wewave"
                ],
                "selected_apis_name": [
                    "tianyancha.get_shareholders_info",
                    "tianyancha.get_court_notices",
                    "tianyancha.get_company_info",
                    "wewave.post_weibo",
                    "wewave.get_star_updates",
                    "tianyancha.get_dishonesty_records",
                    "wewave.get_recommended_content",
                    "wewave.get_short_videos",
                    "tianyancha.get_change_records",
                    "wewave.get_hot_search_list"
                ]
            },
            "environment": {
                "datetime": "2024年08月23日 星期五",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef tianyancha.get_shareholders_info(company_id: str) -> List[Dict]:\n    '''\n    查询企业股东信息\n\n    Parameters\n    ----------\n    company_id : str\n        企业ID\n\n    Returns\n    ----------\n    : List[Dict]\n        企业的股东信息，包括股东名称、出资比例等\n    '''\n    pass\n```\n\n\n```tool-2\ndef tianyancha.get_court_notices(company_id: str) -> List[Dict]:\n    '''\n    查询企业法院公告\n\n    Parameters\n    ----------\n    company_id : str\n        企业ID\n\n    Returns\n    ----------\n    : List[Dict]\n        企业相关的法院公告，包括公告类型、发布日期等\n    '''\n    pass\n```\n\n\n```tool-3\ndef tianyancha.get_company_info(company_name: str) -> Dict:\n    '''\n    查询企业基本信息\n\n    Parameters\n    ----------\n    company_name : str\n        企业名称\n\n    Returns\n    ----------\n    : Dict\n        企业的基本信息，包括名称、注册号、法人代表、注册地址等\n    '''\n    pass\n```\n\n\n```tool-4\ndef wewave.post_weibo(content: str, images: List[str], video: str) -> bool:\n    '''\n    发布新的微博\n\n    Parameters\n    ----------\n    content : str\n        微博内容\n    images : List[str], optional\n        微博图片列表\n    video : str, optional\n        微博视频链接\n\n    Returns\n    ----------\n    : bool\n        发布微博是否成功的状态\n    '''\n    pass\n```\n\n\n```tool-5\ndef wewave.get_star_updates(star_id: str) -> Dict[str, Union[str, int, List[str]]]:\n    '''\n    获取明星和大V的最新动态\n\n    Parameters\n    ----------\n    star_id : str\n        明星或大V的唯一标识\n\n    Returns\n    ----------\n    : Dict[str, Union[str, int, List[str]]]\n        明星或大V的最新动态信息，包括动态内容、发布时间、点赞数等\n    '''\n    pass\n```\n\n\n```tool-6\ndef tianyancha.get_dishonesty_records(company_id: str) -> List[Dict]:\n    '''\n    查询企业失信记录\n\n    Parameters\n    ----------\n    company_id : str\n        企业ID\n\n    Returns\n    ----------\n    : List[Dict]\n        企业的失信记录，包括失信被执行人信息、执行法院等\n    '''\n    pass\n```\n\n\n```tool-7\ndef wewave.get_recommended_content() -> List[Dict[str, Union[str, int, float]]]:\n    '''\n    获取微博推荐内容\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, int, float]]]\n        推荐内容的列表，每个内容包含标题、描述、发布时间等信息\n    '''\n    pass\n```\n\n\n```tool-8\ndef wewave.get_short_videos() -> List[Dict[str, Union[str, int, float]]]:\n    '''\n    获取微博短视频列表\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, int, float]]]\n        微博短视频列表，包括视频的标题、URL、时长等信息\n    '''\n    pass\n```\n\n\n```tool-9\ndef tianyancha.get_change_records(company_id: str) -> List[Dict]:\n    '''\n    查询企业变更记录\n\n    Parameters\n    ----------\n    company_id : str\n        企业ID\n\n    Returns\n    ----------\n    : List[Dict]\n        企业的变更记录，包括变更事项、变更前后内容等\n    '''\n    pass\n```\n\n\n```tool-10\ndef wewave.get_hot_search_list() -> List[Dict[str, Union[str, int]]]:\n    '''\n    获取微博热搜榜单\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, int]]]\n        微博热搜榜单，包括热搜词条及其热度等信息\n    '''\n    pass\n```",
        "query": "微博上查看第三名企业的法人的最新动态",
        "ground_truth": [
            {
                "id": 1,
                "name": "tianyancha.get_company_info",
                "args": {
                    "company_name": "蔚来（NIO）"
                }
            },
            {
                "id": 2,
                "name": "wewave.get_star_updates",
                "args": {
                    "star_id": "#E1"
                }
            }
        ],
        "plan_str": "SubTask1: 查找图中第三名企业的法人\n#E1 = tianyancha.get_company_info(company_name=\"蔚来（NIO）\")\nSubTask2: 微博上获取最新动态\n#E2 = wewave.get_star_updates(star_id=#E1)",
        "image": "mt-plan_8.png"
    },
    "query_9": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "models",
                    "notes"
                ],
                "selected_apis_name": [
                    "models.directly_answer",
                    "models.date_qa",
                    "models.creative_writing",
                    "notes.create_note",
                    "notes.edit_note",
                    "models.multimodal_qa",
                    "models.scan_image_then_extract_information",
                    "models.image_search",
                    "models.extract_information_from_text",
                    "models.personal_qa"
                ]
            },
            "environment": {
                "datetime": "2023年12月31日 星期日",
                "location": "长沙"
            }
        },
        "api_descriptions": "```tool-1\ndef models.directly_answer(answer: str) -> str:\n    '''\n    你可以通过这个工具直接回答问题。例如以下情况，你可以直接回答：\n1. 用户的问题属于简单闲聊类，如问候语、询问人设信息等；\n2. 用户问题的答案可以直接从屏幕图片中获取，如图片中的文字、颜色、数量等显式信息。\n\n    Parameters\n    ----------\n    answer : str\n        answer\n\n    Returns\n    ----------\n    : str\n        问题答案\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.date_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长解答节假日、节气、是否上班、调休信息相关问题；也支持时间推理计算，如日期天数之差、离国庆节还有多久等。\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题，与节假日、节气、调休信息、日期推算相关\n    references : List[Union[List[str], str]]\n        提供的参考信息，能帮助解答问题，如当前日期、星期数等信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef notes.create_note(title: str, content: str, tags: List[str]) -> str:\n    '''\n    添加一条新的备忘录\n\n    Parameters\n    ----------\n    title : str, optional\n        备忘录标题\n    content : str\n        备忘录内容\n    tags : List[str], optional\n        备忘录标签\n\n    Returns\n    ----------\n    : str\n        创建成功的备忘录ID\n    '''\n    pass\n```\n\n\n```tool-5\ndef notes.edit_note(note_id: str, title: str, content: str, tags: List[str]) -> bool:\n    '''\n    编辑已有的备忘录\n\n    Parameters\n    ----------\n    note_id : str\n        备忘录ID\n    title : str, optional\n        新的备忘录标题\n    content : str\n        新的备忘录内容\n    tags : List[str], optional\n        新的备忘录标签\n\n    Returns\n    ----------\n    : bool\n        编辑操作是否成功\n    '''\n    pass\n```\n\n\n```tool-6\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.scan_image_then_extract_information(instruction: str, image_url: str) -> str:\n    '''\n    擅长从给定(手机屏幕)图片中抽取需要的信息，例如从手机/PC等设备屏幕上抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将从该图片中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.image_search(image_url: str) -> str:\n    '''\n    一个基于给定的图片搜索图中事物相关信息的模型，该模型的能力包括：\n1. 搜索著名人物的身份、经历，包括明星、政客、历史人物、体育明星等；\n2. 识别图像中动物/植物的品种；\n3. 识别照片中地点或景点的名称和地址。\n\n    Parameters\n    ----------\n    image_url : str\n        给定图片地址，将搜索该图片中的人、动植物或地点的相关信息\n\n    Returns\n    ----------\n    : str\n        图片中事物的相关信息\n    '''\n    pass\n```\n\n\n```tool-9\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef models.personal_qa(instruction: str, user_features: str, references: Dict[str, str]) -> str:\n    '''\n    擅长回复可以结合用户个性化信息回答的问题\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题\n    user_features : str\n        提供的用户个性化信息\n    references : Dict[str, str], optional\n        参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```",
        "query": "总结一下这一页的内容，50字以内，写到便签里面",
        "ground_truth": [
            {
                "id": 1,
                "name": "models.multimodal_qa",
                "args": {
                    "instruction": "将屏幕内容总结成50字以内",
                    "image_url": "screen_image_url"
                }
            },
            {
                "id": 2,
                "name": "notes.create_note",
                "args": {
                    "title": "屏幕内容总结",
                    "content": "#E1",
                    "tags": []
                }
            }
        ],
        "plan_str": "SubTask1: 调用多模态模型，提取屏幕信息，并将内容总结成50字以内\n#E1 = models.multimodal_qa(instruction=\"将屏幕内容总结成50字以内\", image_url=\"screen_image_url\")\nSubTask2: 将总结好的内容写到便签里\n#E2 = notes.create_note(title=\"屏幕内容总结\", content=#E1, tags=[]) ",
        "image": "mt-plan_9.png"
    },
    "query_10": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "calendar_app"
                ],
                "selected_apis_name": [
                    "calendar_app.view_calendar",
                    "calendar_app.edit_event",
                    "calendar_app.set_event_reminder",
                    "calendar_app.delete_event",
                    "calendar_app.create_event",
                    "calendar_app.invite_attendees",
                    "calendar_app.search_events",
                    "calendar_app.sync_calendar",
                    "calendar_app.set_recurring_event",
                    "calendar_app.list_events"
                ]
            },
            "environment": {
                "datetime": "2024年09月20日 星期五",
                "location": "浙江省湖州市"
            }
        },
        "api_descriptions": "```tool-1\ndef calendar_app.view_calendar(view_type: str, date: str) -> List[Dict[str, Union[str, List[str]]]]:\n    '''\n    查看日历视图\n\n    Parameters\n    ----------\n    view_type : str\n        视图类型，例如'day', 'week', 'month'\n    date : str\n        需要查看的日期（ISO格式）\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, List[str]]]]\n        对应视图的事件列表\n    '''\n    pass\n```\n\n\n```tool-2\ndef calendar_app.edit_event(event_id: str, title: str, start_time: str, end_time: str, location: str, description: str, attendees: List[str]) -> bool:\n    '''\n    编辑已有的事件\n\n    Parameters\n    ----------\n    event_id : str\n        事件ID\n    title : str, optional\n        新的事件标题\n    start_time : str, optional\n        新的事件开始时间（ISO格式）\n    end_time : str, optional\n        新的事件结束时间（ISO格式）\n    location : str, optional\n        新的事件地点\n    description : str, optional\n        新的事件描述\n    attendees : List[str], optional\n        新的事件参与者邮箱列表\n\n    Returns\n    ----------\n    : bool\n        编辑操作是否成功\n    '''\n    pass\n```\n\n\n```tool-3\ndef calendar_app.set_event_reminder(event_id: str, reminder_time: str, reminder_method: str) -> bool:\n    '''\n    设置事件提醒和通知\n\n    Parameters\n    ----------\n    event_id : str\n        事件ID\n    reminder_time : str\n        提醒时间（ISO格式）\n    reminder_method : str\n        提醒方式，例如'email', 'popup'\n\n    Returns\n    ----------\n    : bool\n        设置提醒操作是否成功\n    '''\n    pass\n```\n\n\n```tool-4\ndef calendar_app.delete_event(event_id: str) -> bool:\n    '''\n    删除指定ID的事件\n\n    Parameters\n    ----------\n    event_id : str\n        事件ID\n\n    Returns\n    ----------\n    : bool\n        删除操作是否成功\n    '''\n    pass\n```\n\n\n```tool-5\ndef calendar_app.create_event(title: str, start_time: str, end_time: str, location: str, description: str, attendees: List[str]) -> str:\n    '''\n    创建新的事件\n\n    Parameters\n    ----------\n    title : str\n        事件标题\n    start_time : str\n        事件开始时间（ISO格式）\n    end_time : str\n        事件结束时间（ISO格式）\n    location : str, optional\n        事件地点\n    description : str, optional\n        事件描述\n    attendees : List[str], optional\n        事件参与者邮箱列表\n\n    Returns\n    ----------\n    : str\n        创建成功的事件ID\n    '''\n    pass\n```\n\n\n```tool-6\ndef calendar_app.invite_attendees(event_id: str, attendees: List[str]) -> bool:\n    '''\n    邀请他人参加事件\n\n    Parameters\n    ----------\n    event_id : str\n        事件ID\n    attendees : List[str]\n        参与者邮箱列表\n\n    Returns\n    ----------\n    : bool\n        邀请操作是否成功\n    '''\n    pass\n```\n\n\n```tool-7\ndef calendar_app.search_events(query: str) -> List[Dict[str, Union[str, List[str]]]]:\n    '''\n    搜索事件和日程安排\n\n    Parameters\n    ----------\n    query : str\n        搜索关键词\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, List[str]]]]\n        搜索结果，符合条件的事件列表\n    '''\n    pass\n```\n\n\n```tool-8\ndef calendar_app.sync_calendar() -> bool:\n    '''\n    同步日历与其他设备\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : bool\n        同步操作是否成功\n    '''\n    pass\n```\n\n\n```tool-9\ndef calendar_app.set_recurring_event(event_id: str, recurrence_rule: str) -> bool:\n    '''\n    设置重复事件\n\n    Parameters\n    ----------\n    event_id : str\n        事件ID\n    recurrence_rule : str\n        重复规则，例如'每周一重复'\n\n    Returns\n    ----------\n    : bool\n        设置重复事件操作是否成功\n    '''\n    pass\n```\n\n\n```tool-10\ndef calendar_app.list_events(start_time: str, end_time: str, filter: str, sort_by: str) -> List[Dict[str, Union[str, List[str]]]]:\n    '''\n    获取所有事件的列表\n\n    Parameters\n    ----------\n    start_time : str\n        查询事件的开始时间（ISO格式）\n    end_time : str\n        查询事件的结束时间（ISO格式）\n    filter : str, optional\n        过滤条件，如地点、参与者等\n    sort_by : str, optional\n        排序条件，如时间、标题等\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, List[str]]]]\n        事件的列表，每个事件包含详细信息\n    '''\n    pass\n```",
        "query": "帮我对截图里的日程进行汇总添加到我的日程中，并在对应日期的早上7点设置一个闹钟来提醒我。",
        "ground_truth": [
            {
                "id": 1,
                "name": "calendar_app.create_event",
                "args": {
                    "title": "项目ddl",
                    "start_time": "2024-09-22T09:00:00",
                    "end_time": "2024-09-22T10:00:00"
                }
            },
            {
                "id": 3,
                "name": "calendar_app.set_event_reminder",
                "args": {
                    "event_id": "#E1",
                    "reminder_time": "2024-09-22T07:00:00",
                    "reminder_method": "popup"
                }
            }
        ],
        "plan_str": "SubTask1: 将截图里的日程信息添加到用户的日程中\n#E1 = calendar_app.create_event(title=\"项目ddl\", start_time=\"2024-09-22T09:00:00\", end_time=\"2024-09-22T10:00:00\")\n\nSubTask3: 在对应日期的早上7点设置一个闹钟来提醒用户\n#E3 = calendar_app.set_event_reminder(event_id=#E1, reminder_time=\"2024-09-22T07:00:00\", reminder_method=\"popup\")",
        "image": "mt-plan_10.png"
    },
    "query_11": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "wewave",
                    "models"
                ],
                "selected_apis_name": [
                    "wewave.get_short_videos",
                    "wewave.start_live_stream",
                    "wewave.join_super_topic",
                    "wewave.post_weibo",
                    "models.search_then_response",
                    "models.image_search",
                    "models.extract_information_from_text",
                    "models.safety_response",
                    "wewave.subscribe_membership",
                    "models.creative_writing"
                ]
            },
            "environment": {
                "datetime": "2021年11月23日 星期二",
                "location": "四川省甘孜藏族自治州"
            }
        },
        "api_descriptions": "```tool-1\ndef wewave.get_short_videos() -> List[Dict[str, Union[str, int, float]]]:\n    '''\n    获取微博短视频列表\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, int, float]]]\n        微博短视频列表，包括视频的标题、URL、时长等信息\n    '''\n    pass\n```\n\n\n```tool-2\ndef wewave.start_live_stream(title: str, description: str) -> str:\n    '''\n    开始新的微博直播\n\n    Parameters\n    ----------\n    title : str\n        直播标题\n    description : str, optional\n        直播描述\n\n    Returns\n    ----------\n    : str\n        直播的唯一标识符（ID）\n    '''\n    pass\n```\n\n\n```tool-3\ndef wewave.join_super_topic(topic_id: str) -> bool:\n    '''\n    加入超话社区\n\n    Parameters\n    ----------\n    topic_id : str\n        超话社区的唯一标识\n\n    Returns\n    ----------\n    : bool\n        加入超话社区是否成功的标志\n    '''\n    pass\n```\n\n\n```tool-4\ndef wewave.post_weibo(content: str, images: List[str], video: str) -> bool:\n    '''\n    发布新的微博\n\n    Parameters\n    ----------\n    content : str\n        微博内容\n    images : List[str], optional\n        微博图片列表\n    video : str, optional\n        微博视频链接\n\n    Returns\n    ----------\n    : bool\n        发布微博是否成功的状态\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.search_then_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个具备搜索引擎能力的问答模型，具备以下能力：\n1. 搜索实时信息并总结。如果用户问题涉及时效性信息，问答模型第一步通过搜索引擎检索信息，第二步对检索的多个信息进行汇总，生成回复；\n2. 问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的instruction和给定的参考references，生成正确、有用、安全的回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令/问题，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        返回的回复\n    '''\n    pass\n```\n\n\n```tool-6\ndef models.image_search(image_url: str) -> str:\n    '''\n    一个基于给定的图片搜索图中事物相关信息的模型，该模型的能力包括：\n1. 搜索著名人物的身份、经历，包括明星、政客、历史人物、体育明星等；\n2. 识别图像中动物/植物的品种；\n3. 识别照片中地点或景点的名称和地址。\n\n    Parameters\n    ----------\n    image_url : str\n        给定图片地址，将搜索该图片中的人、动植物或地点的相关信息\n\n    Returns\n    ----------\n    : str\n        图片中事物的相关信息\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.safety_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长回应与安全价值观相关的问题，用于直接回答黄赌毒、性别歧视、社会和谐、道德伦理、涉政、宗教、和恶意引导/诱导相关的用户请求。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题存在安全价值观风险，如黄赌毒、涉政、宗教、或恶意引导。\n    references : List[Union[List[str], str]]\n        应答安全价值观相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的安全且友好的回复结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef wewave.subscribe_membership(subscription_type: str) -> bool:\n    '''\n    订阅微博会员\n\n    Parameters\n    ----------\n    subscription_type : str\n        订阅类型（如月度、季度、半年、年度）\n\n    Returns\n    ----------\n    : bool\n        订阅操作是否成功\n    '''\n    pass\n```\n\n\n```tool-10\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```",
        "query": "总结一下这篇知识编辑论文的内容，并在微博上分享这篇工作。",
        "ground_truth": [
            {
                "id": 1,
                "name": "models.creative_writing",
                "args": {
                    "instruction": "总结这篇知识编辑论文的内容",
                    "image_url": "screen_image_url",
                    "references": []
                }
            },
            {
                "id": 2,
                "name": "wewave.post_weibo",
                "args": {
                    "content": "#E1",
                    "images": [],
                    "video": ""
                }
            }
        ],
        "plan_str": "SubTask1: 总结图片中论文内容\n#E1 = models.creative_writing(instruction=\"总结这篇知识编辑论文的内容\", image_url=\"screen_image_url\", references=[])\n\nSubTask2: 在微博上分享总结的论文内容\n#E2 = wewave.post_weibo(content=#E1, images=[], video=\"\")",
        "image": "mt-plan_11.png"
    },
    "query_12": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "models"
                ],
                "selected_apis_name": [
                    "models.image_search",
                    "models.search_then_response",
                    "models.multimodal_qa",
                    "models.directly_answer",
                    "models.code_qa",
                    "models.math_qa",
                    "models.general_response",
                    "models.safety_response",
                    "models.extract_information_from_text",
                    "models.creative_writing"
                ]
            },
            "environment": {
                "datetime": "2024年08月22日 星期四",
                "location": "广州"
            }
        },
        "api_descriptions": "```tool-1\ndef models.image_search(image_url: str) -> str:\n    '''\n    一个基于给定的图片搜索图中事物相关信息的模型，该模型的能力包括：\n1. 搜索著名人物的身份、经历，包括明星、政客、历史人物、体育明星等；\n2. 识别图像中动物/植物的品种；\n3. 识别照片中地点或景点的名称和地址。\n\n    Parameters\n    ----------\n    image_url : str\n        给定图片地址，将搜索该图片中的人、动植物或地点的相关信息\n\n    Returns\n    ----------\n    : str\n        图片中事物的相关信息\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.search_then_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个具备搜索引擎能力的问答模型，具备以下能力：\n1. 搜索实时信息并总结。如果用户问题涉及时效性信息，问答模型第一步通过搜索引擎检索信息，第二步对检索的多个信息进行汇总，生成回复；\n2. 问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的instruction和给定的参考references，生成正确、有用、安全的回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令/问题，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        返回的回复\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.directly_answer(answer: str) -> str:\n    '''\n    你可以通过这个工具直接回答问题。例如以下情况，你可以直接回答：\n1. 用户的问题属于简单闲聊类，如问候语、询问人设信息等；\n2. 用户问题的答案可以直接从屏幕图片中获取，如图片中的文字、颜色、数量等显式信息。\n\n    Parameters\n    ----------\n    answer : str\n        answer\n\n    Returns\n    ----------\n    : str\n        问题答案\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.code_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长代码生成、代码解释、代码调试、代码语言转换、代码优化、代码识别等代码程序相关任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与代码、程序相关。\n    references : List[Union[List[str], str]]\n        应答代码相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.safety_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长回应与安全价值观相关的问题，用于直接回答黄赌毒、性别歧视、社会和谐、道德伦理、涉政、宗教、和恶意引导/诱导相关的用户请求。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题存在安全价值观风险，如黄赌毒、涉政、宗教、或恶意引导。\n    references : List[Union[List[str], str]]\n        应答安全价值观相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的安全且友好的回复结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```",
        "query": "算一算这张清单，去北京旅游总共花了多少钱",
        "ground_truth": [
            {
                "id": 1,
                "name": "models.math_qa",
                "args": {
                    "instruction": "帮我计算图片中清单的费用总和",
                    "image_url": "screen_image_url",
                    "references": []
                }
            }
        ],
        "plan_str": "SubTask1: 计算费用总和\n#E1 = models.math_qa(instruction=\"帮我计算图片中清单的费用总和\", image_url=\"screen_image_url\", references=[]) ",
        "image": "mt-plan_12.png"
    },
    "query_13": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "photos",
                    "semantic_search",
                    "models"
                ],
                "selected_apis_name": [
                    "models.creative_writing",
                    "photos.view_photo_details",
                    "semantic_search.web_search",
                    "models.date_qa",
                    "models.scan_image_then_extract_information",
                    "photos.search_picture_no_purpose",
                    "photos.search_photo_local",
                    "photos.set_photo_cloud_sync",
                    "models.general_response",
                    "photos.enable_ai_repair_mode"
                ]
            },
            "environment": {
                "datetime": "2024年08月22日 星期四",
                "location": "广州"
            }
        },
        "api_descriptions": "```tool-1\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef photos.view_photo_details(photo_id: str) -> Dict[str, str]:\n    '''\n    查看单张照片的详细信息\n\n    Parameters\n    ----------\n    photo_id : str\n        照片ID\n\n    Returns\n    ----------\n    : Dict[str, str]\n        照片的详细信息，包括名称、日期、位置信息等\n    '''\n    pass\n```\n\n\n```tool-3\ndef semantic_search.web_search(query: str, count: int) -> List[str]:\n    '''\n    网页搜索，根据输入的query，在搜索引擎中查找相关页面，可用于查找人物、物品、体育赛事、事件相关的时效性信息，精确信息。\n\n    Parameters\n    ----------\n    query : str\n        用户搜索的关键词、短语、查询，该参数项不能为空。\n    count : int, optional\n        期望返回的搜索结果数量\n\n    Returns\n    ----------\n    : List[str]\n        搜索引擎返回的结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.date_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长解答节假日、节气、是否上班、调休信息相关问题；也支持时间推理计算，如日期天数之差、离国庆节还有多久等。\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题，与节假日、节气、调休信息、日期推算相关\n    references : List[Union[List[str], str]]\n        提供的参考信息，能帮助解答问题，如当前日期、星期数等信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.scan_image_then_extract_information(instruction: str, image_url: str) -> str:\n    '''\n    擅长从给定(手机屏幕)图片中抽取需要的信息，例如从手机/PC等设备屏幕上抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将从该图片中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef photos.search_picture_no_purpose(search_picture_keyword: str) -> List[str]:\n    '''\n    无目的搜索 <无目的搜索-相册搜索>属于<动效播放>类设置项，<无目的搜索>是<无目的搜索-相册搜索>设置项的一个具体操作指令，主要用于图片搜索可以让用户通过输入关键词等方式在系统图库或网络上快速查找特定的图片。无目的搜索是指用户在没有明确目标的情况下，同时在本地存储空间和网络资源中广泛地搜索图片。在系统功能中的定义是提供一种较为宽泛的图片查找方式，不局限于特定主题或类别，旨在帮助用户发现更多可能感兴趣的图片。它可以帮助用户在本地相册中随机找到一些以往可能忽略的图片，也能在网络上搜索到各种不同风格、主题的图片资源，为用户提供更多视觉上的选择和灵感来源。\n\n    Parameters\n    ----------\n    search_picture_keyword : str\n        无目的搜索-相册搜索类型，取值范围不定，可能为[需要搜索的图片的名称、类型或关键词,用户可以输入具体的图片名称、类型或模糊的图片描述。此参数不可为空。]，不可缺失\n\n    Returns\n    ----------\n    : List[str]\n        搜索结果图片的URL列表\n    '''\n    pass\n```\n\n\n```tool-7\ndef photos.search_photo_local(search_local_photo_keyword: str, location: str, time: str, search_media_type: str, search_album_type: str) -> List[str]:\n    '''\n    本地图片搜索 <图片搜索>属于<动效播放>类设置项，<本地图片搜索>是<图片搜索>设置项的一个具体操作指令，主要用于图片搜索可以让用户通过输入关键词等方式在系统图库或网络上快速查找特定的图片。在系统功能中的定义就是提供一种便捷的途径，帮助用户从大量的图片资源中精准定位到想要查找的图片，节省用户查找图片的时间和精力，提高用户在管理和浏览图片时的效率和体验。本地图片搜索是图片搜索下的一个类别，可以查找本地保存的特定主题的照片、特定时间拍摄的图片。它可以快速定位到用户手机内保存的各种图片，包括用户拍摄的照片、下载的图片、截图等。在系统功能中的定义就是通过特定的算法和索引，对本地存储的图片文件进行检索和筛选，以便用户能够精准、高效地找到他们想要的本地图片资源。\n\n\n    Parameters\n    ----------\n    search_local_photo_keyword : str, optional\n        图片搜索类型，取值范围不定，可能为[需要通过本地相册搜索的网络图片的名称或关键词,用户可以输入具体的图片名称、类型或模糊的图片描述,比如大草原、沙漠、湖泊、森林、汽车等,此参数可为空。]，可缺失\n    location : str, optional\n        图片搜索类型，取值范围不定，可能为[一个具体的地区名称,可以是一个国家,比如中国、美国、英国；也可以是省级行政区的名称,比如四川、北京、宁夏、香港；也可以是市级行政区的名称,比如成都、朝阳区；也可以是县级行政区的名称,比如金堂县、双流区；不能是一些泛化的区域描述,比如西南地区、华北地区、当前位置、这个位置。可以缺失]，可缺失\n    time : str, optional\n        图片搜索类型，取值范围不定，可能为[通用日期和时间的描述,可以是日期区间,比如最近,最近一周,未来五天,最近七天,周末；也可以是具体的某一天,比如今天、明天、星期六,下周一、7月13日,13号；也可以是某一天内的时间段,比如上午,今天下午,明天晚上；也可以是具体的时刻,比如现在,当前,目前,6点,明天10点。可以缺失]，可缺失\n    search_media_type : str, optional\n        图片搜索类型，取值范围不定，可能为[用户想要搜索的多媒体类型,包含：图片、视频、（动图、gif）,连拍,全景,延时摄影,慢动作,人像景深,实况图,为空则默认为搜图片]，可缺失\n    search_album_type : str, optional\n        图片搜索类型，取值范围不定，可能为[用户想要搜索的图集类型,该图集包含相册自带的和一些自动生成的,具体包含：收藏、截图、人物、微信、美图秀秀、美颜相机、轻颜相机等,可为空]，可缺失\n\n    Returns\n    ----------\n    : List[str]\n        本地图片搜索结果的文件路径列表\n    '''\n    pass\n```\n\n\n```tool-8\ndef photos.set_photo_cloud_sync() -> int:\n    '''\n    设置相册云同步 <相册自动同步>属于<动效播放>类设置项，<设置相册云同步>是<相册自动同步>设置项的一个具体操作指令，主要用于设置相册云同步将决定您的手机如何将照片和视频上传到云端。您可以自定义同步的设定，例如仅在连接到Wi-Fi时同步，或选择同步特定的相册。这将帮助您在云中备份照片和视频，同时控制数据使用和存储空间。\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : int\n        相册自动同步数值，取值范围为[0,999]，最小为[0],最大为[999]，不可缺失\n    '''\n    pass\n```\n\n\n```tool-9\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef photos.enable_ai_repair_mode() -> int:\n    '''\n    打开AI修复 <打开AI修复>属于<动效播放>类设置项，<打开AI修复>是<打开AI修复>设置项的一个具体操作指令，主要用于打开 AI 修复能够利用人工智能技术对图片或视频等内容进行智能修复处理。在系统功能中的定义是通过先进的算法和模型，对图像或视频的画质、色彩、细节等方面进行优化和改善，比如可以修复模糊的图像、增强图像的清晰度和对比度、填补缺失的部分等，从而提升用户所拥有的媒体资源的质量和可用性，为用户带来更好的视觉体验和使用感受。\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : int\n        打开AI修复数值，取值范围为[0,999]，最小为[0],最大为[999]，不可缺失\n    '''\n    pass\n```",
        "query": "我想要写一篇类似于截图里这种样子的小红书分享日本北海道有什么好玩的。你能帮我到网上搜索一下日本北海道相关的资料，以及用我相册里上个月在北海道拍的照片，写一篇小红书帖子。",
        "ground_truth": [
            {
                "id": 1,
                "name": "models.scan_image_then_extract_information",
                "args": {
                    "instruction": "提取小红书分享帖子的样式和内容",
                    "image_url": "screen_image_url"
                }
            },
            {
                "id": 2,
                "name": "semantic_search.web_search",
                "args": {
                    "query": "日本北海道旅游攻略"
                }
            },
            {
                "id": 3,
                "name": "photos.search_photo_local",
                "args": {
                    "search_local_photo_keyword": "北海道",
                    "location": "日本",
                    "time": "2024-07",
                    "search_media_type": "图片",
                    "search_album_type": ""
                }
            },
            {
                "id": 4,
                "name": "models.creative_writing",
                "args": {
                    "instruction": "写一篇小红书分享日本北海道有什么好玩的",
                    "references": [
                        "#E1",
                        "#E2",
                        "#E3"
                    ]
                }
            }
        ],
        "plan_str": "SubTask1: 从屏幕截图中提取小红书分享帖子的样式和内容\n#E1 = models.scan_image_then_extract_information(instruction=\"提取小红书分享帖子的样式和内容\", image_url=\"screen_image_url\")\n\nSubTask2: 搜索日本北海道的旅游相关资料\n#E2 = semantic_search.web_search(query=\"日本北海道旅游攻略\")\n\nSubTask3: 搜索用户相册中上次在北海道拍的照片\n#E3 = photos.search_photo_local(search_local_photo_keyword=\"北海道\", location=\"日本\", time=\"2024-07\", search_media_type=\"图片\", search_album_type=\"\")\n\nSubTask4: 根据提取的样式和内容、搜索到的资料以及用户相册中的照片，生成一篇小红书分享帖子\n#E4 = models.creative_writing(instruction=\"写一篇小红书分享日本北海道有什么好玩的\", references=[#E1, #E2, #E3])",
        "image": "mt-plan_13.png"
    },
    "query_14": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "models",
                    "toutiao"
                ],
                "selected_apis_name": [
                    "models.directly_answer",
                    "models.general_response",
                    "toutiao.search_news",
                    "toutiao.add_to_favorites",
                    "toutiao.get_user_favorites",
                    "toutiao.get_comments",
                    "toutiao.update_user_profile",
                    "toutiao.subscribe_notifications",
                    "models.image_search",
                    "models.personal_qa"
                ]
            },
            "environment": {
                "datetime": "2024年08月23日 星期五",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef models.directly_answer(answer: str) -> str:\n    '''\n    你可以通过这个工具直接回答问题。例如以下情况，你可以直接回答：\n1. 用户的问题属于简单闲聊类，如问候语、询问人设信息等；\n2. 用户问题的答案可以直接从屏幕图片中获取，如图片中的文字、颜色、数量等显式信息。\n\n    Parameters\n    ----------\n    answer : str\n        answer\n\n    Returns\n    ----------\n    : str\n        问题答案\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef toutiao.search_news(query: str, page: int, count: int) -> List[Dict]:\n    '''\n    搜索新闻\n\n    Parameters\n    ----------\n    query : str\n        搜索关键词\n    page : int, optional\n        页码\n    count : int, optional\n        每页显示的新闻条数\n\n    Returns\n    ----------\n    : List[Dict]\n        搜索结果，符合条件的新闻列表\n    '''\n    pass\n```\n\n\n```tool-4\ndef toutiao.add_to_favorites(content_id: str) -> bool:\n    '''\n    收藏资讯\n\n    Parameters\n    ----------\n    content_id : str\n        资讯内容ID\n\n    Returns\n    ----------\n    : bool\n        收藏操作是否成功\n    '''\n    pass\n```\n\n\n```tool-5\ndef toutiao.get_user_favorites(page: int, count: int) -> List[Dict]:\n    '''\n    获取用户收藏的资讯\n\n    Parameters\n    ----------\n    page : int, optional\n        页码\n    count : int, optional\n        每页显示的资讯条数\n\n    Returns\n    ----------\n    : List[Dict]\n        用户收藏的资讯列表\n    '''\n    pass\n```\n\n\n```tool-6\ndef toutiao.get_comments(content_id: str, page: int, count: int) -> List[Dict]:\n    '''\n    获取文章或视频的评论列表\n\n    Parameters\n    ----------\n    content_id : str\n        文章或视频ID\n    page : int, optional\n        页码\n    count : int, optional\n        每页显示的评论条数\n\n    Returns\n    ----------\n    : List[Dict]\n        评论列表，每条评论包括用户、内容、时间等信息\n    '''\n    pass\n```\n\n\n```tool-7\ndef toutiao.update_user_profile(profile_info: Dict) -> bool:\n    '''\n    更新用户个人资料\n\n    Parameters\n    ----------\n    profile_info : Dict\n        需要更新的个人资料信息\n\n    Returns\n    ----------\n    : bool\n        更新操作是否成功\n    '''\n    pass\n```\n\n\n```tool-8\ndef toutiao.subscribe_notifications(notification_types: List[str]) -> bool:\n    '''\n    接收消息推送\n\n    Parameters\n    ----------\n    notification_types : List[str], optional\n        希望接收的消息类型，如新闻推送、评论回复等\n\n    Returns\n    ----------\n    : bool\n        订阅操作是否成功\n    '''\n    pass\n```\n\n\n```tool-9\ndef models.image_search(image_url: str) -> str:\n    '''\n    一个基于给定的图片搜索图中事物相关信息的模型，该模型的能力包括：\n1. 搜索著名人物的身份、经历，包括明星、政客、历史人物、体育明星等；\n2. 识别图像中动物/植物的品种；\n3. 识别照片中地点或景点的名称和地址。\n\n    Parameters\n    ----------\n    image_url : str\n        给定图片地址，将搜索该图片中的人、动植物或地点的相关信息\n\n    Returns\n    ----------\n    : str\n        图片中事物的相关信息\n    '''\n    pass\n```\n\n\n```tool-10\ndef models.personal_qa(instruction: str, user_features: str, references: Dict[str, str]) -> str:\n    '''\n    擅长回复可以结合用户个性化信息回答的问题\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题\n    user_features : str\n        提供的用户个性化信息\n    references : Dict[str, str], optional\n        参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```",
        "query": "这是真的吗？今日头条上搜索下相关新闻，总结下网友对此事的反应",
        "ground_truth": [
            {
                "id": 1,
                "name": "toutiao.search_news",
                "args": {
                    "query": "上涨33%，国庆假期合肥新房成交量暴涨~",
                    "page": "1",
                    "count": "10"
                }
            },
            {
                "id": 2,
                "name": "toutiao.get_comments",
                "args": {
                    "content_id": "#E1[0]['id']",
                    "page": "1",
                    "count": "10"
                }
            },
            {
                "id": 3,
                "name": "models.general_response",
                "args": {
                    "instruction": "总结网友对此事的反应",
                    "references": [
                        "#E2"
                    ]
                }
            }
        ],
        "plan_str": "SubTask1: 在今日头条上搜索相关新闻\n#E1 = toutiao.search_news(query=\"上涨33%，国庆假期合肥新房成交量暴涨~\", page=1, count=10)\nSubTask2: 获取相关新闻的评论\n#E2 = toutiao.get_comments(content_id=#E1[0]['id'], page=1, count=10)\nSubTask3: 总结网友对此事的反应\n#E3 = models.general_response(instruction=\"总结网友对此事的反应\", references=[#E2])",
        "image": "mt-plan_14.jpg"
    },
    "query_15": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "models",
                    "ke"
                ],
                "selected_apis_name": [
                    "models.safety_response",
                    "ke.get_favorited_properties",
                    "ke.search_properties_on_map",
                    "models.image_search",
                    "ke.contact_customer_service",
                    "ke.add_to_favorites",
                    "models.math_qa",
                    "ke.book_viewing",
                    "models.general_response",
                    "ke.search_properties"
                ]
            },
            "environment": {
                "datetime": "2024年08月21日 星期三",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef models.safety_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长回应与安全价值观相关的问题，用于直接回答黄赌毒、性别歧视、社会和谐、道德伦理、涉政、宗教、和恶意引导/诱导相关的用户请求。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题存在安全价值观风险，如黄赌毒、涉政、宗教、或恶意引导。\n    references : List[Union[List[str], str]]\n        应答安全价值观相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的安全且友好的回复结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef ke.get_favorited_properties() -> List[Dict]:\n    '''\n    查看收藏房源\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict]\n        用户收藏的房源列表\n    '''\n    pass\n```\n\n\n```tool-3\ndef ke.search_properties_on_map(location: str, radius: int, property_type: str) -> List[Dict]:\n    '''\n    地图找房\n\n    Parameters\n    ----------\n    location : str\n        中心地点，如城市名\n    radius : int\n        搜索半径，以米为单位\n    property_type : str, optional\n        房源类型，如公寓、别墅等\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的房源列表，包括房源名称、地点、价格等信息，并附带地图坐标\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.image_search(image_url: str) -> str:\n    '''\n    一个基于给定的图片搜索图中事物相关信息的模型，该模型的能力包括：\n1. 搜索著名人物的身份、经历，包括明星、政客、历史人物、体育明星等；\n2. 识别图像中动物/植物的品种；\n3. 识别照片中地点或景点的名称和地址。\n\n    Parameters\n    ----------\n    image_url : str\n        给定图片地址，将搜索该图片中的人、动植物或地点的相关信息\n\n    Returns\n    ----------\n    : str\n        图片中事物的相关信息\n    '''\n    pass\n```\n\n\n```tool-5\ndef ke.contact_customer_service(query: str) -> bool:\n    '''\n    联系客服\n\n    Parameters\n    ----------\n    query : str\n        咨询问题或需要客服帮助的内容\n\n    Returns\n    ----------\n    : bool\n        联系操作是否成功\n    '''\n    pass\n```\n\n\n```tool-6\ndef ke.add_to_favorites(property_id: str) -> bool:\n    '''\n    收藏房源\n\n    Parameters\n    ----------\n    property_id : str\n        房源ID\n\n    Returns\n    ----------\n    : bool\n        收藏操作是否成功\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef ke.book_viewing(property_id: str, viewing_time: str) -> bool:\n    '''\n    在线预约看房\n\n    Parameters\n    ----------\n    property_id : str\n        房源ID\n    viewing_time : str\n        预约看房时间，格式为YYYY-MM-DD HH:MM:SS\n\n    Returns\n    ----------\n    : bool\n        预约操作是否成功\n    '''\n    pass\n```\n\n\n```tool-9\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef ke.search_properties(keywords: str, location: str, price_range: str, property_type: str) -> List[Dict]:\n    '''\n    搜索房源\n\n    Parameters\n    ----------\n    keywords : str\n        搜索关键词\n    location : str, optional\n        房源地点\n    price_range : str, optional\n        价格范围\n    property_type : str, optional\n        房源类型，如公寓、别墅等\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的房源列表，包括房源名称、地点、价格等信息\n    '''\n    pass\n```",
        "query": "根据图片中展示的住房要求信息，在贝壳找房上收藏满足条件的房子，并帮我在线预约下午3点看房",
        "ground_truth": [
            {
                "id": 1,
                "name": "ke.search_properties",
                "args": {
                    "keywords": "深圳短租1-2月，30分钟左右到达塘朗地铁站，女生，",
                    "location": "元芬地铁站，民治地铁站",
                    "price_range": "1000左右",
                    "property_type": "合租或者单间，女生"
                }
            },
            {
                "id": 2,
                "name": "models.general_response",
                "args": {
                    "instruction": "请从房源列表中筛选出用户最可能感兴趣的房源",
                    "references": [
                        "#E1"
                    ]
                }
            },
            {
                "id": 3,
                "name": "ke.add_to_favorites",
                "args": {
                    "user_id": "unknown",
                    "property_id": "#E2"
                }
            },
            {
                "id": 4,
                "name": "ke.book_viewing",
                "args": {
                    "property_id": "#E2",
                    "viewing_time": "2024-08-21T15:00:00"
                }
            }
        ],
        "plan_str": "SubTask1: 根据用户的住房要求搜索房源\n#E1 = ke.search_properties(keywords=\"深圳短租1-2月，30分钟左右到达塘朗地铁站，女生，\", location=\"元芬地铁站，民治地铁站\", price_range=\"1000左右\", property_type=\"合租或者单间，女生\")\nSubTask2: 从搜索结果中筛选用户可能感兴趣的房源\n#E2 = models.general_response(instruction=\"请从房源列表中筛选出用户最可能感兴趣的房源\", references=[#E1]) \nSubTask3: 将筛选出的房源收藏\n#E3 = ke.add_to_favorites(user_id=\"unknown\", property_id=\"#E2\")\nSubTask4: 在线预约看房\n#E4 = ke.book_viewing(property_id=\"#E2\", viewing_time=\"2024-08-21T15:00:00\") ",
        "image": "mt-plan_15.jpg"
    },
    "query_16": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "cpic"
                ],
                "selected_apis_name": [
                    "cpic.get_user_profile",
                    "cpic.get_product_detail",
                    "cpic.purchase_product",
                    "cpic.apply_for_claim",
                    "cpic.update_user_profile",
                    "cpic.search_insurance_products",
                    "cpic.contact_customer_service",
                    "cpic.get_insurance_news",
                    "cpic.view_policies",
                    "cpic.check_claim_status"
                ]
            },
            "environment": {
                "datetime": "2024年08月21日 星期三",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef cpic.get_user_profile() -> Dict:\n    '''\n    查看用户个人信息\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : Dict\n        个人信息，包括姓名、联系方式、身份证号等\n    '''\n    pass\n```\n\n\n```tool-2\ndef cpic.get_product_detail(product_id: str) -> Dict:\n    '''\n    获取保险产品详情\n\n    Parameters\n    ----------\n    product_id : str\n        保险产品ID\n\n    Returns\n    ----------\n    : Dict\n        保险产品的详细信息，包括产品介绍、保障范围、价格等\n    '''\n    pass\n```\n\n\n```tool-3\ndef cpic.purchase_product(product_id: str, personal_info: Dict) -> bool:\n    '''\n    购买保险产品\n\n    Parameters\n    ----------\n    product_id : str\n        保险产品ID\n    personal_info : Dict\n        个人信息，包括姓名、身份证号、联系方式等\n\n    Returns\n    ----------\n    : bool\n        购买操作是否成功\n    '''\n    pass\n```\n\n\n```tool-4\ndef cpic.apply_for_claim(policy_id: str, claim_reason: str, claim_amount: float, evidence: List[Dict]) -> bool:\n    '''\n    申请理赔\n\n    Parameters\n    ----------\n    policy_id : str\n        保单ID\n    claim_reason : str\n        理赔原因\n    claim_amount : float\n        申请理赔金额\n    evidence : List[Dict]\n        理赔所需的证据，如照片、文件等\n\n    Returns\n    ----------\n    : bool\n        理赔申请是否成功\n    '''\n    pass\n```\n\n\n```tool-5\ndef cpic.update_user_profile(profile_info: Dict) -> bool:\n    '''\n    更新用户个人信息\n\n    Parameters\n    ----------\n    profile_info : Dict\n        需要更新的个人信息\n\n    Returns\n    ----------\n    : bool\n        更新操作是否成功\n    '''\n    pass\n```\n\n\n```tool-6\ndef cpic.search_insurance_products(keywords: str, category: str) -> List[Dict]:\n    '''\n    查询保险产品\n\n    Parameters\n    ----------\n    keywords : str, optional\n        搜索关键词\n    category : str, optional\n        保险类别，如车险、寿险等\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的保险产品列表，包括产品名称、简介、价格等信息\n    '''\n    pass\n```\n\n\n```tool-7\ndef cpic.contact_customer_service(query: str) -> bool:\n    '''\n    在线客服咨询\n\n    Parameters\n    ----------\n    query : str\n        咨询的问题或内容\n\n    Returns\n    ----------\n    : bool\n        咨询提交是否成功\n    '''\n    pass\n```\n\n\n```tool-8\ndef cpic.get_insurance_news(category: str) -> List[Dict]:\n    '''\n    获取保险相关资讯\n\n    Parameters\n    ----------\n    category : str, optional\n        资讯类别，如政策、产品介绍等\n\n    Returns\n    ----------\n    : List[Dict]\n        保险相关的新闻资讯列表\n    '''\n    pass\n```\n\n\n```tool-9\ndef cpic.view_policies() -> List[Dict]:\n    '''\n    查看保单\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict]\n        用户保单列表，包括保单号、保险种类、保费等信息\n    '''\n    pass\n```\n\n\n```tool-10\ndef cpic.check_claim_status(claim_id: str) -> Dict:\n    '''\n    查询理赔进度\n\n    Parameters\n    ----------\n    claim_id : str\n        理赔ID\n\n    Returns\n    ----------\n    : Dict\n        理赔申请的详细进度信息\n    '''\n    pass\n```",
        "query": "问一下太平洋保险的客服，这种情况可以申请理赔吗？",
        "ground_truth": [
            {
                "id": 1,
                "name": "cpic.contact_customer_service",
                "args": {
                    "query": "这种情况可以申请理赔吗？\n\n车右后方白漆被刮花"
                }
            }
        ],
        "plan_str": "SubTask1: 联系太平洋保险的客服，咨询图片中的情况是否可以申请理赔\n#E1 = cpic.contact_customer_service(query=\"这种情况可以申请理赔吗？\\n\\n车右后方白漆被刮花\")",
        "image": "mt-plan_16.png"
    },
    "query_17": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "notes",
                    "goofish",
                    "models"
                ],
                "selected_apis_name": [
                    "models.image_search",
                    "goofish.get_favorite_items",
                    "models.multimodal_qa",
                    "models.math_qa",
                    "goofish.search_items",
                    "models.general_response",
                    "models.safety_response",
                    "models.code_qa",
                    "notes.create_note",
                    "goofish.share_item"
                ]
            },
            "environment": {
                "datetime": "2022年11月29日 星期二",
                "location": "辽宁省丹东市"
            }
        },
        "api_descriptions": "```tool-1\ndef models.image_search(image_url: str) -> str:\n    '''\n    一个基于给定的图片搜索图中事物相关信息的模型，该模型的能力包括：\n1. 搜索著名人物的身份、经历，包括明星、政客、历史人物、体育明星等；\n2. 识别图像中动物/植物的品种；\n3. 识别照片中地点或景点的名称和地址。\n\n    Parameters\n    ----------\n    image_url : str\n        给定图片地址，将搜索该图片中的人、动植物或地点的相关信息\n\n    Returns\n    ----------\n    : str\n        图片中事物的相关信息\n    '''\n    pass\n```\n\n\n```tool-2\ndef goofish.get_favorite_items() -> List[Dict]:\n    '''\n    查看收藏的商品\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict]\n        用户收藏的商品列表\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef goofish.search_items(keywords: str, category: str, price_range: str, sort_by: str) -> List[Dict]:\n    '''\n    搜索二手商品\n\n    Parameters\n    ----------\n    keywords : str\n        搜索关键词\n    category : str, optional\n        商品分类\n    price_range : str, optional\n        价格范围\n    sort_by : str, optional\n        排序方式，如价格、发布时间等\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的商品列表，包括商品名称、价格、图片等信息\n    '''\n    pass\n```\n\n\n```tool-6\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.safety_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长回应与安全价值观相关的问题，用于直接回答黄赌毒、性别歧视、社会和谐、道德伦理、涉政、宗教、和恶意引导/诱导相关的用户请求。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题存在安全价值观风险，如黄赌毒、涉政、宗教、或恶意引导。\n    references : List[Union[List[str], str]]\n        应答安全价值观相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的安全且友好的回复结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.code_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长代码生成、代码解释、代码调试、代码语言转换、代码优化、代码识别等代码程序相关任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与代码、程序相关。\n    references : List[Union[List[str], str]]\n        应答代码相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef notes.create_note(title: str, content: str, tags: List[str]) -> str:\n    '''\n    添加一条新的备忘录\n\n    Parameters\n    ----------\n    title : str, optional\n        备忘录标题\n    content : str\n        备忘录内容\n    tags : List[str], optional\n        备忘录标签\n\n    Returns\n    ----------\n    : str\n        创建成功的备忘录ID\n    '''\n    pass\n```\n\n\n```tool-10\ndef goofish.share_item(item_id: str, platform: str) -> bool:\n    '''\n    分享商品链接\n\n    Parameters\n    ----------\n    item_id : str\n        商品ID\n    platform : str\n        分享的平台，如微信、微博等\n\n    Returns\n    ----------\n    : bool\n        分享操作是否成功\n    '''\n    pass\n```",
        "query": "我想买图片里这个同款的网球拍。能帮我在闲鱼里面搜索一下有没有这款网球拍？要9成新以上，1000块以下。筛选出合适的商品链接添加到我的便签里。",
        "ground_truth": [
            {
                "id": 1,
                "name": "models.image_search",
                "args": {
                    "instruction": "识别图片里的网球拍品牌和具体型号",
                    "image_url": "screen_image_url"
                }
            },
            {
                "id": 2,
                "name": "goofish.search_items",
                "args": {
                    "keywords": "#E1",
                    "category": "网球拍",
                    "price_range": "0-1000",
                    "sort_by": "发布时间"
                }
            },
            {
                "id": 3,
                "name": "models.general_response",
                "args": {
                    "instruction": "从闲鱼商品列表中筛选出9成新以上的商品链接",
                    "references": [
                        "#E2"
                    ]
                }
            },
            {
                "id": 4,
                "name": "notes.create_note",
                "args": {
                    "title": "闲鱼筛选的网球拍",
                    "content": "#E3",
                    "tags": []
                }
            }
        ],
        "plan_str": "SubTask1: 识别图片里的网球拍\n#E1 = models.image_search(instruction=\"识别图片里的网球拍品牌和具体型号\", image_url=\"screen_image_url\")\nSubTask2: 在闲鱼搜索网球拍\n#E2 = goofish.search_items(keywords=\"#E1\", category=\"网球拍\", price_range=\"0-1000\", sort_by=\"发布时间\")\nSubTask3: 筛选9成新以上的商品\n#E3 = models.general_response(instruction=\"从闲鱼商品列表中筛选出9成新以上的商品链接\", references=[#E2])\nSubTask4: 将筛选出的商品链接添加到便签\n#E4 = notes.create_note(title=\"闲鱼筛选的网球拍\", content=\"#E3\", tags=[]) \n",
        "image": "mt-plan_17.png"
    },
    "query_18": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "music"
                ],
                "selected_apis_name": [
                    "music.get_lyrics_and_album_info",
                    "music.play_music",
                    "music.stop_music",
                    "music.add_song_to_playlist",
                    "music.download_music",
                    "music.create_playlist",
                    "music.search_music",
                    "music.pause_music",
                    "music.share_music",
                    "music.listen_to_recommendations"
                ]
            },
            "environment": {
                "datetime": "2024年08月21日 星期三",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef music.get_lyrics_and_album_info(song_id: str) -> Dict[str, str]:\n    '''\n    查看音乐歌词和专辑信息\n\n    Parameters\n    ----------\n    song_id : str\n        歌曲ID\n\n    Returns\n    ----------\n    : Dict[str, str]\n        歌词和专辑信息\n    '''\n    pass\n```\n\n\n```tool-2\ndef music.play_music(song_id: str) -> bool:\n    '''\n    播放音乐\n\n    Parameters\n    ----------\n    song_id : str\n        要播放的歌曲ID\n\n    Returns\n    ----------\n    : bool\n        播放操作是否成功\n    '''\n    pass\n```\n\n\n```tool-3\ndef music.stop_music() -> bool:\n    '''\n    停止音乐\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : bool\n        停止操作是否成功\n    '''\n    pass\n```\n\n\n```tool-4\ndef music.add_song_to_playlist(playlist_id: str, song_id: str) -> bool:\n    '''\n    添加歌曲到播放列表\n\n    Parameters\n    ----------\n    playlist_id : str\n        播放列表ID\n    song_id : str\n        要添加的歌曲ID\n\n    Returns\n    ----------\n    : bool\n        添加操作是否成功\n    '''\n    pass\n```\n\n\n```tool-5\ndef music.download_music(song_id: str) -> str:\n    '''\n    下载音乐到本地\n\n    Parameters\n    ----------\n    song_id : str\n        要下载的歌曲ID\n\n    Returns\n    ----------\n    : str\n        下载文件的本地路径\n    '''\n    pass\n```\n\n\n```tool-6\ndef music.create_playlist(name: str, description: str) -> str:\n    '''\n    创建播放列表\n\n    Parameters\n    ----------\n    name : str\n        播放列表名称\n    description : str, optional\n        播放列表描述\n\n    Returns\n    ----------\n    : str\n        创建成功的播放列表ID\n    '''\n    pass\n```\n\n\n```tool-7\ndef music.search_music(query: str) -> List[Dict[str, Union[str, int]]]:\n    '''\n    搜索音乐\n\n    Parameters\n    ----------\n    query : str\n        搜索关键词\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, int]]]\n        搜索结果，符合条件的音乐列表\n    '''\n    pass\n```\n\n\n```tool-8\ndef music.pause_music() -> bool:\n    '''\n    暂停音乐\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : bool\n        暂停操作是否成功\n    '''\n    pass\n```\n\n\n```tool-9\ndef music.share_music(song_id: str, platform: str) -> bool:\n    '''\n    分享音乐到社交平台\n\n    Parameters\n    ----------\n    song_id : str\n        要分享的歌曲ID\n    platform : str\n        分享的平台，如微博、微信等\n\n    Returns\n    ----------\n    : bool\n        分享操作是否成功\n    '''\n    pass\n```\n\n\n```tool-10\ndef music.listen_to_recommendations(genre: str) -> List[str]:\n    '''\n    收听音乐推荐和电台\n\n    Parameters\n    ----------\n    genre : str, optional\n        音乐类型\n\n    Returns\n    ----------\n    : List[str]\n        推荐音乐或电台的列表\n    '''\n    pass\n```",
        "query": "她最近有什么新歌？播放一下。",
        "ground_truth": [
            {
                "id": 1,
                "name": "music.search_music",
                "args": {
                    "query": "孙燕姿 新歌"
                }
            },
            {
                "id": 2,
                "name": "music.play_music",
                "args": {
                    "song_name": "#E1[0]"
                }
            }
        ],
        "plan_str": "SubTask1: 搜索“孙燕姿 最近新歌”\n#E1 = music.search_music(query=\"孙燕姿 新歌\")\nSubTask2: 播放第一首搜索结果对应的歌曲\n#E2 = music.play_music(song_name=#E1[0])",
        "image": "mt-plan_18.png"
    },
    "query_19": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "models",
                    "notes",
                    "weather"
                ],
                "selected_apis_name": [
                    "notes.create_note",
                    "models.personal_qa",
                    "models.math_qa",
                    "weather.get_life_index",
                    "notes.search_notes",
                    "weather.get_multiple_location_weather",
                    "weather.get_weather_forecast",
                    "weather.get_date_weather_info",
                    "models.scan_image_then_extract_information",
                    "models.general_response"
                ]
            },
            "environment": {
                "datetime": "2018年03月31日 星期六",
                "location": "青海省海西蒙古族藏族自治州"
            }
        },
        "api_descriptions": "```tool-1\ndef notes.create_note(title: str, content: str, tags: List[str]) -> str:\n    '''\n    添加一条新的备忘录\n\n    Parameters\n    ----------\n    title : str, optional\n        备忘录标题\n    content : str\n        备忘录内容\n    tags : List[str], optional\n        备忘录标签\n\n    Returns\n    ----------\n    : str\n        创建成功的备忘录ID\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.personal_qa(instruction: str, user_features: str, references: Dict[str, str]) -> str:\n    '''\n    擅长回复可以结合用户个性化信息回答的问题\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题\n    user_features : str\n        提供的用户个性化信息\n    references : Dict[str, str], optional\n        参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef weather.get_life_index(location: str) -> Dict[str, str]:\n    '''\n    提供生活指数建议\n\n    Parameters\n    ----------\n    location : str\n        查询生活指数的地点\n\n    Returns\n    ----------\n    : Dict[str, str]\n        生活建议，如穿衣建议、运动建议等\n    '''\n    pass\n```\n\n\n```tool-5\ndef notes.search_notes(query: str) -> List[str]:\n    '''\n    根据关键词搜索备忘录\n\n    Parameters\n    ----------\n    query : str\n        搜索关键词\n\n    Returns\n    ----------\n    : List[str]\n        搜索结果，符合条件的备忘录ID列表\n    '''\n    pass\n```\n\n\n```tool-6\ndef weather.get_multiple_location_weather(locations: List[str]) -> Dict[str, Dict[str, Union[str, int, float]]]:\n    '''\n    支持多区域天气查询\n\n    Parameters\n    ----------\n    locations : List[str]\n        查询天气的多个地点\n\n    Returns\n    ----------\n    : Dict[str, Dict[str, Union[str, int, float]]]\n        每个地点的当前天气信息\n    '''\n    pass\n```\n\n\n```tool-7\ndef weather.get_weather_forecast(location: str, days: int) -> List[Dict[str, Union[str, int, float]]]:\n    '''\n    获取未来几天的天气预报\n\n    Parameters\n    ----------\n    location : str\n        查询天气预报的地点\n    days : int\n        查询的天数，如3天、7天等\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, int, float]]]\n        未来几天的天气预报信息列表\n    '''\n    pass\n```\n\n\n```tool-8\ndef weather.get_date_weather_info(location: str, start_date: str, end_date: str) -> List[Dict[str, Union[str, int, float]]]:\n    '''\n    查询指定日期区间的天气预报\n\n    Parameters\n    ----------\n    location : str\n        查询天气预报的地点\n    start_date : str\n        查询的的开始日期，格式xxxx-xx-xx\n    end_date : str\n        查询的的结束日期，格式xxxx-xx-xx\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, int, float]]]\n        指定日期和地点的天气信息，包括温度、湿度、风速等\n    '''\n    pass\n```\n\n\n```tool-9\ndef models.scan_image_then_extract_information(instruction: str, image_url: str) -> str:\n    '''\n    擅长从给定(手机屏幕)图片中抽取需要的信息，例如从手机/PC等设备屏幕上抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将从该图片中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```",
        "query": "把看看图片里面出现的这几个日本城市最近几天是什么天气？然后把结果做一下总结，存到我的便签里。",
        "ground_truth": [
            {
                "id": 1,
                "name": "models.scan_image_then_extract_information",
                "args": {
                    "instruction": "提取图片中的日本城市名称",
                    "image_url": "screen_image_url"
                }
            },
            {
                "id": 2,
                "name": "weather.get_multiple_location_weather",
                "args": {
                    "locations": "#E1"
                }
            },
            {
                "id": 3,
                "name": "models.general_response",
                "args": {
                    "instruction": "总结这些日本城市的最近几天天气情况",
                    "references": [
                        "#E2"
                    ]
                }
            },
            {
                "id": 4,
                "name": "notes.create_note",
                "args": {
                    "title": "日本城市天气总结",
                    "content": "#E3",
                    "tags": [
                        "天气",
                        "日本"
                    ]
                }
            }
        ],
        "plan_str": "SubTask1: 从图片中提取日本城市名称\n#E1 = models.scan_image_then_extract_information(instruction=\"提取图片中的日本城市名称\", image_url=\"screen_image_url\")\n\nSubTask2: 查询这些城市的最近几天天气\n#E2 = weather.get_multiple_location_weather(locations=#E1)\n\nSubTask3: 总结这些城市的天气情况\n#E3 = models.general_response(instruction=\"总结这些日本城市的最近几天天气情况\", references=[#E2])\n\nSubTask4: 将总结结果存到便签\n#E4 = notes.create_note(title=\"日本城市天气总结\", content=#E3, tags=[\"天气\", \"日本\"])",
        "image": "mt-plan_19.png"
    },
    "query_20": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "jingdong",
                    "models"
                ],
                "selected_apis_name": [
                    "jingdong.get_user_profile",
                    "models.safety_response",
                    "models.general_response",
                    "jingdong.get_order_detail",
                    "jingdong.update_user_profile",
                    "models.multimodal_qa",
                    "models.directly_answer",
                    "models.code_qa",
                    "jingdong.search_product",
                    "jingdong.get_shipping_info"
                ]
            },
            "environment": {
                "datetime": "2024年01月19日 星期五",
                "location": "湖南省衡阳市"
            }
        },
        "api_descriptions": "```tool-1\ndef jingdong.get_user_profile() -> Dict:\n    '''\n    查看个人资料\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : Dict\n        个人资料信息，包括姓名、手机号、地址等\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.safety_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长回应与安全价值观相关的问题，用于直接回答黄赌毒、性别歧视、社会和谐、道德伦理、涉政、宗教、和恶意引导/诱导相关的用户请求。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题存在安全价值观风险，如黄赌毒、涉政、宗教、或恶意引导。\n    references : List[Union[List[str], str]]\n        应答安全价值观相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的安全且友好的回复结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef jingdong.get_order_detail(order_id: str) -> Dict:\n    '''\n    查看订单详情\n\n    Parameters\n    ----------\n    order_id : str\n        订单ID\n\n    Returns\n    ----------\n    : Dict\n        返回订单的详细信息，包括商品、金额、物流状态等\n    '''\n    pass\n```\n\n\n```tool-5\ndef jingdong.update_user_profile(profile_info: Dict) -> bool:\n    '''\n    更新个人资料\n\n    Parameters\n    ----------\n    profile_info : Dict\n        需要更新的个人资料信息\n\n    Returns\n    ----------\n    : bool\n        更新操作是否成功\n    '''\n    pass\n```\n\n\n```tool-6\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.directly_answer(answer: str) -> str:\n    '''\n    你可以通过这个工具直接回答问题。例如以下情况，你可以直接回答：\n1. 用户的问题属于简单闲聊类，如问候语、询问人设信息等；\n2. 用户问题的答案可以直接从屏幕图片中获取，如图片中的文字、颜色、数量等显式信息。\n\n    Parameters\n    ----------\n    answer : str\n        answer\n\n    Returns\n    ----------\n    : str\n        问题答案\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.code_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长代码生成、代码解释、代码调试、代码语言转换、代码优化、代码识别等代码程序相关任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与代码、程序相关。\n    references : List[Union[List[str], str]]\n        应答代码相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef jingdong.search_product(keywords: str, category: str, sort_by: str) -> List[Dict]:\n    '''\n    搜索商品\n\n    Parameters\n    ----------\n    keywords : str\n        搜索关键词\n    category : str, optional\n        商品分类\n    sort_by : str, optional\n        排序方式，如价格、销量等\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的商品列表，每个商品包含名称、价格、图片、评分等信息\n    '''\n    pass\n```\n\n\n```tool-10\ndef jingdong.get_shipping_info(order_id: str) -> Dict:\n    '''\n    查询物流信息\n\n    Parameters\n    ----------\n    order_id : str\n        订单ID\n\n    Returns\n    ----------\n    : Dict\n        物流信息，包括当前状态、预计送达时间等\n    '''\n    pass\n```",
        "query": "小红书上面提到的这套化妆品在京东上面多少钱？",
        "ground_truth": [
            {
                "id": 1,
                "name": "jingdong.search_product",
                "args": {
                    "keywords": "YSL圣罗兰小明星小样五件套",
                    "category": "化妆品",
                    "sort_by": ""
                }
            },
            {
                "id": 2,
                "name": "models.general_response",
                "args": {
                    "instruction": "回复用户该化妆品在京东的价格",
                    "references": [
                        "#E1"
                    ]
                }
            }
        ],
        "plan_str": "SubTask1: 在京东搜索该化妆品\n#E1 = jingdong.search_product(keywords=\"YSL圣罗兰小明星小样五件套\", category=\"化妆品\", sort_by=\"\")\nSubTask2: 组织回复\n#E2 = models.general_response(instruction=\"回复用户该化妆品在京东的价格\", references=[#E1]) \n",
        "image": "mt-plan_20.png"
    },
    "query_21": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "models",
                    "foodtalks"
                ],
                "selected_apis_name": [
                    "foodtalks.get_video_tutorials",
                    "foodtalks.search_recipes",
                    "models.date_qa",
                    "models.extract_information_from_text",
                    "foodtalks.generate_shopping_list",
                    "foodtalks.comment_on_recipe",
                    "models.scan_image_then_extract_information",
                    "foodtalks.upload_food_photo",
                    "models.image_search",
                    "foodtalks.get_user_profile"
                ]
            },
            "environment": {
                "datetime": "2024年08月23日 星期五",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef foodtalks.get_video_tutorials(category: str) -> List[Dict]:\n    '''\n    获取视频教程\n\n    Parameters\n    ----------\n    category : str, optional\n        视频分类，如炒菜、烘焙等\n\n    Returns\n    ----------\n    : List[Dict]\n        视频教程列表，包括标题、简介、视频URL等\n    '''\n    pass\n```\n\n\n```tool-2\ndef foodtalks.search_recipes(keywords: str) -> List[Dict]:\n    '''\n    搜索菜谱\n\n    Parameters\n    ----------\n    keywords : str\n        搜索关键词\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的菜谱列表，包括菜谱名称、简介、图片等\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.date_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长解答节假日、节气、是否上班、调休信息相关问题；也支持时间推理计算，如日期天数之差、离国庆节还有多久等。\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题，与节假日、节气、调休信息、日期推算相关\n    references : List[Union[List[str], str]]\n        提供的参考信息，能帮助解答问题，如当前日期、星期数等信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef foodtalks.generate_shopping_list(recipe_id: str, servings: int) -> List[Dict]:\n    '''\n    生成购物清单\n\n    Parameters\n    ----------\n    recipe_id : str\n        菜谱ID\n    servings : int\n        需要制作的份数\n\n    Returns\n    ----------\n    : List[Dict]\n        购物清单列表，包括用料名称和数量\n    '''\n    pass\n```\n\n\n```tool-6\ndef foodtalks.comment_on_recipe(recipe_id: str, comment: str) -> bool:\n    '''\n    评论菜谱\n\n    Parameters\n    ----------\n    recipe_id : str\n        菜谱ID\n    comment : str\n        评论内容\n\n    Returns\n    ----------\n    : bool\n        评论操作是否成功\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.scan_image_then_extract_information(instruction: str, image_url: str) -> str:\n    '''\n    擅长从给定(手机屏幕)图片中抽取需要的信息，例如从手机/PC等设备屏幕上抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将从该图片中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef foodtalks.upload_food_photo(recipe_id: str, image_url: str, description: str) -> bool:\n    '''\n    上传美食照片\n\n    Parameters\n    ----------\n    recipe_id : str, optional\n        关联的菜谱ID\n    image_url : str\n        美食照片URL\n    description : str, optional\n        照片描述\n\n    Returns\n    ----------\n    : bool\n        照片上传是否成功\n    '''\n    pass\n```\n\n\n```tool-9\ndef models.image_search(image_url: str) -> str:\n    '''\n    一个基于给定的图片搜索图中事物相关信息的模型，该模型的能力包括：\n1. 搜索著名人物的身份、经历，包括明星、政客、历史人物、体育明星等；\n2. 识别图像中动物/植物的品种；\n3. 识别照片中地点或景点的名称和地址。\n\n    Parameters\n    ----------\n    image_url : str\n        给定图片地址，将搜索该图片中的人、动植物或地点的相关信息\n\n    Returns\n    ----------\n    : str\n        图片中事物的相关信息\n    '''\n    pass\n```\n\n\n```tool-10\ndef foodtalks.get_user_profile() -> Dict:\n    '''\n    获取用户个人资料\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : Dict\n        用户的个人信息，包括昵称、头像、收藏的菜谱等\n    '''\n    pass\n```",
        "query": "这个菜用了什么原材料",
        "ground_truth": [
            {
                "id": 1,
                "name": "models.image_search",
                "args": {
                    "instruction": "图中是什么菜？",
                    "image_url": "screen_image_url"
                }
            },
            {
                "id": 2,
                "name": "foodtalks.search_recipes",
                "args": {
                    "keywords": "#E1"
                }
            },
            {
                "id": 3,
                "name": "models.extract_information_from_text",
                "args": {
                    "text": "#E2",
                    "instruction": "提取第一个菜谱的ID"
                }
            },
            {
                "id": 4,
                "name": "foodtalks.generate_shopping_list",
                "args": {
                    "recipe_id": "#E3",
                    "servings": "2"
                }
            }
        ],
        "plan_str": "SubTask1: 识别图片中的菜品\n#E1 = models.image_search(instruction=\"图中是什么菜？\", image_url=\"screen_image_url\")\nSubTask2: 搜索菜谱\n#E2 = foodtalks.search_recipes(keywords=#E1)\nSubTask3: 获取菜谱ID\n#E3 = models.extract_information_from_text(text=#E2, instruction=\"提取第一个菜谱的ID\")\nSubTask4: 生成材料清单\n#E4 = foodtalks.generate_shopping_list(recipe_id=#E3, servings=2)",
        "image": "mt-plan_21.png"
    },
    "query_22": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "wewave"
                ],
                "selected_apis_name": [
                    "wewave.post_weibo",
                    "wewave.get_short_videos",
                    "wewave.get_recommended_content",
                    "wewave.get_star_updates",
                    "wewave.join_super_topic",
                    "wewave.start_live_stream",
                    "wewave.get_super_topic_posts",
                    "wewave.interact_with_live_stream",
                    "wewave.subscribe_membership",
                    "wewave.get_live_streams"
                ]
            },
            "environment": {
                "datetime": "2018年06月02日 星期六",
                "location": "河南省新乡市"
            }
        },
        "api_descriptions": "```tool-1\ndef wewave.post_weibo(content: str, images: List[str], video: str) -> bool:\n    '''\n    发布新的微博\n\n    Parameters\n    ----------\n    content : str\n        微博内容\n    images : List[str], optional\n        微博图片列表\n    video : str, optional\n        微博视频链接\n\n    Returns\n    ----------\n    : bool\n        发布微博是否成功的状态\n    '''\n    pass\n```\n\n\n```tool-2\ndef wewave.get_short_videos() -> List[Dict[str, Union[str, int, float]]]:\n    '''\n    获取微博短视频列表\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, int, float]]]\n        微博短视频列表，包括视频的标题、URL、时长等信息\n    '''\n    pass\n```\n\n\n```tool-3\ndef wewave.get_recommended_content() -> List[Dict[str, Union[str, int, float]]]:\n    '''\n    获取微博推荐内容\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, int, float]]]\n        推荐内容的列表，每个内容包含标题、描述、发布时间等信息\n    '''\n    pass\n```\n\n\n```tool-4\ndef wewave.get_star_updates(star_id: str) -> Dict[str, Union[str, int, List[str]]]:\n    '''\n    获取明星和大V的最新动态\n\n    Parameters\n    ----------\n    star_id : str\n        明星或大V的唯一标识\n\n    Returns\n    ----------\n    : Dict[str, Union[str, int, List[str]]]\n        明星或大V的最新动态信息，包括动态内容、发布时间、点赞数等\n    '''\n    pass\n```\n\n\n```tool-5\ndef wewave.join_super_topic(topic_id: str) -> bool:\n    '''\n    加入超话社区\n\n    Parameters\n    ----------\n    topic_id : str\n        超话社区的唯一标识\n\n    Returns\n    ----------\n    : bool\n        加入超话社区是否成功的标志\n    '''\n    pass\n```\n\n\n```tool-6\ndef wewave.start_live_stream(title: str, description: str) -> str:\n    '''\n    开始新的微博直播\n\n    Parameters\n    ----------\n    title : str\n        直播标题\n    description : str, optional\n        直播描述\n\n    Returns\n    ----------\n    : str\n        直播的唯一标识符（ID）\n    '''\n    pass\n```\n\n\n```tool-7\ndef wewave.get_super_topic_posts(topic_id: str) -> List[Dict[str, Union[str, int, float]]]:\n    '''\n    获取超话社区的帖子\n\n    Parameters\n    ----------\n    topic_id : str\n        超话社区的唯一标识\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, int, float]]]\n        超话社区的帖子列表，每个帖子包含内容、发布时间、点赞数等信息\n    '''\n    pass\n```\n\n\n```tool-8\ndef wewave.interact_with_live_stream(live_stream_id: str, message: str) -> bool:\n    '''\n    与正在进行的直播互动\n\n    Parameters\n    ----------\n    live_stream_id : str\n        直播的唯一标识\n    message : str\n        互动消息内容\n\n    Returns\n    ----------\n    : bool\n        互动是否成功的标志\n    '''\n    pass\n```\n\n\n```tool-9\ndef wewave.subscribe_membership(subscription_type: str) -> bool:\n    '''\n    订阅微博会员\n\n    Parameters\n    ----------\n    subscription_type : str\n        订阅类型（如月度、季度、半年、年度）\n\n    Returns\n    ----------\n    : bool\n        订阅操作是否成功\n    '''\n    pass\n```\n\n\n```tool-10\ndef wewave.get_live_streams() -> List[Dict[str, Union[str, int, float]]]:\n    '''\n    获取微博直播内容\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, int, float]]]\n        微博直播内容列表，包括直播标题、主播信息、观看人数等\n    '''\n    pass\n```",
        "query": "查看演员表中的第一个和第二个明星的微博最新动态",
        "ground_truth": [
            {
                "id": 1,
                "name": "wewave.get_star_updates",
                "args": {
                    "star_id": "古天乐"
                }
            },
            {
                "id": 1,
                "name": "wewave.get_star_updates",
                "args": {
                    "star_id": "林峯"
                }
            }
        ],
        "plan_str": "SubTask1: 获取第1位演员的最新微博动态\n#E1 = wewave.get_star_updates(star_id=\"古天乐\")\n\nSubTask1: 获取第2位演员的最新微博动态\n#E1 = wewave.get_star_updates(star_id=\"林峯\")",
        "image": "mt-plan_22.png"
    },
    "query_23": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "qunar",
                    "railway12306",
                    "calendar_app"
                ],
                "selected_apis_name": [
                    "railway12306.search_tickets",
                    "calendar_app.create_event",
                    "qunar.search_train_tickets",
                    "railway12306.cancel_order",
                    "railway12306.get_passenger_info",
                    "calendar_app.sync_calendar",
                    "qunar.book_hotel",
                    "railway12306.book_ticket",
                    "qunar.book_attraction_ticket",
                    "qunar.search_hotels"
                ]
            },
            "environment": {
                "datetime": "2024年08月21日 星期三",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef railway12306.search_tickets(departure: str, destination: str, date: str, train_type: str) -> List[Dict]:\n    '''\n    查询车票信息\n\n    Parameters\n    ----------\n    departure : str\n        出发地\n    destination : str\n        目的地\n    date : str\n        出发日期，格式为YYYY-MM-DD\n    train_type : str, optional\n        车次类型，如高铁、动车等\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的车票信息列表\n    '''\n    pass\n```\n\n\n```tool-2\ndef calendar_app.create_event(title: str, start_time: str, end_time: str, location: str, description: str, attendees: List[str]) -> str:\n    '''\n    创建新的事件\n\n    Parameters\n    ----------\n    title : str\n        事件标题\n    start_time : str\n        事件开始时间（ISO格式）\n    end_time : str\n        事件结束时间（ISO格式）\n    location : str, optional\n        事件地点\n    description : str, optional\n        事件描述\n    attendees : List[str], optional\n        事件参与者邮箱列表\n\n    Returns\n    ----------\n    : str\n        创建成功的事件ID\n    '''\n    pass\n```\n\n\n```tool-3\ndef qunar.search_train_tickets(departure_station: str, arrival_station: str, departure_date: str) -> List[Dict]:\n    '''\n    搜索火车票\n\n    Parameters\n    ----------\n    departure_station : str\n        出发站\n    arrival_station : str\n        到达站\n    departure_date : str\n        出发日期，格式为YYYY-MM-DD\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的火车票列表，包括车次信息、价格等\n    '''\n    pass\n```\n\n\n```tool-4\ndef railway12306.cancel_order(order_id: str) -> bool:\n    '''\n    取消订单\n\n    Parameters\n    ----------\n    order_id : str\n        订单ID\n\n    Returns\n    ----------\n    : bool\n        取消操作是否成功\n    '''\n    pass\n```\n\n\n```tool-5\ndef railway12306.get_passenger_info() -> Dict:\n    '''\n    查询乘客个人信息\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : Dict\n        乘客的个人信息\n    '''\n    pass\n```\n\n\n```tool-6\ndef calendar_app.sync_calendar() -> bool:\n    '''\n    同步日历与其他设备\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : bool\n        同步操作是否成功\n    '''\n    pass\n```\n\n\n```tool-7\ndef qunar.book_hotel(hotel_id: str, room_type: str, check_in_date: str, check_out_date: str, guest_info: List[Dict], contact_info: Dict) -> Dict:\n    '''\n    预订酒店\n\n    Parameters\n    ----------\n    hotel_id : str\n        酒店ID\n    room_type : str\n        房型\n    check_in_date : str\n        入住日期，格式为YYYY-MM-DD\n    check_out_date : str\n        退房日期，格式为YYYY-MM-DD\n    guest_info : List[Dict]\n        入住客人信息，包括姓名、身份证号等\n    contact_info : Dict\n        联系方式，包括手机号、邮箱等\n\n    Returns\n    ----------\n    : Dict\n        返回预订成功的订单信息\n    '''\n    pass\n```\n\n\n```tool-8\ndef railway12306.book_ticket(train_id: str, seat_type: str, passenger: Dict, contact_info: Dict) -> Dict:\n    '''\n    预订车票\n\n    Parameters\n    ----------\n    train_id : str\n        车次ID\n    seat_type : str\n        座位类型，如一等座、二等座等\n    passenger : Dict\n        乘客信息，包括姓名、身份证号等\n    contact_info : Dict\n        联系方式，包括手机号、邮箱等\n\n    Returns\n    ----------\n    : Dict\n        返回预订成功的订单信息\n    '''\n    pass\n```\n\n\n```tool-9\ndef qunar.book_attraction_ticket(attraction_id: str, visit_date: str, visitor_info: List[Dict], contact_info: Dict) -> Dict:\n    '''\n    预订景点门票\n\n    Parameters\n    ----------\n    attraction_id : str\n        景点ID\n    visit_date : str\n        参观日期，格式为YYYY-MM-DD\n    visitor_info : List[Dict]\n        参观者信息，包括姓名、身份证号等\n    contact_info : Dict\n        联系方式，包括手机号、邮箱等\n\n    Returns\n    ----------\n    : Dict\n        返回预订成功的订单信息\n    '''\n    pass\n```\n\n\n```tool-10\ndef qunar.search_hotels(location: str, check_in_date: str, check_out_date: str) -> List[Dict]:\n    '''\n    搜索酒店\n\n    Parameters\n    ----------\n    location : str\n        酒店所在城市或地点\n    check_in_date : str\n        入住日期，格式为YYYY-MM-DD\n    check_out_date : str\n        退房日期，格式为YYYY-MM-DD\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的酒店列表，包括酒店名称、价格等\n    '''\n    pass\n```",
        "query": "帮我订一趟明天前往云洞岩的动车，记录在我的日程，并在附近订一家酒店",
        "ground_truth": [
            {
                "id": 1,
                "name": "qunar.search_train_tickets",
                "args": {
                    "departure_station": "当前所在城市",
                    "arrival_station": "云洞岩",
                    "departure_date": "2024-08-22"
                }
            },
            {
                "id": 2,
                "name": "railway12306.get_passenger_info",
                "args": {
                    "user_id": "用户ID"
                }
            },
            {
                "id": 3,
                "name": "railway12306.book_ticket",
                "args": {
                    "train_id": "#E1[0][\"train_id\"]",
                    "seat_type": "二等座",
                    "passenger": "#E2",
                    "contact_info": {
                        "phone": "用户手机号",
                        "email": "用户邮箱"
                    }
                }
            },
            {
                "id": 4,
                "name": "calendar_app.create_event",
                "args": {
                    "title": "前往云洞岩的动车",
                    "start_time": "#E1[0][\"departure_time\"]",
                    "end_time": "#E1[0][\"arrival_time\"]",
                    "location": "动车",
                    "description": "乘坐动车前往云洞岩",
                    "attendees": []
                }
            },
            {
                "id": 5,
                "name": "qunar.search_hotels",
                "args": {
                    "location": "云洞岩",
                    "check_in_date": "2024-08-22",
                    "check_out_date": "2024-08-23"
                }
            },
            {
                "id": 6,
                "name": "qunar.book_hotel",
                "args": {
                    "user_id": "用户ID",
                    "hotel_id": "#E5[0][\"hotel_id\"]",
                    "room_type": "标准间",
                    "check_in_date": "2024-08-22",
                    "check_out_date": "2024-08-23",
                    "guest_info": [
                        {
                            "name": "用户姓名",
                            "id_number": "用户身份证号"
                        }
                    ],
                    "contact_info": {
                        "phone": "用户手机号",
                        "email": "用户邮箱"
                    }
                }
            },
            {
                "id": 7,
                "name": "calendar_app.create_event",
                "args": {
                    "title": "入住酒店",
                    "start_time": "2024-08-22T14:00:00",
                    "end_time": "2024-08-23T12:00:00",
                    "location": "#E5[0][\"hotel_name\"]",
                    "description": "入住云洞岩附近的酒店",
                    "attendees": []
                }
            }
        ],
        "plan_str": "SubTask1: 搜索明天前往云洞岩的动车票\n#E1 = qunar.search_train_tickets(departure_station=\"当前所在城市\", arrival_station=\"云洞岩\", departure_date=\"2024-08-22\")\n\nSubTask2: 获取用户的个人信息以便预订动车票\n#E2 = railway12306.get_passenger_info(user_id=\"用户ID\")\n\nSubTask3: 预订动车票\n#E3 = railway12306.book_ticket(train_id=#E1[0][\"train_id\"], seat_type=\"二等座\", passenger=#E2, contact_info={\"phone\": \"用户手机号\", \"email\": \"用户邮箱\"})\n\nSubTask4: 创建日程事件记录动车行程\n#E4 = calendar_app.create_event(title=\"前往云洞岩的动车\", start_time=#E1[0][\"departure_time\"], end_time=#E1[0][\"arrival_time\"], location=\"动车\", description=\"乘坐动车前往云洞岩\", attendees=[])\n\nSubTask5: 搜索云洞岩附近的酒店\n#E5 = qunar.search_hotels(location=\"云洞岩\", check_in_date=\"2024-08-22\", check_out_date=\"2024-08-23\")\n\nSubTask6: 预订酒店\n#E6 = qunar.book_hotel(user_id=\"用户ID\", hotel_id=#E5[0][\"hotel_id\"], room_type=\"标准间\", check_in_date=\"2024-08-22\", check_out_date=\"2024-08-23\", guest_info=[{\"name\": \"用户姓名\", \"id_number\": \"用户身份证号\"}], contact_info={\"phone\": \"用户手机号\", \"email\": \"用户邮箱\"})\n\nSubTask7: 创建日程事件记录酒店入住\n#E7 = calendar_app.create_event(title=\"入住酒店\", start_time=\"2024-08-22T14:00:00\", end_time=\"2024-08-23T12:00:00\", location=#E5[0][\"hotel_name\"], description=\"入住云洞岩附近的酒店\", attendees=[])\n|END_OF_CURRENT_SESSION|",
        "image": "mt-plan_23.png"
    },
    "query_24": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "models",
                    "toutiao"
                ],
                "selected_apis_name": [
                    "models.general_response",
                    "models.creative_writing",
                    "toutiao.update_user_profile",
                    "toutiao.submit_comment",
                    "models.image_search",
                    "toutiao.get_hot_news",
                    "toutiao.get_video_detail",
                    "toutiao.subscribe_author",
                    "models.personal_qa",
                    "toutiao.search_news"
                ]
            },
            "environment": {
                "datetime": "2024年08月21日 星期三",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef toutiao.update_user_profile(profile_info: Dict) -> bool:\n    '''\n    更新用户个人资料\n\n    Parameters\n    ----------\n    profile_info : Dict\n        需要更新的个人资料信息\n\n    Returns\n    ----------\n    : bool\n        更新操作是否成功\n    '''\n    pass\n```\n\n\n```tool-4\ndef toutiao.submit_comment(content_id: str, content: str) -> bool:\n    '''\n    提交文章评论\n\n    Parameters\n    ----------\n    content_id : str\n        文章或视频的ID\n    content : str\n        评论内容\n\n    Returns\n    ----------\n    : bool\n        评论是否提交成功\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.image_search(image_url: str) -> str:\n    '''\n    一个基于给定的图片搜索图中事物相关信息的模型，该模型的能力包括：\n1. 搜索著名人物的身份、经历，包括明星、政客、历史人物、体育明星等；\n2. 识别图像中动物/植物的品种；\n3. 识别照片中地点或景点的名称和地址。\n\n    Parameters\n    ----------\n    image_url : str\n        给定图片地址，将搜索该图片中的人、动植物或地点的相关信息\n\n    Returns\n    ----------\n    : str\n        图片中事物的相关信息\n    '''\n    pass\n```\n\n\n```tool-6\ndef toutiao.get_hot_news(category: str, page: int, count: int) -> List[Dict]:\n    '''\n    获取热点新闻\n\n    Parameters\n    ----------\n    category : str, optional\n        热点新闻分类\n    page : int, optional\n        页码\n    count : int, optional\n        每页显示的新闻条数\n\n    Returns\n    ----------\n    : List[Dict]\n        热点新闻列表，每条新闻包括标题、摘要、链接等信息\n    '''\n    pass\n```\n\n\n```tool-7\ndef toutiao.get_video_detail(video_id: str) -> Dict:\n    '''\n    获取视频详情\n\n    Parameters\n    ----------\n    video_id : str\n        视频ID\n\n    Returns\n    ----------\n    : Dict\n        视频的详细信息，包括标题、内容、作者等\n    '''\n    pass\n```\n\n\n```tool-8\ndef toutiao.subscribe_author(author_id: str) -> bool:\n    '''\n    订阅作者\n\n    Parameters\n    ----------\n    author_id : str\n        作者ID\n\n    Returns\n    ----------\n    : bool\n        订阅操作是否成功\n    '''\n    pass\n```\n\n\n```tool-9\ndef models.personal_qa(instruction: str, user_features: str, references: Dict[str, str]) -> str:\n    '''\n    擅长回复可以结合用户个性化信息回答的问题\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题\n    user_features : str\n        提供的用户个性化信息\n    references : Dict[str, str], optional\n        参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef toutiao.search_news(query: str, page: int, count: int) -> List[Dict]:\n    '''\n    搜索新闻\n\n    Parameters\n    ----------\n    query : str\n        搜索关键词\n    page : int, optional\n        页码\n    count : int, optional\n        每页显示的新闻条数\n\n    Returns\n    ----------\n    : List[Dict]\n        搜索结果，符合条件的新闻列表\n    '''\n    pass\n```",
        "query": "有没有这几个人最新的专题采访",
        "ground_truth": [
            {
                "id": 1,
                "name": "toutiao.search_news",
                "args": {
                    "query": "2025年诺贝尔奖获奖者专题采访",
                    "page": "1",
                    "count": "5"
                }
            },
            {
                "id": 2,
                "name": "toutiao.search_news",
                "args": {
                    "query": "John Clarke个人采访",
                    "page": "1",
                    "count": "5"
                }
            },
            {
                "id": 3,
                "name": "toutiao.search_news",
                "args": {
                    "query": "Michel H. Devoret个人采访",
                    "page": "1",
                    "count": "5"
                }
            },
            {
                "id": 4,
                "name": "toutiao.search_news",
                "args": {
                    "query": "John M. Martinis个人采访",
                    "page": "1",
                    "count": "5"
                }
            },
            {
                "id": 5,
                "name": "models.general_response",
                "args": {
                    "instruction": "整理新闻采访，生成回复",
                    "references": [
                        "#E1",
                        "#E2",
                        "#E3",
                        "#E4"
                    ]
                }
            }
        ],
        "plan_str": "SubTask1: 搜索2025年诺贝尔奖获奖者专题采访\n#E1 = toutiao.search_news(query=\"2025年诺贝尔奖获奖者专题采访\", page=1, count=5)\n\nSubTask2: 搜索John Clarke个人采访\n#E2 = toutiao.search_news(query=\"John Clarke个人采访\", page=1, count=5)\n\nSubTask3: 搜索Michel H. Devoret个人采访\n#E3 = toutiao.search_news(query=\"Michel H. Devoret个人采访\", page=1, count=5)\n\nSubTask4: 搜索John M. Martinis个人采访\n#E4 = toutiao.search_news(query=\"John M. Martinis个人采访\", page=1, count=5)\n\nSubTask5: 将搜索到的新闻整理成回复\n#E5 = models.general_response(instruction=\"整理新闻采访，生成回复\", references=[#E1, #E2, #E3, #E4])",
        "image": "mt-plan_24.jpg"
    },
    "query_25": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "semantic_search",
                    "models",
                    "ke"
                ],
                "selected_apis_name": [
                    "models.image_search",
                    "models.date_qa",
                    "ke.get_user_profile",
                    "ke.remove_from_favorites",
                    "ke.book_viewing",
                    "ke.get_property_detail",
                    "models.extract_information_from_text",
                    "ke.search_properties",
                    "semantic_search.personal_context_search",
                    "ke.get_favorited_properties"
                ]
            },
            "environment": {
                "datetime": "2022年11月04日 星期五",
                "location": "辽宁省葫芦岛市"
            }
        },
        "api_descriptions": "```tool-1\ndef models.image_search(image_url: str) -> str:\n    '''\n    一个基于给定的图片搜索图中事物相关信息的模型，该模型的能力包括：\n1. 搜索著名人物的身份、经历，包括明星、政客、历史人物、体育明星等；\n2. 识别图像中动物/植物的品种；\n3. 识别照片中地点或景点的名称和地址。\n\n    Parameters\n    ----------\n    image_url : str\n        给定图片地址，将搜索该图片中的人、动植物或地点的相关信息\n\n    Returns\n    ----------\n    : str\n        图片中事物的相关信息\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.date_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长解答节假日、节气、是否上班、调休信息相关问题；也支持时间推理计算，如日期天数之差、离国庆节还有多久等。\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题，与节假日、节气、调休信息、日期推算相关\n    references : List[Union[List[str], str]]\n        提供的参考信息，能帮助解答问题，如当前日期、星期数等信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef ke.get_user_profile() -> Dict:\n    '''\n    查看用户信息\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : Dict\n        用户个人信息，包括姓名、联系方式、收藏的房源等\n    '''\n    pass\n```\n\n\n```tool-4\ndef ke.remove_from_favorites(property_id: str) -> bool:\n    '''\n    取消收藏房源\n\n    Parameters\n    ----------\n    property_id : str\n        房源ID\n\n    Returns\n    ----------\n    : bool\n        取消收藏操作是否成功\n    '''\n    pass\n```\n\n\n```tool-5\ndef ke.book_viewing(property_id: str, viewing_time: str) -> bool:\n    '''\n    在线预约看房\n\n    Parameters\n    ----------\n    property_id : str\n        房源ID\n    viewing_time : str\n        预约看房时间，格式为YYYY-MM-DD HH:MM:SS\n\n    Returns\n    ----------\n    : bool\n        预约操作是否成功\n    '''\n    pass\n```\n\n\n```tool-6\ndef ke.get_property_detail(property_id: str) -> Dict:\n    '''\n    获取房源详细信息\n\n    Parameters\n    ----------\n    property_id : str\n        房源ID\n\n    Returns\n    ----------\n    : Dict\n        房源的详细信息，包括房源描述、图片、视频、户型图等\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef ke.search_properties(keywords: str, location: str, price_range: str, property_type: str) -> List[Dict]:\n    '''\n    搜索房源\n\n    Parameters\n    ----------\n    keywords : str\n        搜索关键词\n    location : str, optional\n        房源地点\n    price_range : str, optional\n        价格范围\n    property_type : str, optional\n        房源类型，如公寓、别墅等\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的房源列表，包括房源名称、地点、价格等信息\n    '''\n    pass\n```\n\n\n```tool-9\ndef semantic_search.personal_context_search(query: str) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef ke.get_favorited_properties() -> List[Dict]:\n    '''\n    查看收藏房源\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict]\n        用户收藏的房源列表\n    '''\n    pass\n```",
        "query": "帮找到我之前在贝壳找房里收藏的在成都oppo大厦附近和图片里户型类似的房源，获取房源的详细信息并申请在线预约看房。",
        "ground_truth": [
            {
                "id": 1,
                "name": "semantic_search.personal_context_search",
                "args": {
                    "query": "用户贝壳找房的用户id"
                }
            },
            {
                "id": 2,
                "name": "ke.get_favorited_properties",
                "args": {
                    "user_id": "E1"
                }
            },
            {
                "id": 3,
                "name": "models.image_search",
                "args": {
                    "instruction": "这张图片的户型是什么",
                    "image_url": "screen_image_url"
                }
            },
            {
                "id": 4,
                "name": "ke.search_properties",
                "args": {
                    "keywords": "E3",
                    "location": "成都oppo大厦附近",
                    "price_range": "",
                    "property_type": ""
                }
            },
            {
                "id": 5,
                "name": "ke.get_property_detail",
                "args": {
                    "property_id": "E4"
                }
            },
            {
                "id": 6,
                "name": "ke.book_viewing",
                "args": {
                    "user_id": "E1",
                    "property_id": "E4",
                    "viewing_time": "2024-08-22 10:00:00"
                }
            }
        ],
        "plan_str": "SubTask1: 获取用户ID\n#E1 = semantic_search.personal_context_search(query=\"用户贝壳找房的用户id\")\nSubTask2: 查看用户收藏的房源信息\n#E2 = ke.get_favorited_properties(user_id='E1')\nSubTask3: 从图片中获取户型信息\n#E3 = models.image_search(instruction='这张图片的户型是什么', image_url='screen_image_url') \nSubTask4: 查找符合条件的房源\n#E4 = ke.search_properties(keywords='E3', location='成都oppo大厦附近', price_range='', property_type='')\nSubTask5: 获取房源的详细信息\n#E5 = ke.get_property_detail(property_id='E4')\nSubTask6: 在线预约看房\n#E6 = ke.book_viewing(user_id='E1', property_id='E4', viewing_time='2024-08-22 10:00:00') \n",
        "image": "mt-plan_25.png"
    },
    "query_26": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "jingdong",
                    "models"
                ],
                "selected_apis_name": [
                    "jingdong.add_to_cart",
                    "models.image_search",
                    "models.general_response",
                    "jingdong.get_product_detail",
                    "jingdong.update_user_profile",
                    "jingdong.search_product",
                    "models.extract_information_from_text",
                    "models.scan_image_then_extract_information",
                    "jingdong.place_order",
                    "models.math_qa"
                ]
            },
            "environment": {
                "datetime": "2020年12月31日 星期四",
                "location": "山西省大同市"
            }
        },
        "api_descriptions": "```tool-1\ndef jingdong.add_to_cart(product_id: str, quantity: int) -> bool:\n    '''\n    添加商品到购物车\n\n    Parameters\n    ----------\n    product_id : str\n        商品ID\n    quantity : int\n        购买数量\n\n    Returns\n    ----------\n    : bool\n        添加操作是否成功\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.image_search(image_url: str) -> str:\n    '''\n    一个基于给定的图片搜索图中事物相关信息的模型，该模型的能力包括：\n1. 搜索著名人物的身份、经历，包括明星、政客、历史人物、体育明星等；\n2. 识别图像中动物/植物的品种；\n3. 识别照片中地点或景点的名称和地址。\n\n    Parameters\n    ----------\n    image_url : str\n        给定图片地址，将搜索该图片中的人、动植物或地点的相关信息\n\n    Returns\n    ----------\n    : str\n        图片中事物的相关信息\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef jingdong.get_product_detail(product_id: str) -> Dict:\n    '''\n    获取商品详情\n\n    Parameters\n    ----------\n    product_id : str\n        商品ID\n\n    Returns\n    ----------\n    : Dict\n        返回商品的详细信息，包括名称、价格、描述、评论等\n    '''\n    pass\n```\n\n\n```tool-5\ndef jingdong.update_user_profile(profile_info: Dict) -> bool:\n    '''\n    更新个人资料\n\n    Parameters\n    ----------\n    profile_info : Dict\n        需要更新的个人资料信息\n\n    Returns\n    ----------\n    : bool\n        更新操作是否成功\n    '''\n    pass\n```\n\n\n```tool-6\ndef jingdong.search_product(keywords: str, category: str, sort_by: str) -> List[Dict]:\n    '''\n    搜索商品\n\n    Parameters\n    ----------\n    keywords : str\n        搜索关键词\n    category : str, optional\n        商品分类\n    sort_by : str, optional\n        排序方式，如价格、销量等\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的商品列表，每个商品包含名称、价格、图片、评分等信息\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.scan_image_then_extract_information(instruction: str, image_url: str) -> str:\n    '''\n    擅长从给定(手机屏幕)图片中抽取需要的信息，例如从手机/PC等设备屏幕上抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将从该图片中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef jingdong.place_order(cart_items: List[Dict], address_id: str, payment_method: str) -> str:\n    '''\n    下单\n\n    Parameters\n    ----------\n    cart_items : List[Dict]\n        购物车中的商品列表\n    address_id : str\n        收货地址ID\n    payment_method : str\n        支付方式\n\n    Returns\n    ----------\n    : str\n        返回生成的订单ID\n    '''\n    pass\n```\n\n\n```tool-10\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```",
        "query": "这个商品在京东是什么价格，如果差价在10%以内，那么就在京东上购买该商品。",
        "ground_truth": [
            {
                "id": 1,
                "name": "jingdong.search_product",
                "args": {
                    "keywords": "OPPO Find N3 12GB+512GB 千山绿",
                    "category": "null",
                    "sort_by": "null"
                }
            },
            {
                "id": 2,
                "name": "models.extract_information_from_text",
                "args": {
                    "instruction": "从搜索结果中抽取商品价格",
                    "text": "#E1"
                }
            },
            {
                "id": 3,
                "name": "models.math_qa",
                "args": {
                    "instruction": "计算两个价格 #E2 和 5888元 的差价比例",
                    "references": []
                }
            },
            {
                "id": 4,
                "name": "models.general_response",
                "args": {
                    "instruction": "如果两个价格的差价比例 #E3 不超过10%，则回复“建议在京东购买”，否则回复“不建议在京东购买”",
                    "references": []
                }
            }
        ],
        "plan_str": "SubTask1: 在京东搜索该商品\n#E1 = jingdong.search_product(keywords=\"OPPO Find N3 12GB+512GB 千山绿\", category=null, sort_by=null)\nSubTask2: 从搜索结果中获取商品价格\n#E2 = models.extract_information_from_text(instruction=\"从搜索结果中抽取商品价格\", text=#E1)\nSubTask3: 计算京东上和屏幕上两个价格的差价比例\n#E3 = models.math_qa(instruction=\"计算两个价格 #E2 和 5888元 的差价比例\", references=[])\nSubTask4: 判断是否在京东购买\n#E4 = models.general_response(instruction=\"如果两个价格的差价比例 #E3 不超过10%，则回复“建议在京东购买”，否则回复“不建议在京东购买”\", references=[]) \n",
        "image": "mt-plan_26.png"
    },
    "query_27": {
        "meta": {
            "prompt_type": "ReWoo",
            "candidate_apis": {
                "apps": [
                    "models",
                    "phone",
                    "local_memory"
                ],
                "selected_apis_name": [
                    "local_memory.search",
                    "models.search_then_response",
                    "phone.add_contact",
                    "models.creative_writing"
                ]
            },
            "environment": {
                "datetime": "2022-11-05 星期六",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef local_memory.search(query: str, filters: dict) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n    filters : dict, optional\n        查询记忆的过滤条件\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.search_then_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个具备搜索引擎能力的问答模型，具备以下能力：\n1. 搜索实时信息并总结。如果用户问题涉及时效性信息，问答模型第一步通过搜索引擎检索信息，第二步对检索的多个信息进行汇总，生成回复；\n2. 问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的instruction和给定的参考references，生成正确、有用、安全的回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令/问题，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        返回的回复\n    '''\n    pass\n```\n\n\n```tool-3\ndef phone.add_contact(name: str, phone_number: str, email: str, address: str, birthday: str) -> Union[List[Dict[str, str]], bool]:\n    '''\n    添加联系人\n\n    Parameters\n    ----------\n    name : str\n        联系人姓名\n    phone_number : str\n        联系人号码\n    email : str, optional\n        联系人邮箱\n    address : str, optional\n        联系人地址\n    birthday : str, optional\n        联系人生日\n\n    Returns\n    ----------\n    : Union[List[Dict[str, str]], bool]\n        添加联系人操作是否成功\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```",
        "query": "把图片里的信息添加到联系人。",
        "image": "mt-plan_27.png",
        "ground_truth": [
            {
                "id": 1,
                "name": "phone.add_contact",
                "args": {
                    "name": "李明(Ming Li)",
                    "phone_number": "+8612345678900",
                    "email": "liming@example.com",
                    "address": "北京市海淀区xx路100号"
                }
            }
        ],
        "plan_str": "SubTask1: 将识别到的联系人信息添加到联系人中\n#E1 = phone.add_contact(name=\"李明(Ming Li)\", phone_number=\"+8612345678900\", email=\"liming@example.com\", address=\"北京市海淀区xx路100号\")"
    },
    "query_28": {
        "meta": {
            "prompt_type": "ReWoo",
            "candidate_apis": {
                "apps": [
                    "models",
                    "notes",
                    "semantic_search"
                ],
                "selected_apis_name": [
                    "semantic_search.web_search",
                    "models.extract_information_from_text",
                    "notes.create_note",
                    "models.date_qa"
                ]
            },
            "environment": {
                "datetime": "2021-09-08 星期三",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef semantic_search.web_search(query: str, count: int) -> List[str]:\n    '''\n    网页搜索，根据输入的query，在搜索引擎中查找相关页面，可用于查找人物、物品、体育赛事、事件相关的时效性信息，精确信息。\n\n    Parameters\n    ----------\n    query : str\n        用户搜索的关键词、短语、查询，该参数项不能为空。\n    count : int, optional\n        期望返回的搜索结果数量\n\n    Returns\n    ----------\n    : List[str]\n        搜索引擎返回的结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef notes.create_note(title: str, content: str, tags: List[str]) -> str:\n    '''\n    添加一条新的备忘录\n\n    Parameters\n    ----------\n    title : str, optional\n        备忘录标题\n    content : str\n        备忘录内容\n    tags : List[str], optional\n        备忘录标签\n\n    Returns\n    ----------\n    : str\n        创建成功的备忘录ID\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.date_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长解答节假日、节气、是否上班、调休信息相关问题；也支持时间推理计算，如日期天数之差、离国庆节还有多久等。\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题，与节假日、节气、调休信息、日期推算相关\n    references : List[Union[List[str], str]]\n        提供的参考信息，能帮助解答问题，如当前日期、星期数等信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```",
        "query": "这片文章添加到便签里",
        "image": "mt-plan_28.jpg",
        "ground_truth": [
            {
                "id": 1,
                "name": "notes.create_note",
                "args": {
                    "title": "GPT-5 and the new era of work",
                    "content": "Today we're introducing GPT5 OpenAI's smartest, fastest, most useful model yet, and a major step towards placing intelligence at the center of every business. \n\nGPT5 unites and exceeds OpenAI's prior breakthroughs in frontier intelligence, spanning 4o, OpenAI o-series reasoning, agents, and advanced math(opens in a new window) capabilities...",
                    "tags": []
                }
            }
        ],
        "plan_str": "SubTask1: 将文章内容和标题添加到便签\n#E1 = notes.create_note(title=\"GPT-5 and the new era of work\", content=\"Today we're introducing GPT5 OpenAI's smartest, fastest, most useful model yet, and a major step towards placing intelligence at the center of every business. \\n\\nGPT5 unites and exceeds OpenAI's prior breakthroughs in frontier intelligence, spanning 4o, OpenAI o-series reasoning, agents, and advanced math(opens in a new window) capabilities...\", tags=[])"
    },
    "query_29": {
        "meta": {
            "prompt_type": "ReWoo",
            "candidate_apis": {
                "apps": [
                    "models",
                    "local_memory"
                ],
                "selected_apis_name": [
                    "local_memory.add",
                    "models.multimodal_qa",
                    "models.math_qa",
                    "models.extract_information_from_text"
                ]
            },
            "environment": {
                "datetime": "2024-11-11 星期一",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef local_memory.add(data: str, metadata: dict) -> dict:\n    '''\n    向本地知识库中添加知识和记忆\n\n    Parameters\n    ----------\n    data : str\n        添加记忆的相关数据，文本数据为记忆本身的内容\n    metadata : dict, optional\n        记忆的相关属性，创建时间、类型等\n\n    Returns\n    ----------\n    : dict\n        mem0返回的状态\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```",
        "query": "帮我把屏幕上的搜索历史记到个人知识库。",
        "image": "mt-plan_29.png",
        "ground_truth": [
            {
                "id": 1,
                "name": "local_memory.add",
                "args": {
                    "data": "搜索历史： 人民空军成立75周年, 美国大选最新消息, 大模型排行榜"
                }
            }
        ],
        "plan_str": "SubTask1: 将搜索历史记录到个人知识库\n#E1 = local_memory.add(data=\"搜索历史： 人民空军成立75周年, 美国大选最新消息, 大模型排行榜\")"
    },
    "query_30": {
        "meta": {
            "prompt_type": "ReWoo",
            "candidate_apis": {
                "apps": [
                    "models",
                    "wechat",
                    "local_memory"
                ],
                "selected_apis_name": [
                    "models.creative_writing",
                    "models.date_qa",
                    "wechat.send_message",
                    "local_memory.search",
                    "models.search_then_response"
                ]
            },
            "environment": {
                "datetime": "2021-11-29 星期一",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.date_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长解答节假日、节气、是否上班、调休信息相关问题；也支持时间推理计算，如日期天数之差、离国庆节还有多久等。\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题，与节假日、节气、调休信息、日期推算相关\n    references : List[Union[List[str], str]]\n        提供的参考信息，能帮助解答问题，如当前日期、星期数等信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef wechat.send_message(recipient_id: str, message_type: str, content: Union[str, bytes]) -> bool:\n    '''\n    发送消息\n\n    Parameters\n    ----------\n    recipient_id : str\n        消息接收者ID\n    message_type : str\n        消息类型，如'text', 'image', 'video', 'voice'\n    content : Union[str, bytes]\n        消息内容，根据消息类型可以是文字、图片、视频二进制数据等\n\n    Returns\n    ----------\n    : bool\n        发送消息操作是否成功\n    '''\n    pass\n```\n\n\n```tool-4\ndef local_memory.search(query: str, filters: dict) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n    filters : dict, optional\n        查询记忆的过滤条件\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.search_then_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个具备搜索引擎能力的问答模型，具备以下能力：\n1. 搜索实时信息并总结。如果用户问题涉及时效性信息，问答模型第一步通过搜索引擎检索信息，第二步对检索的多个信息进行汇总，生成回复；\n2. 问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的instruction和给定的参考references，生成正确、有用、安全的回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令/问题，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        返回的回复\n    '''\n    pass\n```",
        "query": "晚上到这家店吃饭，发微信给小明",
        "image": "mt-plan_30.png",
        "ground_truth": [
            {
                "id": 1,
                "name": "local_memory.search",
                "args": {
                    "query": "小明的微信联系方式"
                }
            },
            {
                "id": 2,
                "name": "wechat.send_message",
                "args": {
                    "recipient_id": "#E1",
                    "message_type": "text",
                    "content": "晚上一起吃饭，餐馆信息是： 肉本家·炭烤肉(耀江文鼎国际店), 地址: 西湖区古墩路651号文鼎财富大厦2号楼一层101、102、103"
                }
            }
        ],
        "plan_str": "SubTask1: 查询小明的微信联系方式\n#E1 = local_memory.search(query=\"小明的微信联系方式\")\nSubTask2: 将餐厅信息发送给小明\n#E2 = wechat.send_message(recipient_id=#E1, message_type=\"text\", content=\"晚上一起吃饭，餐馆信息是： 肉本家·炭烤肉(耀江文鼎国际店), 地址: 西湖区古墩路651号文鼎财富大厦2号楼一层101、102、103\")"
    },
    "query_31": {
        "meta": {
            "prompt_type": "ReWoo",
            "candidate_apis": {
                "apps": [
                    "local_memory",
                    "models",
                    "semantic_search"
                ],
                "selected_apis_name": [
                    "semantic_search.web_search",
                    "local_memory.search",
                    "models.general_response",
                    "models.creative_writing",
                    "models.math_qa",
                    "models.multimodal_qa"
                ]
            },
            "environment": {
                "datetime": "2025-02-09 星期日",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef semantic_search.web_search(query: str, count: int) -> List[str]:\n    '''\n    网页搜索，根据输入的query，在搜索引擎中查找相关页面，可用于查找人物、物品、体育赛事、事件相关的时效性信息，精确信息。\n\n    Parameters\n    ----------\n    query : str\n        用户搜索的关键词、短语、查询，该参数项不能为空。\n    count : int, optional\n        期望返回的搜索结果数量\n\n    Returns\n    ----------\n    : List[str]\n        搜索引擎返回的结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef local_memory.search(query: str, filters: dict) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n    filters : dict, optional\n        查询记忆的过滤条件\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```",
        "query": "前三个电影哪个适合带我爸去看",
        "image": "mt-plan_31.png",
        "ground_truth": [
            {
                "id": 1,
                "name": "local_memory.search",
                "args": {
                    "query": "爸爸的电影偏好"
                }
            },
            {
                "id": 2,
                "name": "semantic_search.web_search",
                "args": {
                    "query": "以下几部电影的介绍，风格类型分别是什么？\n\n电影： 那个不为人知的故事,\n毒液：最后一舞,\n火影忍者剧场版：忍者之路"
                }
            },
            {
                "id": 3,
                "name": "models.general_response",
                "args": {
                    "instruction": "评价哪个电影更适合带爸爸去看",
                    "references": [
                        "#E1",
                        "#E2"
                    ]
                }
            }
        ],
        "plan_str": "SubTask1: 查询用户爸爸的电影偏好\n#E1 = local_memory.search(query=\"爸爸的电影偏好\")\nSubTask2: 查询这3个电影的信息\n#E2 = semantic_search.web_search(query=\"以下几部电影的介绍，风格类型分别是什么？\\n\\n电影： 那个不为人知的故事,\\n毒液：最后一舞,\\n火影忍者剧场版：忍者之路\")\nSubTask3: 评价哪个电影更适合带爸爸去看\n#E3 = models.general_response(instruction=\"评价哪个电影更适合带爸爸去看\", references=[#E1, #E2])"
    },
    "query_32": {
        "meta": {
            "prompt_type": "ReWoo",
            "candidate_apis": {
                "apps": [
                    "models",
                    "wechat",
                    "notes"
                ],
                "selected_apis_name": [
                    "models.extract_information_from_text",
                    "notes.create_note",
                    "models.multimodal_qa",
                    "wechat.send_message"
                ]
            },
            "environment": {
                "datetime": "2024-05-17 星期五",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef notes.create_note(title: str, content: str, tags: List[str]) -> str:\n    '''\n    添加一条新的备忘录\n\n    Parameters\n    ----------\n    title : str, optional\n        备忘录标题\n    content : str\n        备忘录内容\n    tags : List[str], optional\n        备忘录标签\n\n    Returns\n    ----------\n    : str\n        创建成功的备忘录ID\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef wechat.send_message(recipient_id: str, message_type: str, content: Union[str, bytes]) -> bool:\n    '''\n    发送消息\n\n    Parameters\n    ----------\n    recipient_id : str\n        消息接收者ID\n    message_type : str\n        消息类型，如'text', 'image', 'video', 'voice'\n    content : Union[str, bytes]\n        消息内容，根据消息类型可以是文字、图片、视频二进制数据等\n\n    Returns\n    ----------\n    : bool\n        发送消息操作是否成功\n    '''\n    pass\n```",
        "query": "屏幕中信息添加到便签里",
        "image": "mt-plan_32.png",
        "ground_truth": [
            {
                "id": 1,
                "name": "notes.create_note",
                "args": {
                    "title": "重磅！OpenAI发布GPT-4o系统介绍！",
                    "content": "《GPT-4o System Card》披露了闭源##模型GPT-4o更多信息，这是由OpenAI开发的多模态自回归全知模型，能够处理文本、音频、图像和视频输入，并生成文本、音频和图像输出。模型介绍：🌟GPT-4o是一个端到端训练的模型，能够在文本、视觉和音频领域中处理所有输入和输出。它在响应音频输入方面与人类反应时间相近，平均响应时间为320毫秒。在文本和代码的英文处理上与GPT-4 Turbo性能相当，但在非英语文本处理上有显著提升，同时API速度更快，成本更低。模型数据和训练：🌟GPT-4o使用的数据包括公开可用数据和专有数据，涵盖网页数据、代码和数学数据以及多模态数据。在部署前，OpenAI评估并减轻了潜在风险，如信息伤害、偏见和歧视。风险识别、评估和缓解：🌟通过外部红队测试和专家评估，识别和结构化潜在风险，并构建缓解措施。红队测试分为四个阶段，涉及不同语言和地理背景的红队成员。评估方法：",
                    "tags": []
                }
            }
        ],
        "plan_str": "SubTask1: 将内容添和标题加到便签\n#E1 = notes.create_note(title=\"重磅！OpenAI发布GPT-4o系统介绍！\", content=\"《GPT-4o System Card》披露了闭源##模型GPT-4o更多信息，这是由OpenAI开发的多模态自回归全知模型，能够处理文本、音频、图像和视频输入，并生成文本、音频和图像输出。模型介绍：🌟GPT-4o是一个端到端训练的模型，能够在文本、视觉和音频领域中处理所有输入和输出。它在响应音频输入方面与人类反应时间相近，平均响应时间为320毫秒。在文本和代码的英文处理上与GPT-4 Turbo性能相当，但在非英语文本处理上有显著提升，同时API速度更快，成本更低。模型数据和训练：🌟GPT-4o使用的数据包括公开可用数据和专有数据，涵盖网页数据、代码和数学数据以及多模态数据。在部署前，OpenAI评估并减轻了潜在风险，如信息伤害、偏见和歧视。风险识别、评估和缓解：🌟通过外部红队测试和专家评估，识别和结构化潜在风险，并构建缓解措施。红队测试分为四个阶段，涉及不同语言和地理背景的红队成员。评估方法：\", tags=[])"
    },
    "query_33": {
        "meta": {
            "prompt_type": "ReWoo",
            "candidate_apis": {
                "apps": [
                    "models",
                    "semantic_search",
                    "wechat",
                    "notes"
                ],
                "selected_apis_name": [
                    "models.search_then_response",
                    "wechat.send_message",
                    "notes.create_note",
                    "semantic_search.web_search",
                    "models.general_response",
                    "models.creative_writing"
                ]
            },
            "environment": {
                "datetime": "2024-11-11 星期二",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef models.search_then_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个具备搜索引擎能力的问答模型，具备以下能力：\n1. 搜索实时信息并总结。如果用户问题涉及时效性信息，问答模型第一步通过搜索引擎检索信息，第二步对检索的多个信息进行汇总，生成回复；\n2. 问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的instruction和给定的参考references，生成正确、有用、安全的回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令/问题，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        返回的回复\n    '''\n    pass\n```\n\n\n```tool-2\ndef wechat.send_message(recipient_id: str, message_type: str, content: Union[str, bytes]) -> bool:\n    '''\n    发送消息\n\n    Parameters\n    ----------\n    recipient_id : str\n        消息接收者ID\n    message_type : str\n        消息类型，如'text', 'image', 'video', 'voice'\n    content : Union[str, bytes]\n        消息内容，根据消息类型可以是文字、图片、视频二进制数据等\n\n    Returns\n    ----------\n    : bool\n        发送消息操作是否成功\n    '''\n    pass\n```\n\n\n```tool-3\ndef notes.create_note(title: str, content: str, tags: List[str]) -> str:\n    '''\n    添加一条新的备忘录\n\n    Parameters\n    ----------\n    title : str, optional\n        备忘录标题\n    content : str\n        备忘录内容\n    tags : List[str], optional\n        备忘录标签\n\n    Returns\n    ----------\n    : str\n        创建成功的备忘录ID\n    '''\n    pass\n```\n\n\n```tool-4\ndef semantic_search.web_search(query: str, count: int) -> List[str]:\n    '''\n    网页搜索，根据输入的query，在搜索引擎中查找相关页面，可用于查找人物、物品、体育赛事、事件相关的时效性信息，精确信息。\n\n    Parameters\n    ----------\n    query : str\n        用户搜索的关键词、短语、查询，该参数项不能为空。\n    count : int, optional\n        期望返回的搜索结果数量\n\n    Returns\n    ----------\n    : List[str]\n        搜索引擎返回的结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```",
        "query": "识别这张名片的信息。然后找一下这个人的相关资料，把最终结果存到便签里。",
        "image": "mt-plan_33.jpg",
        "ground_truth": [
            {
                "id": 1,
                "name": "semantic_search.web_search",
                "args": {
                    "query": "供应商李三",
                    "count": "5"
                }
            },
            {
                "id": 2,
                "name": "models.creative_writing",
                "args": {
                    "instruction": "根据名片信息和搜索得到的个人信息，整理这个人的个人资料",
                    "references": [
                        "#E1",
                        "供应商李三\n138 0000 0001\n手机 | 北京移动"
                    ]
                }
            },
            {
                "id": 3,
                "name": "notes.create_note",
                "args": {
                    "title": "供应商李三 个人资料",
                    "content": "#E2",
                    "tags": [
                        "供应商李三 名片信息",
                        "个人资料"
                    ]
                }
            }
        ],
        "plan_str": "SubTask1: 搜索名片上人的相关资料\n#E1 = semantic_search.web_search(query=\"供应商李三\", count=5)\nSubTask2: 根据名片信息和搜索得到的个人信息，整理个人资料结果\n#E2 = models.creative_writing(instruction=\"根据名片信息和搜索得到的个人信息，整理这个人的个人资料\", references=[#E1, \"供应商李三\\n138 0000 0001\\n手机 | 北京 移动\"])\nSubTask3: 将名片信息和个人相关资料整理并存到便签里\n#E3 = notes.create_note(title=\"供应商李三 个人资料\", content=#E2, tags=[\"供应商李三 名片信息\", \"个人资料\"])"
    },
    "query_34": {
        "meta": {
            "prompt_type": "ReWoo",
            "candidate_apis": {
                "apps": [
                    "notes",
                    "local_memory",
                    "models",
                    "wechat",
                    "semantic_search"
                ],
                "selected_apis_name": [
                    "notes.create_note",
                    "models.search_then_response",
                    "wechat.send_message",
                    "semantic_search.web_search",
                    "local_memory.search",
                    "models.multimodal_qa"
                ]
            },
            "environment": {
                "datetime": "2023-06-09 星期五",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef notes.create_note(title: str, content: str, tags: List[str]) -> str:\n    '''\n    添加一条新的备忘录\n\n    Parameters\n    ----------\n    title : str, optional\n        备忘录标题\n    content : str\n        备忘录内容\n    tags : List[str], optional\n        备忘录标签\n\n    Returns\n    ----------\n    : str\n        创建成功的备忘录ID\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.search_then_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个具备搜索引擎能力的问答模型，具备以下能力：\n1. 搜索实时信息并总结。如果用户问题涉及时效性信息，问答模型第一步通过搜索引擎检索信息，第二步对检索的多个信息进行汇总，生成回复；\n2. 问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的instruction和给定的参考references，生成正确、有用、安全的回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令/问题，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        返回的回复\n    '''\n    pass\n```\n\n\n```tool-3\ndef wechat.send_message(recipient_id: str, message_type: str, content: Union[str, bytes]) -> bool:\n    '''\n    发送消息\n\n    Parameters\n    ----------\n    recipient_id : str\n        消息接收者ID\n    message_type : str\n        消息类型，如'text', 'image', 'video', 'voice'\n    content : Union[str, bytes]\n        消息内容，根据消息类型可以是文字、图片、视频二进制数据等\n\n    Returns\n    ----------\n    : bool\n        发送消息操作是否成功\n    '''\n    pass\n```\n\n\n```tool-4\ndef semantic_search.web_search(query: str, count: int) -> List[str]:\n    '''\n    网页搜索，根据输入的query，在搜索引擎中查找相关页面，可用于查找人物、物品、体育赛事、事件相关的时效性信息，精确信息。\n\n    Parameters\n    ----------\n    query : str\n        用户搜索的关键词、短语、查询，该参数项不能为空。\n    count : int, optional\n        期望返回的搜索结果数量\n\n    Returns\n    ----------\n    : List[str]\n        搜索引擎返回的结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef local_memory.search(query: str, filters: dict) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n    filters : dict, optional\n        查询记忆的过滤条件\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```",
        "query": "第一个手机怎么样？帮我写到备忘录。",
        "image": "mt-plan_34.png",
        "ground_truth": [
            {
                "id": 1,
                "name": "local_memory.search",
                "args": {
                    "query": "我对于手机的偏好是什么？"
                }
            },
            {
                "id": 2,
                "name": "models.search_then_response",
                "args": {
                    "instruction": "手机OPPO一加13信息 用机偏好：#E1"
                }
            },
            {
                "id": 3,
                "name": "notes.create_note",
                "args": {
                    "title": "手机一加13评价",
                    "content": "#E2",
                    "tags": [
                        "OPPO一加13评价",
                        "带个人偏好"
                    ]
                }
            }
        ],
        "plan_str": "SubTask1: 查询用户对手机的偏好\n#E1 = local_memory.search(query=\"我对于手机的偏好是什么？\")\nSubTask2: 结合用户偏好，搜索手机的信息\n#E2 = models.search_then_response(instruction=\"手机OPPO一加13信息 用机偏好：#E1\")\nSubTask3: 将评价结果写入备忘录\n#E3 = notes.create_note(title=\"手机一加13评价\", content=#E2, tags=[\"OPPO一加13评价\", \"带个人偏好\"])"
    },
    "query_35": {
        "meta": {
            "prompt_type": "ReWoo",
            "candidate_apis": {
                "apps": [
                    "models",
                    "wechat",
                    "semantic_search",
                    "local_memory"
                ],
                "selected_apis_name": [
                    "local_memory.search",
                    "wechat.send_message",
                    "semantic_search.web_search",
                    "models.search_then_response",
                    "models.general_response",
                    "models.date_qa"
                ]
            },
            "environment": {
                "datetime": "2024-06-08 星期六",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef local_memory.search(query: str, filters: dict) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n    filters : dict, optional\n        查询记忆的过滤条件\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef wechat.send_message(recipient_id: str, message_type: str, content: Union[str, bytes]) -> bool:\n    '''\n    发送消息\n\n    Parameters\n    ----------\n    recipient_id : str\n        消息接收者ID\n    message_type : str\n        消息类型，如'text', 'image', 'video', 'voice'\n    content : Union[str, bytes]\n        消息内容，根据消息类型可以是文字、图片、视频二进制数据等\n\n    Returns\n    ----------\n    : bool\n        发送消息操作是否成功\n    '''\n    pass\n```\n\n\n```tool-3\ndef semantic_search.web_search(query: str, count: int) -> List[str]:\n    '''\n    网页搜索，根据输入的query，在搜索引擎中查找相关页面，可用于查找人物、物品、体育赛事、事件相关的时效性信息，精确信息。\n\n    Parameters\n    ----------\n    query : str\n        用户搜索的关键词、短语、查询，该参数项不能为空。\n    count : int, optional\n        期望返回的搜索结果数量\n\n    Returns\n    ----------\n    : List[str]\n        搜索引擎返回的结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.search_then_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个具备搜索引擎能力的问答模型，具备以下能力：\n1. 搜索实时信息并总结。如果用户问题涉及时效性信息，问答模型第一步通过搜索引擎检索信息，第二步对检索的多个信息进行汇总，生成回复；\n2. 问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的instruction和给定的参考references，生成正确、有用、安全的回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令/问题，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        返回的回复\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef models.date_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长解答节假日、节气、是否上班、调休信息相关问题；也支持时间推理计算，如日期天数之差、离国庆节还有多久等。\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题，与节假日、节气、调休信息、日期推算相关\n    references : List[Union[List[str], str]]\n        提供的参考信息，能帮助解答问题，如当前日期、星期数等信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```",
        "query": "中间这个电影好看吗",
        "image": "mt-plan_35.png",
        "ground_truth": [
            {
                "id": 1,
                "name": "local_memory.search",
                "args": {
                    "query": "我对于电影的偏好是什么？"
                }
            },
            {
                "id": 2,
                "name": "semantic_search.web_search",
                "args": {
                    "query": "火影忍者剧场版：忍者之路 这个电影好看吗 电影介绍 评分 评论"
                }
            },
            {
                "id": 3,
                "name": "models.general_response",
                "args": {
                    "instruction": "根据用户对电影的偏好，电影本身的评分和评论，判断电影 火影忍者剧场版：忍者之路 是否好看",
                    "references": [
                        "#E1",
                        "#E2"
                    ]
                }
            }
        ],
        "plan_str": "SubTask1: 查询用户对电影的偏好\n#E1 = local_memory.search(query=\"我对于电影的偏好是什么？\")\nSubTask2: 查询该电影的评分和评论\n#E2 = semantic_search.web_search(query=\"火影忍者剧场版：忍者之路 这个电影好看吗 电影介绍 评分 评论\")\nSubTask3: 根据用户对电影的偏好、电影本身的评分和评论，判断电影是否好看\n#E3 = models.general_response(instruction=\"根据用户对电影的偏好，电影本身的评分和评论，判断电影 火影忍者剧场版：忍者之路 是否好看\", references=[#E1, #E2])"
    },
    "query_36": {
        "meta": {
            "prompt_type": "ReWoo",
            "candidate_apis": {
                "apps": [
                    "notes",
                    "models",
                    "semantic_search"
                ],
                "selected_apis_name": [
                    "semantic_search.web_search",
                    "models.creative_writing",
                    "models.multimodal_qa",
                    "notes.create_note",
                    "models.extract_information_from_text"
                ]
            },
            "environment": {
                "datetime": "2019-11-10 星期日",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef semantic_search.web_search(query: str, count: int) -> List[str]:\n    '''\n    网页搜索，根据输入的query，在搜索引擎中查找相关页面，可用于查找人物、物品、体育赛事、事件相关的时效性信息，精确信息。\n\n    Parameters\n    ----------\n    query : str\n        用户搜索的关键词、短语、查询，该参数项不能为空。\n    count : int, optional\n        期望返回的搜索结果数量\n\n    Returns\n    ----------\n    : List[str]\n        搜索引擎返回的结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef notes.create_note(title: str, content: str, tags: List[str]) -> str:\n    '''\n    添加一条新的备忘录\n\n    Parameters\n    ----------\n    title : str, optional\n        备忘录标题\n    content : str\n        备忘录内容\n    tags : List[str], optional\n        备忘录标签\n\n    Returns\n    ----------\n    : str\n        创建成功的备忘录ID\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```",
        "query": "图中排名前三的模型他们分别用了什么技术帮我在网上找一下，然后汇总整理存到便签。",
        "image": "mt-plan_36.png",
        "ground_truth": [
            {
                "id": 1,
                "name": "semantic_search.web_search",
                "args": {
                    "query": "模型：文心一言, 通义千问, 腾讯混元 \n\n上述模型使用的关键技术是什么",
                    "count": "5"
                }
            },
            {
                "id": 2,
                "name": "notes.create_note",
                "args": {
                    "title": "排名前三的模型所使用的技术",
                    "content": "#E1"
                }
            }
        ],
        "plan_str": "SubTask1: 根据识别到的模型，在网上搜索这些模型所使用的技术\n#E1 = semantic_search.web_search(query=\"模型：文心一言, 通义千问, 腾讯混元 \\n\\n上述模型使用的关键技术是什么\", count=5)\nSubTask2: 将整理的技术信息存到便签\n#E2 = notes.create_note(title=\"排名前三的模型所使用的技术\", content=#E1)"
    },
    "query_37": {
        "meta": {
            "prompt_type": "ReWoo",
            "candidate_apis": {
                "apps": [
                    "models"
                ],
                "selected_apis_name": [
                    "models.date_qa",
                    "models.search_then_response",
                    "models.math_qa",
                    "models.creative_writing"
                ]
            },
            "environment": {
                "datetime": "2022-01-15 星期六",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef models.date_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长解答节假日、节气、是否上班、调休信息相关问题；也支持时间推理计算，如日期天数之差、离国庆节还有多久等。\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题，与节假日、节气、调休信息、日期推算相关\n    references : List[Union[List[str], str]]\n        提供的参考信息，能帮助解答问题，如当前日期、星期数等信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.search_then_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个具备搜索引擎能力的问答模型，具备以下能力：\n1. 搜索实时信息并总结。如果用户问题涉及时效性信息，问答模型第一步通过搜索引擎检索信息，第二步对检索的多个信息进行汇总，生成回复；\n2. 问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的instruction和给定的参考references，生成正确、有用、安全的回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令/问题，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        返回的回复\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```",
        "query": "算一下表格中1 vs 0的胜和率",
        "image": "mt-plan_37.png",
        "ground_truth": [
            {
                "id": 1,
                "name": "models.math_qa",
                "args": {
                    "instruction": "计算“1的胜次数+平局数”除以总对局数的商，结果四舍五入保留两位小数",
                    "references": "1 0, win 10 7, tie 6 6, loss 7 10"
                }
            }
        ],
        "plan_str": "SubTask1: 根据从屏幕内容中识别到的1和0的对局胜败情况，计算1 vs 0的胜和率\n#E1 = models.math_qa(instruction=\"计算“1的胜次数+平局数”除以总对局数的商，结果四舍五入保留两位小数\", references=\"1 0, win 10 7, tie 6 6, loss 7 10\")"
    },
    "query_38": {
        "meta": {
            "prompt_type": "ReWoo",
            "candidate_apis": {
                "apps": [
                    "models",
                    "semantic_search",
                    "amap"
                ],
                "selected_apis_name": [
                    "models.multimodal_qa",
                    "amap.route_planning",
                    "semantic_search.web_search",
                    "models.creative_writing"
                ]
            },
            "environment": {
                "datetime": "2018-08-06 星期一",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef amap.route_planning(origin: str, destination: str, strategy: str) -> Dict:\n    '''\n    路线规划\n\n    Parameters\n    ----------\n    origin : str\n        起点坐标，经纬度用逗号分隔\n    destination : str\n        终点坐标，经纬度用逗号分隔\n    strategy : str, optional\n        路线规划策略，如最短时间，避开拥堵等\n\n    Returns\n    ----------\n    : Dict\n        返回路线规划信息，如路程时间、距离、途径点等\n    '''\n    pass\n```\n\n\n```tool-3\ndef semantic_search.web_search(query: str, count: int) -> List[str]:\n    '''\n    网页搜索，根据输入的query，在搜索引擎中查找相关页面，可用于查找人物、物品、体育赛事、事件相关的时效性信息，精确信息。\n\n    Parameters\n    ----------\n    query : str\n        用户搜索的关键词、短语、查询，该参数项不能为空。\n    count : int, optional\n        期望返回的搜索结果数量\n\n    Returns\n    ----------\n    : List[str]\n        搜索引擎返回的结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```",
        "query": "打车去图中这个会议地点要多久？我在华润前海大厦b座。",
        "image": "mt-plan_38.png",
        "ground_truth": [
            {
                "id": 1,
                "name": "amap.route_planning",
                "args": {
                    "origin": "广东省-深圳市-南山区-华润前海大厦b座",
                    "destination": "深圳市政务服务中心东厅",
                    "strategy": "驾车"
                }
            }
        ],
        "plan_str": "SubTask1: 使用地图软件查看从当前位置到会议地点的路线和预估时间，用户提到的出行方式是“打车”，因此出行方式是“驾车”\n#E1 = amap.route_planning(origin=\"广东省-深圳市-南山区-华润前海大厦b座\", destination=\"深圳市政务服务中心东厅\", strategy=\"驾车\")"
    },
    "query_39": {
        "meta": {
            "prompt_type": "ReWoo",
            "candidate_apis": {
                "apps": [
                    "models",
                    "semantic_search",
                    "notes"
                ],
                "selected_apis_name": [
                    "models.extract_information_from_text",
                    "notes.create_note",
                    "models.multimodal_qa",
                    "models.search_then_response",
                    "semantic_search.web_search"
                ]
            },
            "environment": {
                "datetime": "2021-08-31 星期二",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef notes.create_note(title: str, content: str, tags: List[str]) -> str:\n    '''\n    添加一条新的备忘录\n\n    Parameters\n    ----------\n    title : str, optional\n        备忘录标题\n    content : str\n        备忘录内容\n    tags : List[str], optional\n        备忘录标签\n\n    Returns\n    ----------\n    : str\n        创建成功的备忘录ID\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.search_then_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个具备搜索引擎能力的问答模型，具备以下能力：\n1. 搜索实时信息并总结。如果用户问题涉及时效性信息，问答模型第一步通过搜索引擎检索信息，第二步对检索的多个信息进行汇总，生成回复；\n2. 问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的instruction和给定的参考references，生成正确、有用、安全的回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令/问题，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        返回的回复\n    '''\n    pass\n```\n\n\n```tool-5\ndef semantic_search.web_search(query: str, count: int) -> List[str]:\n    '''\n    网页搜索，根据输入的query，在搜索引擎中查找相关页面，可用于查找人物、物品、体育赛事、事件相关的时效性信息，精确信息。\n\n    Parameters\n    ----------\n    query : str\n        用户搜索的关键词、短语、查询，该参数项不能为空。\n    count : int, optional\n        期望返回的搜索结果数量\n\n    Returns\n    ----------\n    : List[str]\n        搜索引擎返回的结果\n    '''\n    pass\n```",
        "query": "她有什么有名的歌曲？写到便签里",
        "image": "mt-plan_39.png",
        "ground_truth": [
            {
                "id": 1,
                "name": "semantic_search.web_search",
                "args": {
                    "query": "G.E.M. 邓紫棋 歌曲作品",
                    "count": "10"
                }
            },
            {
                "id": 2,
                "name": "notes.create_note",
                "args": {
                    "title": "G.E.M. 邓紫棋 歌曲作品",
                    "content": "#E1"
                }
            }
        ],
        "plan_str": "SubTask1: 搜索这个人的歌曲作品\n#E1 = semantic_search.web_search(query=\"G.E.M. 邓紫棋 歌曲作品\", count=10)\nSubTask2: 将整理后的歌曲信息写到便签里\n#E2 = notes.create_note(title=\"G.E.M. 邓紫棋 歌曲作品\", content=#E1)"
    },
    "query_40": {
        "meta": {
            "prompt_type": "ReWoo",
            "candidate_apis": {
                "apps": [
                    "models",
                    "local_memory"
                ],
                "selected_apis_name": [
                    "local_memory.search",
                    "models.search_then_response",
                    "models.creative_writing",
                    "models.math_qa"
                ]
            },
            "environment": {
                "datetime": "2020-12-07 星期一",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef local_memory.search(query: str, filters: dict) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n    filters : dict, optional\n        查询记忆的过滤条件\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.search_then_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个具备搜索引擎能力的问答模型，具备以下能力：\n1. 搜索实时信息并总结。如果用户问题涉及时效性信息，问答模型第一步通过搜索引擎检索信息，第二步对检索的多个信息进行汇总，生成回复；\n2. 问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的instruction和给定的参考references，生成正确、有用、安全的回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令/问题，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        返回的回复\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```",
        "query": "图中那个url地址里的主要内容帮我做个摘要",
        "image": "mt-plan_40.png",
        "ground_truth": [
            {
                "id": 1,
                "name": "models.search_then_response",
                "args": {
                    "instruction": "url地址：http://www.mod.gov.cn/gfbw/qwfb/yw_214049/16351021.html\n\n读取上述网址内容，告诉我网页中主要讲了什么"
                }
            }
        ],
        "plan_str": "SubTask1: 可以直接使用具备“搜索+总结”能力的工具获取该网址的内容，并进行总结\n#E1 = models.search_then_response(instruction=\"url地址：http://www.mod.gov.cn/gfbw/qwfb/yw_214049/16351021.html\\n\\n读取上述网址内容，告诉我网页中主要讲了什么\")"
    },
    "query_41": {
        "meta": {
            "prompt_type": "ReWoo",
            "candidate_apis": {
                "apps": [
                    "fansou"
                ],
                "selected_apis_name": [
                    "fansou.gaode_route_search",
                    "fansou.meituan_tickets_search",
                    "fansou.gaode_address_search",
                    "fansou.baidu_take_taxi"
                ]
            },
            "environment": {
                "datetime": "2018-03-04 星期日",
                "location": "黑龙江省-哈尔滨市-南岗区-大成街道"
            }
        },
        "api_descriptions": "```tool-1\ndef fansou.gaode_route_search(departure: str, destination: str, transMode: str) -> bool:\n    '''\n    通过高德地图查看路线。用户在某个位置寻求到其地点如家、公司或其他目的地的，某一种特定交通方式的线路，并让高德地图提供导航；如无明确交通方式，则只显示默认的交通方式的路线\n\n    Parameters\n    ----------\n    departure : str, optional\n        用户query中提到的，或者是屏幕中的地点名称，否则使用当前位置\n    destination : str\n        用户query中提到的，或者是屏幕中的地点名称\n    transMode : str, optional\n        用户query中提到的交通方式\n\n    Returns\n    ----------\n    : bool\n        是否执行成功\n    '''\n    pass\n```\n\n\n```tool-2\ndef fansou.meituan_tickets_search(keyword: str) -> bool:\n    '''\n    在美团APP中通过关键词搜索查找门票。任何页面；用户想在美团APP中按关键词查找指定营业场所的门票\n\n    Parameters\n    ----------\n    keyword : str\n        用户语义中提到的想搜索的关键词或表达\n\n    Returns\n    ----------\n    : bool\n        是否执行成功\n    '''\n    pass\n```\n\n\n```tool-3\ndef fansou.gaode_address_search(keyword: str) -> bool:\n    '''\n    在高德地图app中按名称搜索地点，查看指定位置的信息。任何页面；用户想要查看指定地点在地图上的位置\n\n    Parameters\n    ----------\n    keyword : str\n        用户query中提到的地点名称，或者是屏幕中的地点名称\n\n    Returns\n    ----------\n    : bool\n        是否执行成功\n    '''\n    pass\n```\n\n\n```tool-4\ndef fansou.baidu_take_taxi(keyword: str) -> bool:\n    '''\n    在百度地图app打车到指定地点。任何页面；用户想要打车前往指定地点\n\n    Parameters\n    ----------\n    keyword : str\n        用户query中提到的，或者是屏幕中的地点名称\n\n    Returns\n    ----------\n    : bool\n        是否执行成功\n    '''\n    pass\n```",
        "query": "我想去这里",
        "image": "mt-plan_41.png",
        "ground_truth": [
            {
                "id": 1,
                "name": "fansou.gaode_route_search",
                "args": {
                    "departure": "黑龙江省-哈尔滨市-南岗区-大成街道",
                    "destination": "深圳大学粤海校区",
                    "transMode": "驾车"
                }
            }
        ],
        "plan_str": "SubTask1: 使用高德地图查看路线，由于用户未提到出行方式，且距离较远，此处默认使用“驾车”\n#E1 = fansou.gaode_route_search(departure=\"黑龙江省-哈尔滨市-南岗区-大成街道\", destination=\"深圳大学粤海校区\", transMode=\"驾车\")"
    },
    "query_42": {
        "meta": {
            "prompt_type": "ReWoo",
            "candidate_apis": {
                "apps": [
                    "models",
                    "fansou"
                ],
                "selected_apis_name": [
                    "models.multimodal_qa",
                    "fansou.gaode_nearby_search",
                    "fansou.baidu_address_search",
                    "fansou.gaode_address_search"
                ]
            },
            "environment": {
                "datetime": "2019-05-18 星期六",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef fansou.gaode_nearby_search(keyword: str, address: str) -> bool:\n    '''\n    用户通过高德地图搜索指定地点周边关键POI, 优先使用用户query中提到的地点名称或者屏幕中的地点名称，否则使用当前位置。任何页面；用户需要利用高德地图搜索指定地点周边POI时\n\n    Parameters\n    ----------\n    keyword : str\n        用户query中提到的关键词，可以是服务、场所等，例如银行、停车场、饭店等\n    address : str\n        优先使用用户query中提到的地点名称或者屏幕中的地点名称，否则使用用户当前位置\n\n    Returns\n    ----------\n    : bool\n        是否执行成功\n    '''\n    pass\n```\n\n\n```tool-3\ndef fansou.baidu_address_search(keyword: str) -> bool:\n    '''\n    在百度地图app打车到指定地点。任何页面；用户想要打车前往指定地点\n\n    Parameters\n    ----------\n    keyword : str\n        用户query中提到的，或者是屏幕中的地点名称\n\n    Returns\n    ----------\n    : bool\n        是否执行成功\n    '''\n    pass\n```\n\n\n```tool-4\ndef fansou.gaode_address_search(keyword: str) -> bool:\n    '''\n    在高德地图app中按名称搜索地点，查看指定位置的信息。任何页面；用户想要查看指定地点在地图上的位置\n\n    Parameters\n    ----------\n    keyword : str\n        用户query中提到的地点名称，或者是屏幕中的地点名称\n\n    Returns\n    ----------\n    : bool\n        是否执行成功\n    '''\n    pass\n```",
        "query": "用高德搜下图中位置附近的银行",
        "image": "mt-plan_42.png",
        "ground_truth": [
            {
                "id": 1,
                "name": "fansou.gaode_nearby_search",
                "args": {
                    "keyword": "银行",
                    "address": "深圳大学粤海校区"
                }
            }
        ],
        "plan_str": "SubTask1: 使用高德地图搜索该地点附近的银行\n#E1 = fansou.gaode_nearby_search(keyword=\"银行\", address=\"深圳大学粤海校区\")"
    },
    "query_43": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "amap",
                    "notes"
                ],
                "selected_apis_name": [
                    "notes.list_notes",
                    "amap.get_nearby_parking",
                    "notes.edit_note",
                    "amap.get_traffic_info",
                    "notes.search_notes",
                    "amap.get_current_location",
                    "notes.delete_note",
                    "notes.create_note",
                    "amap.route_planning",
                    "amap.search_poi"
                ]
            },
            "environment": {
                "datetime": "2024年08月23日 星期五",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef notes.list_notes(filter: str, sort_by: str) -> List[str]:\n    '''\n    获取所有备忘录的列表\n\n    Parameters\n    ----------\n    filter : str, optional\n        过滤条件，如标签、日期等\n    sort_by : str, optional\n        排序条件，如时间、标题等\n\n    Returns\n    ----------\n    : List[str]\n        备忘录ID的列表，每个ID可以链接到笔记的详细信息\n    '''\n    pass\n```\n\n\n```tool-2\ndef amap.get_nearby_parking(location: str) -> List[Dict]:\n    '''\n    获取附近的停车场信息\n\n    Parameters\n    ----------\n    location : str\n        当前位置坐标，经纬度用逗号分隔\n\n    Returns\n    ----------\n    : List[Dict]\n        返回附近的停车场列表，每个停车场包含名称、地址、距离等信息\n    '''\n    pass\n```\n\n\n```tool-3\ndef notes.edit_note(note_id: str, title: str, content: str, tags: List[str]) -> bool:\n    '''\n    编辑已有的备忘录\n\n    Parameters\n    ----------\n    note_id : str\n        备忘录ID\n    title : str, optional\n        新的备忘录标题\n    content : str\n        新的备忘录内容\n    tags : List[str], optional\n        新的备忘录标签\n\n    Returns\n    ----------\n    : bool\n        编辑操作是否成功\n    '''\n    pass\n```\n\n\n```tool-4\ndef amap.get_traffic_info(city: str) -> Dict:\n    '''\n    获取实时路况\n\n    Parameters\n    ----------\n    city : str\n        城市名\n\n    Returns\n    ----------\n    : Dict\n        返回实时路况信息，如拥堵程度、事故等\n    '''\n    pass\n```\n\n\n```tool-5\ndef notes.search_notes(query: str) -> List[str]:\n    '''\n    根据关键词搜索备忘录\n\n    Parameters\n    ----------\n    query : str\n        搜索关键词\n\n    Returns\n    ----------\n    : List[str]\n        搜索结果，符合条件的备忘录ID列表\n    '''\n    pass\n```\n\n\n```tool-6\ndef amap.get_current_location() -> Dict[str, float]:\n    '''\n    获取当前位置\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : Dict[str, float]\n        返回当前的经纬度坐标\n    '''\n    pass\n```\n\n\n```tool-7\ndef notes.delete_note(note_id: str) -> bool:\n    '''\n    删除指定ID的备忘录\n\n    Parameters\n    ----------\n    note_id : str\n        备忘录ID\n\n    Returns\n    ----------\n    : bool\n        删除操作是否成功\n    '''\n    pass\n```\n\n\n```tool-8\ndef notes.create_note(title: str, content: str, tags: List[str]) -> str:\n    '''\n    添加一条新的备忘录\n\n    Parameters\n    ----------\n    title : str, optional\n        备忘录标题\n    content : str\n        备忘录内容\n    tags : List[str], optional\n        备忘录标签\n\n    Returns\n    ----------\n    : str\n        创建成功的备忘录ID\n    '''\n    pass\n```\n\n\n```tool-9\ndef amap.route_planning(origin: str, destination: str, strategy: str) -> Dict:\n    '''\n    路线规划\n\n    Parameters\n    ----------\n    origin : str\n        起点坐标，经纬度用逗号分隔\n    destination : str\n        终点坐标，经纬度用逗号分隔\n    strategy : str, optional\n        路线规划策略，如最短时间，避开拥堵等\n\n    Returns\n    ----------\n    : Dict\n        返回路线规划信息，如路程时间、距离、途径点等\n    '''\n    pass\n```\n\n\n```tool-10\ndef amap.search_poi(keywords: str, city: str, types: str) -> List[Dict]:\n    '''\n    搜索地点\n\n    Parameters\n    ----------\n    keywords : str\n        搜索关键词\n    city : str, optional\n        城市名\n    types : str, optional\n        搜索POI类型，如餐馆，酒店等\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的地点列表，每个地点包含名称、地址、坐标等信息\n    '''\n    pass\n```",
        "query": "帮我找到便签里的地址，查找最快到达的路线",
        "ground_truth": [
            {
                "id": 1,
                "name": "notes.search_notes",
                "args": {
                    "query": "地址"
                }
            },
            {
                "id": 2,
                "name": "amap.search_poi",
                "args": {
                    "keywords": "#E1"
                }
            },
            {
                "id": 3,
                "name": "amap.get_current_location",
                "args": {}
            },
            {
                "id": 4,
                "name": "amap.route_planning",
                "args": {
                    "origin": "#E3",
                    "destination": "#E2",
                    "strategy": " \"最快到达\""
                }
            }
        ],
        "plan_str": "SubTask1: 搜索便签中记录的地址\n#E1 = notes.search_notes(query=\"地址\")\nSubTask2: 获取目的地位置\n#E2 = amap.search_poi(keywords=#E1)\nSubTask3: 获取当前位置\n#E3 = amap.get_current_location()\nSubtask4: 查找最快到达的路线\n#E4 = amap.route_planning(origin=#E3, destination=#E2,strategy= \"最快到达\")"
    },
    "query_44": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "weather",
                    "calendar_app"
                ],
                "selected_apis_name": [
                    "weather.get_air_quality_index",
                    "calendar_app.set_event_reminder",
                    "calendar_app.set_recurring_event",
                    "calendar_app.search_events",
                    "calendar_app.create_event",
                    "weather.get_date_weather_info",
                    "weather.get_weather_alerts",
                    "weather.get_life_index",
                    "weather.get_multiple_location_weather",
                    "calendar_app.list_events"
                ]
            },
            "environment": {
                "datetime": "2024年08月21日 星期三",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef weather.get_air_quality_index(location: str) -> int:\n    '''\n    显示空气质量指数\n\n    Parameters\n    ----------\n    location : str\n        查询空气质量的地点\n\n    Returns\n    ----------\n    : int\n        空气质量指数（AQI）值\n    '''\n    pass\n```\n\n\n```tool-2\ndef calendar_app.set_event_reminder(event_id: str, reminder_time: str, reminder_method: str) -> bool:\n    '''\n    设置事件提醒和通知\n\n    Parameters\n    ----------\n    event_id : str\n        事件ID\n    reminder_time : str\n        提醒时间（ISO格式）\n    reminder_method : str\n        提醒方式，例如'email', 'popup'\n\n    Returns\n    ----------\n    : bool\n        设置提醒操作是否成功\n    '''\n    pass\n```\n\n\n```tool-3\ndef calendar_app.set_recurring_event(event_id: str, recurrence_rule: str) -> bool:\n    '''\n    设置重复事件\n\n    Parameters\n    ----------\n    event_id : str\n        事件ID\n    recurrence_rule : str\n        重复规则，例如'每周一重复'\n\n    Returns\n    ----------\n    : bool\n        设置重复事件操作是否成功\n    '''\n    pass\n```\n\n\n```tool-4\ndef calendar_app.search_events(query: str) -> List[Dict[str, Union[str, List[str]]]]:\n    '''\n    搜索事件和日程安排\n\n    Parameters\n    ----------\n    query : str\n        搜索关键词\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, List[str]]]]\n        搜索结果，符合条件的事件列表\n    '''\n    pass\n```\n\n\n```tool-5\ndef calendar_app.create_event(title: str, start_time: str, end_time: str, location: str, description: str, attendees: List[str]) -> str:\n    '''\n    创建新的事件\n\n    Parameters\n    ----------\n    title : str\n        事件标题\n    start_time : str\n        事件开始时间（ISO格式）\n    end_time : str\n        事件结束时间（ISO格式）\n    location : str, optional\n        事件地点\n    description : str, optional\n        事件描述\n    attendees : List[str], optional\n        事件参与者邮箱列表\n\n    Returns\n    ----------\n    : str\n        创建成功的事件ID\n    '''\n    pass\n```\n\n\n```tool-6\ndef weather.get_date_weather_info(location: str, start_date: str, end_date: str) -> List[Dict[str, Union[str, int, float]]]:\n    '''\n    查询指定日期区间的天气预报\n\n    Parameters\n    ----------\n    location : str\n        查询天气预报的地点\n    start_date : str\n        查询的的开始日期，格式xxxx-xx-xx\n    end_date : str\n        查询的的结束日期，格式xxxx-xx-xx\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, int, float]]]\n        指定日期和地点的天气信息，包括温度、湿度、风速等\n    '''\n    pass\n```\n\n\n```tool-7\ndef weather.get_weather_alerts(location: str) -> List[str]:\n    '''\n    接收天气预警通知\n\n    Parameters\n    ----------\n    location : str\n        查询天气预警的地点\n\n    Returns\n    ----------\n    : List[str]\n        天气预警信息列表\n    '''\n    pass\n```\n\n\n```tool-8\ndef weather.get_life_index(location: str) -> Dict[str, str]:\n    '''\n    提供生活指数建议\n\n    Parameters\n    ----------\n    location : str\n        查询生活指数的地点\n\n    Returns\n    ----------\n    : Dict[str, str]\n        生活建议，如穿衣建议、运动建议等\n    '''\n    pass\n```\n\n\n```tool-9\ndef weather.get_multiple_location_weather(locations: List[str]) -> Dict[str, Dict[str, Union[str, int, float]]]:\n    '''\n    支持多区域天气查询\n\n    Parameters\n    ----------\n    locations : List[str]\n        查询天气的多个地点\n\n    Returns\n    ----------\n    : Dict[str, Dict[str, Union[str, int, float]]]\n        每个地点的当前天气信息\n    '''\n    pass\n```\n\n\n```tool-10\ndef calendar_app.list_events(start_time: str, end_time: str, filter: str, sort_by: str) -> List[Dict[str, Union[str, List[str]]]]:\n    '''\n    获取所有事件的列表\n\n    Parameters\n    ----------\n    start_time : str\n        查询事件的开始时间（ISO格式）\n    end_time : str\n        查询事件的结束时间（ISO格式）\n    filter : str, optional\n        过滤条件，如地点、参与者等\n    sort_by : str, optional\n        排序条件，如时间、标题等\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, List[str]]]]\n        事件的列表，每个事件包含详细信息\n    '''\n    pass\n```",
        "query": "我后天下午2点要去杭州参加会议，为我记录日程，设置会议半小时前的时钟，并查询后天杭州的天气",
        "ground_truth": [
            {
                "id": 1,
                "name": "calendar_app.create_event",
                "args": {
                    "title": "参加会议",
                    "start_time": "2024-08-23T14:00:00",
                    "end_time": "2024-08-23T16:00:00",
                    "location": "杭州",
                    "description": "参加会议",
                    "attendees": []
                }
            },
            {
                "id": 2,
                "name": "calendar_app.set_event_reminder",
                "args": {
                    "event_id": "#E1",
                    "reminder_time": "2024-08-23T13:30:00",
                    "reminder_method": "popup"
                }
            },
            {
                "id": 3,
                "name": "weather.get_date_weather_info",
                "args": {
                    "location": "杭州",
                    "start_date": "2024-08-23",
                    "end_date": "2024-08-23"
                }
            }
        ],
        "plan_str": "SubTask1: 创建一个新的会议事件，记录用户的日程安排\n#E1 = calendar_app.create_event(title=\"参加会议\", start_time=\"2024-08-23T14:00:00\", end_time=\"2024-08-23T16:00:00\", location=\"杭州\", description=\"参加会议\", attendees=[])\n\nSubTask2: 设置会议半小时前的提醒\n#E2 = calendar_app.set_event_reminder(event_id=#E1, reminder_time=\"2024-08-23T13:30:00\", reminder_method=\"popup\")\n\nSubTask3: 查询后天杭州的天气\n#E3 = weather.get_date_weather_info(location=\"杭州\", start_date=\"2024-08-23\", end_date=\"2024-08-23\")"
    },
    "query_45": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "semantic_search",
                    "models",
                    "calendar_app"
                ],
                "selected_apis_name": [
                    "semantic_search.personal_context_search",
                    "calendar_app.invite_attendees",
                    "calendar_app.create_event",
                    "models.extract_information_from_text",
                    "models.creative_writing",
                    "calendar_app.search_events",
                    "semantic_search.web_search",
                    "models.date_qa",
                    "calendar_app.list_events",
                    "models.image_search"
                ]
            },
            "environment": {
                "datetime": "2024年08月15日 星期四",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef semantic_search.personal_context_search(query: str) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef calendar_app.invite_attendees(event_id: str, attendees: List[str]) -> bool:\n    '''\n    邀请他人参加事件\n\n    Parameters\n    ----------\n    event_id : str\n        事件ID\n    attendees : List[str]\n        参与者邮箱列表\n\n    Returns\n    ----------\n    : bool\n        邀请操作是否成功\n    '''\n    pass\n```\n\n\n```tool-3\ndef calendar_app.create_event(title: str, start_time: str, end_time: str, location: str, description: str, attendees: List[str]) -> str:\n    '''\n    创建新的事件\n\n    Parameters\n    ----------\n    title : str\n        事件标题\n    start_time : str\n        事件开始时间（ISO格式）\n    end_time : str\n        事件结束时间（ISO格式）\n    location : str, optional\n        事件地点\n    description : str, optional\n        事件描述\n    attendees : List[str], optional\n        事件参与者邮箱列表\n\n    Returns\n    ----------\n    : str\n        创建成功的事件ID\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef calendar_app.search_events(query: str) -> List[Dict[str, Union[str, List[str]]]]:\n    '''\n    搜索事件和日程安排\n\n    Parameters\n    ----------\n    query : str\n        搜索关键词\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, List[str]]]]\n        搜索结果，符合条件的事件列表\n    '''\n    pass\n```\n\n\n```tool-7\ndef semantic_search.web_search(query: str, count: int) -> List[str]:\n    '''\n    网页搜索，根据输入的query，在搜索引擎中查找相关页面，可用于查找人物、物品、体育赛事、事件相关的时效性信息，精确信息。\n\n    Parameters\n    ----------\n    query : str\n        用户搜索的关键词、短语、查询，该参数项不能为空。\n    count : int, optional\n        期望返回的搜索结果数量\n\n    Returns\n    ----------\n    : List[str]\n        搜索引擎返回的结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.date_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长解答节假日、节气、是否上班、调休信息相关问题；也支持时间推理计算，如日期天数之差、离国庆节还有多久等。\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题，与节假日、节气、调休信息、日期推算相关\n    references : List[Union[List[str], str]]\n        提供的参考信息，能帮助解答问题，如当前日期、星期数等信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef calendar_app.list_events(start_time: str, end_time: str, filter: str, sort_by: str) -> List[Dict[str, Union[str, List[str]]]]:\n    '''\n    获取所有事件的列表\n\n    Parameters\n    ----------\n    start_time : str\n        查询事件的开始时间（ISO格式）\n    end_time : str\n        查询事件的结束时间（ISO格式）\n    filter : str, optional\n        过滤条件，如地点、参与者等\n    sort_by : str, optional\n        排序条件，如时间、标题等\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, List[str]]]]\n        事件的列表，每个事件包含详细信息\n    '''\n    pass\n```\n\n\n```tool-10\ndef models.image_search(image_url: str) -> str:\n    '''\n    一个基于给定的图片搜索图中事物相关信息的模型，该模型的能力包括：\n1. 搜索著名人物的身份、经历，包括明星、政客、历史人物、体育明星等；\n2. 识别图像中动物/植物的品种；\n3. 识别照片中地点或景点的名称和地址。\n\n    Parameters\n    ----------\n    image_url : str\n        给定图片地址，将搜索该图片中的人、动植物或地点的相关信息\n\n    Returns\n    ----------\n    : str\n        图片中事物的相关信息\n    '''\n    pass\n```",
        "query": "万象汇年卡还有多久到期？到期前一周的周六提醒我去柜台办理升级",
        "ground_truth": [
            {
                "id": 1,
                "name": "semantic_search.personal_context_search",
                "args": {
                    "query": "万象汇年卡到期日期"
                }
            },
            {
                "id": 2,
                "name": "models.date_qa",
                "args": {
                    "instruction": "计算万象汇年卡到期前一周的日期",
                    "references": [
                        "#E1"
                    ]
                }
            },
            {
                "id": 3,
                "name": "models.data_qa",
                "args": {
                    "instruction": "日期 #E2 到日期 #E1 之间，哪一天是周六？"
                }
            },
            {
                "id": 4,
                "name": "calendar_app.create_event",
                "args": {
                    "title": "去柜台办理万象汇年卡升级",
                    "start_time": "#E3",
                    "end_time": "#E3"
                }
            }
        ],
        "plan_str": "SubTask1: 搜索万象汇年卡的到期日期\n#E1 = semantic_search.personal_context_search(query=\"万象汇年卡到期日期\")\n\nSubTask2: 计算到期前一周的日期\n#E2 = models.date_qa(instruction=\"计算万象汇年卡到期前一周的日期\", references=[#E1])\n\nSubTask3: 找到到期前一周的周六的日期\n#E3 = models.data_qa(instruction=\"日期 #E2 到日期 #E1 之间，哪一天是周六？\")\n\nSubTask4: 设置提醒在到期前一周的周六去柜台办理升级\n#E4 = calendar_app.create_event(title=\"去柜台办理万象汇年卡升级\", start_time=#E3, end_time=#E3)"
    },
    "query_46": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "semantic_search",
                    "messages",
                    "phone",
                    "models"
                ],
                "selected_apis_name": [
                    "semantic_search.personal_context_search",
                    "messages.send_media_message",
                    "models.code_qa",
                    "models.extract_information_from_text",
                    "messages.delete_message",
                    "phone.reject_call",
                    "messages.send_text_message",
                    "phone.view_call_log",
                    "phone.manage_contacts",
                    "messages.set_notifications"
                ]
            },
            "environment": {
                "datetime": "2019年02月18日 星期一",
                "location": "湖南省永州市"
            }
        },
        "api_descriptions": "```tool-1\ndef semantic_search.personal_context_search(query: str) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef messages.send_media_message(recipient: List[str], title: str, media_url: str) -> str:\n    '''\n    发送多媒体消息\n\n    Parameters\n    ----------\n    recipient : List[str]\n        接收者的电话号码\n    title : str, optional\n        消息标题\n    media_url : str\n        多媒体文件的地址(URL)\n\n    Returns\n    ----------\n    : str\n        消息ID\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.code_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长代码生成、代码解释、代码调试、代码语言转换、代码优化、代码识别等代码程序相关任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与代码、程序相关。\n    references : List[Union[List[str], str]]\n        应答代码相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef messages.delete_message(message_id: str) -> bool:\n    '''\n    删除指定ID的消息\n\n    Parameters\n    ----------\n    message_id : str\n        消息ID\n\n    Returns\n    ----------\n    : bool\n        删除操作是否成功\n    '''\n    pass\n```\n\n\n```tool-6\ndef phone.reject_call(call_id: str) -> bool:\n    '''\n    拒接电话\n\n    Parameters\n    ----------\n    call_id : str\n        来电的唯一标识ID\n\n    Returns\n    ----------\n    : bool\n        拒接电话操作是否成功\n    '''\n    pass\n```\n\n\n```tool-7\ndef messages.send_text_message(recipient: List[str], title: str, message: str) -> str:\n    '''\n    发送文本消息\n\n    Parameters\n    ----------\n    recipient : List[str]\n        接收者的电话号码\n    title : str, optional\n        文本消息标题\n    message : str\n        文本消息的内容\n\n    Returns\n    ----------\n    : str\n        消息ID\n    '''\n    pass\n```\n\n\n```tool-8\ndef phone.view_call_log(filter: str) -> List[Dict[str, Union[str, int]]]:\n    '''\n    查看通话记录\n\n    Parameters\n    ----------\n    filter : str, optional\n        过滤条件，如时间范围、联系人等\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, int]]]\n        符合条件的通话记录列表\n    '''\n    pass\n```\n\n\n```tool-9\ndef phone.manage_contacts(action: str, contact_info: Optional[Dict[str, str]]) -> Union[List[Dict[str, str]], bool]:\n    '''\n    管理联系人\n\n    Parameters\n    ----------\n    action : str\n        操作类型，例如'add', 'delete', 'update', 'view'\n    contact_info : Optional[Dict[str, str]], optional\n        联系人信息，仅在添加或更新时需要\n\n    Returns\n    ----------\n    : Union[List[Dict[str, str]], bool]\n        联系人信息列表，或联系人管理操作是否成功\n    '''\n    pass\n```\n\n\n```tool-10\ndef messages.set_notifications() -> bool:\n    '''\n    开启消息通知\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : bool\n        操作是否成功的布尔值\n    '''\n    pass\n```",
        "query": "将刚刚给我打电话的号码新建联系人，名字为张飞。然后将这个号码发给我妈妈，告诉她这是去内蒙古旅游的导游。",
        "ground_truth": [
            {
                "id": 1,
                "name": "phone.view_call_log",
                "args": {
                    "filter": "最近一次通话"
                }
            },
            {
                "id": 2,
                "name": "models.extract_information_from_text",
                "args": {
                    "instruction": "提取通话记录中的电话号码",
                    "text": "#E1"
                }
            },
            {
                "id": 3,
                "name": "phone.manage_contacts",
                "args": {
                    "action": "add",
                    "contact_info": {
                        "name": "张飞",
                        "phone_number": "#E2"
                    }
                }
            },
            {
                "id": 4,
                "name": "semantic_search.personal_context_search",
                "args": {
                    "query": "妈妈的手机号"
                }
            },
            {
                "id": 5,
                "name": "messages.send_text_message",
                "args": {
                    "recipient": [
                        "#E4"
                    ],
                    "title": "张飞",
                    "message": "这是去内蒙古旅游的导游，电话号码：#E2"
                }
            }
        ],
        "plan_str": "SubTask1: 获取最新的通话记录\n#E1 = phone.view_call_log(filter=\"最近一次通话\")\nSubTask2: 从通话记录中提取电话号码\n#E2 = models.extract_information_from_text(instruction=\"提取通话记录中的电话号码\", text=#E1)\nSubTask3: 将提取到的号码新建联系人，命名为张飞\n#E3 = phone.manage_contacts(action=\"add\", contact_info={\"name\": \"张飞\", \"phone_number\": #E2})\nSubTask4: 获取妈妈的联系方式\n#E4 = semantic_search.personal_context_search(query=\"妈妈的手机号\")\nSubTask5: 将张飞的号码发送给妈妈\n#E5 = messages.send_text_message(recipient=[#E4], title=\"张飞\", message=\"这是去内蒙古旅游的导游，电话号码：#E2\") \n"
    },
    "query_47": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "semantic_search",
                    "models"
                ],
                "selected_apis_name": [
                    "models.general_response",
                    "models.code_qa",
                    "models.directly_answer",
                    "models.scan_image_then_extract_information",
                    "models.math_qa",
                    "models.safety_response",
                    "models.multimodal_qa",
                    "models.date_qa",
                    "semantic_search.web_search",
                    "models.extract_information_from_text"
                ]
            },
            "environment": {
                "datetime": "2021年01月10日 星期日",
                "location": "甘肃省陇南市"
            }
        },
        "api_descriptions": "```tool-1\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.code_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长代码生成、代码解释、代码调试、代码语言转换、代码优化、代码识别等代码程序相关任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与代码、程序相关。\n    references : List[Union[List[str], str]]\n        应答代码相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.directly_answer(answer: str) -> str:\n    '''\n    你可以通过这个工具直接回答问题。例如以下情况，你可以直接回答：\n1. 用户的问题属于简单闲聊类，如问候语、询问人设信息等；\n2. 用户问题的答案可以直接从屏幕图片中获取，如图片中的文字、颜色、数量等显式信息。\n\n    Parameters\n    ----------\n    answer : str\n        answer\n\n    Returns\n    ----------\n    : str\n        问题答案\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.scan_image_then_extract_information(instruction: str, image_url: str) -> str:\n    '''\n    擅长从给定(手机屏幕)图片中抽取需要的信息，例如从手机/PC等设备屏幕上抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将从该图片中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef models.safety_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长回应与安全价值观相关的问题，用于直接回答黄赌毒、性别歧视、社会和谐、道德伦理、涉政、宗教、和恶意引导/诱导相关的用户请求。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题存在安全价值观风险，如黄赌毒、涉政、宗教、或恶意引导。\n    references : List[Union[List[str], str]]\n        应答安全价值观相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的安全且友好的回复结果\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.date_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长解答节假日、节气、是否上班、调休信息相关问题；也支持时间推理计算，如日期天数之差、离国庆节还有多久等。\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题，与节假日、节气、调休信息、日期推算相关\n    references : List[Union[List[str], str]]\n        提供的参考信息，能帮助解答问题，如当前日期、星期数等信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef semantic_search.web_search(query: str, count: int) -> List[str]:\n    '''\n    网页搜索，根据输入的query，在搜索引擎中查找相关页面，可用于查找人物、物品、体育赛事、事件相关的时效性信息，精确信息。\n\n    Parameters\n    ----------\n    query : str\n        用户搜索的关键词、短语、查询，该参数项不能为空。\n    count : int, optional\n        期望返回的搜索结果数量\n\n    Returns\n    ----------\n    : List[str]\n        搜索引擎返回的结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```",
        "query": "黑神话悟空是哪个公司开发的，什么时候可以开始玩",
        "ground_truth": [
            {
                "id": 1,
                "name": "semantic_search.web_search",
                "args": {
                    "query": "黑神话悟空是哪个公司开发的"
                }
            },
            {
                "id": 2,
                "name": "semantic_search.web_search",
                "args": {
                    "query": "黑神话悟空什么时候可以开始玩"
                }
            },
            {
                "id": 3,
                "name": "models.general_response",
                "args": {
                    "instruction": "汇总黑神话悟空的开发公司和开放时间",
                    "references": [
                        "#E1",
                        "#E2"
                    ]
                }
            }
        ],
        "plan_str": "SubTask1: 查找黑神话悟空是哪个公司开发的\n#E1 = semantic_search.web_search(query=\"黑神话悟空是哪个公司开发的\")\nSubTask2: 查找黑神话悟空什么时候可以开始玩\n#E2 = semantic_search.web_search(query=\"黑神话悟空什么时候可以开始玩\")\nSubTask3: 汇总结果\n#E3 = models.general_response(instruction=\"汇总黑神话悟空的开发公司和开放时间\", references=[#E1, #E2])"
    },
    "query_48": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "semantic_search",
                    "mail"
                ],
                "selected_apis_name": [
                    "mail.send_email",
                    "mail.receive_email",
                    "mail.manage_email",
                    "mail.search_email",
                    "mail.get_email_notifications",
                    "mail.add_attachment",
                    "mail.switch_account",
                    "semantic_search.web_search",
                    "semantic_search.personal_context_search",
                    "mail.set_email_filter"
                ]
            },
            "environment": {
                "datetime": "2022年06月09日 星期四",
                "location": "甘肃省甘南藏族自治州"
            }
        },
        "api_descriptions": "```tool-1\ndef mail.send_email(to: List[str], subject: str, body: str, attachments: List[str]) -> str:\n    '''\n    发送邮件\n\n    Parameters\n    ----------\n    to : List[str]\n        收件人的邮箱地址列表\n    subject : str\n        邮件主题\n    body : str\n        邮件内容\n    attachments : List[str], optional\n        附件文件路径列表\n\n    Returns\n    ----------\n    : str\n        发送成功的邮件ID\n    '''\n    pass\n```\n\n\n```tool-2\ndef mail.receive_email(filter: str) -> List[Dict[str, Union[str, int, List[str]]]]:\n    '''\n    接收邮件\n\n    Parameters\n    ----------\n    filter : str, optional\n        过滤条件，如发件人、主题等\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, int, List[str]]]]\n        符合条件的邮件列表\n    '''\n    pass\n```\n\n\n```tool-3\ndef mail.manage_email(email_id: str, action: str) -> bool:\n    '''\n    标记、分类和归档邮件\n\n    Parameters\n    ----------\n    email_id : str\n        要操作的邮件ID\n    action : str\n        操作类型，例如'mark_as_read', 'archive', 'move_to_folder'\n\n    Returns\n    ----------\n    : bool\n        邮件操作是否成功\n    '''\n    pass\n```\n\n\n```tool-4\ndef mail.search_email(query: str) -> List[Dict[str, Union[str, int, List[str]]]]:\n    '''\n    搜索邮件\n\n    Parameters\n    ----------\n    query : str\n        搜索关键词\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, int, List[str]]]]\n        搜索结果，包含符合条件的邮件列表\n    '''\n    pass\n```\n\n\n```tool-5\ndef mail.get_email_notifications(enable: bool) -> bool:\n    '''\n    提供邮件通知提醒\n\n    Parameters\n    ----------\n    enable : bool\n        启用或禁用邮件通知\n\n    Returns\n    ----------\n    : bool\n        设置邮件通知提醒操作是否成功\n    '''\n    pass\n```\n\n\n```tool-6\ndef mail.add_attachment(email_id: str, file_path: str) -> str:\n    '''\n    添加附件到邮件\n\n    Parameters\n    ----------\n    email_id : str\n        邮件ID\n    file_path : str\n        附件的文件路径\n\n    Returns\n    ----------\n    : str\n        添加附件后的邮件ID\n    '''\n    pass\n```\n\n\n```tool-7\ndef mail.switch_account(account_id: str) -> bool:\n    '''\n    支持多账户切换\n\n    Parameters\n    ----------\n    account_id : str\n        要切换的账户ID\n\n    Returns\n    ----------\n    : bool\n        切换账户操作是否成功\n    '''\n    pass\n```\n\n\n```tool-8\ndef semantic_search.web_search(query: str, count: int) -> List[str]:\n    '''\n    网页搜索，根据输入的query，在搜索引擎中查找相关页面，可用于查找人物、物品、体育赛事、事件相关的时效性信息，精确信息。\n\n    Parameters\n    ----------\n    query : str\n        用户搜索的关键词、短语、查询，该参数项不能为空。\n    count : int, optional\n        期望返回的搜索结果数量\n\n    Returns\n    ----------\n    : List[str]\n        搜索引擎返回的结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef semantic_search.personal_context_search(query: str) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef mail.set_email_filter(filter_rules: Dict[str, str]) -> bool:\n    '''\n    设置邮件过滤规则\n\n    Parameters\n    ----------\n    filter_rules : Dict[str, str]\n        过滤规则，例如{'sender': 'example@domain.com', 'subject_contains': 'urgent'}\n\n    Returns\n    ----------\n    : bool\n        设置过滤规则操作是否成功\n    '''\n    pass\n```",
        "query": "将这份PPT发送到微信聊天记录中提到李明的邮箱。",
        "ground_truth": [
            {
                "id": 1,
                "name": "semantic_search.personal_context_search",
                "args": {
                    "query": "当前正在查看的PPT的句柄"
                }
            },
            {
                "id": 2,
                "name": "semantic_search.personal_context_search",
                "args": {
                    "query": "微信聊天记录中提到的李明的邮箱地址"
                }
            },
            {
                "id": 3,
                "name": "mail.send_email",
                "args": {
                    "to": "#E2",
                    "subject": "PPT分享",
                    "body": "分享PPT给你",
                    "attachments": "#E1"
                }
            }
        ],
        "plan_str": "SubTask1: 获取当前正在查看的PPT的句柄\n#E1 = semantic_search.personal_context_search(query=\"当前正在查看的PPT的句柄\")\nSubTask2: 查找微信聊天记录中提到的李明的邮箱地址\n#E2 = semantic_search.personal_context_search(query=\"微信聊天记录中提到的李明的邮箱地址\")\nSubTask3: 将PPT发送给李明\n#E3 = mail.send_email(to=#E2, subject=\"PPT分享\", body=\"分享PPT给你\", attachments=#E1)"
    },
    "query_49": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "semantic_search",
                    "music"
                ],
                "selected_apis_name": [
                    "music.add_song_to_playlist",
                    "music.download_music",
                    "music.play_music",
                    "music.pause_music",
                    "music.create_playlist",
                    "semantic_search.personal_context_search",
                    "semantic_search.web_search",
                    "music.search_music",
                    "music.get_lyrics_and_album_info",
                    "music.listen_to_recommendations"
                ]
            },
            "environment": {
                "datetime": "2019年03月26日 星期二",
                "location": "江苏省南通市"
            }
        },
        "api_descriptions": "```tool-1\ndef music.add_song_to_playlist(playlist_id: str, song_id: str) -> bool:\n    '''\n    添加歌曲到播放列表\n\n    Parameters\n    ----------\n    playlist_id : str\n        播放列表ID\n    song_id : str\n        要添加的歌曲ID\n\n    Returns\n    ----------\n    : bool\n        添加操作是否成功\n    '''\n    pass\n```\n\n\n```tool-2\ndef music.download_music(song_id: str) -> str:\n    '''\n    下载音乐到本地\n\n    Parameters\n    ----------\n    song_id : str\n        要下载的歌曲ID\n\n    Returns\n    ----------\n    : str\n        下载文件的本地路径\n    '''\n    pass\n```\n\n\n```tool-3\ndef music.play_music(song_id: str) -> bool:\n    '''\n    播放音乐\n\n    Parameters\n    ----------\n    song_id : str\n        要播放的歌曲ID\n\n    Returns\n    ----------\n    : bool\n        播放操作是否成功\n    '''\n    pass\n```\n\n\n```tool-4\ndef music.pause_music() -> bool:\n    '''\n    暂停音乐\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : bool\n        暂停操作是否成功\n    '''\n    pass\n```\n\n\n```tool-5\ndef music.create_playlist(name: str, description: str) -> str:\n    '''\n    创建播放列表\n\n    Parameters\n    ----------\n    name : str\n        播放列表名称\n    description : str, optional\n        播放列表描述\n\n    Returns\n    ----------\n    : str\n        创建成功的播放列表ID\n    '''\n    pass\n```\n\n\n```tool-6\ndef semantic_search.personal_context_search(query: str) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-7\ndef semantic_search.web_search(query: str, count: int) -> List[str]:\n    '''\n    网页搜索，根据输入的query，在搜索引擎中查找相关页面，可用于查找人物、物品、体育赛事、事件相关的时效性信息，精确信息。\n\n    Parameters\n    ----------\n    query : str\n        用户搜索的关键词、短语、查询，该参数项不能为空。\n    count : int, optional\n        期望返回的搜索结果数量\n\n    Returns\n    ----------\n    : List[str]\n        搜索引擎返回的结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef music.search_music(query: str) -> List[Dict[str, Union[str, int]]]:\n    '''\n    搜索音乐\n\n    Parameters\n    ----------\n    query : str\n        搜索关键词\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, int]]]\n        搜索结果，符合条件的音乐列表\n    '''\n    pass\n```\n\n\n```tool-9\ndef music.get_lyrics_and_album_info(song_id: str) -> Dict[str, str]:\n    '''\n    查看音乐歌词和专辑信息\n\n    Parameters\n    ----------\n    song_id : str\n        歌曲ID\n\n    Returns\n    ----------\n    : Dict[str, str]\n        歌词和专辑信息\n    '''\n    pass\n```\n\n\n```tool-10\ndef music.listen_to_recommendations(genre: str) -> List[str]:\n    '''\n    收听音乐推荐和电台\n\n    Parameters\n    ----------\n    genre : str, optional\n        音乐类型\n\n    Returns\n    ----------\n    : List[str]\n        推荐音乐或电台的列表\n    '''\n    pass\n```",
        "query": "播一下我昨天下午听的那首歌",
        "ground_truth": [
            {
                "id": 1,
                "name": "semantic_search.personal_context_search",
                "args": {
                    "query": "昨天下午听的歌曲"
                }
            },
            {
                "id": 2,
                "name": "music.play_music",
                "args": {
                    "song_name": "#E1[0]"
                }
            }
        ],
        "plan_str": "SubTask1: 搜索用户昨天下午听的歌曲\n#E1 = semantic_search.personal_context_search(query=\"昨天下午听的歌曲\")\nSubTask2: 播放搜索结果中的第一首歌曲\n#E2 = music.play_music(song_name=#E1[0])"
    },
    "query_50": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "wechat",
                    "amap",
                    "semantic_search",
                    "ctrip"
                ],
                "selected_apis_name": [
                    "amap.search_poi",
                    "amap.get_current_location",
                    "semantic_search.personal_context_search",
                    "ctrip.search_flight_ticket",
                    "amap.get_nearby_parking",
                    "wechat.send_message",
                    "wechat.manage_subscriptions",
                    "amap.route_planning",
                    "wechat.make_call",
                    "semantic_search.web_search"
                ]
            },
            "environment": {
                "datetime": "2024年08月21日 星期三",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef amap.search_poi(keywords: str, city: str, types: str) -> List[Dict]:\n    '''\n    搜索地点\n\n    Parameters\n    ----------\n    keywords : str\n        搜索关键词\n    city : str, optional\n        城市名\n    types : str, optional\n        搜索POI类型，如餐馆，酒店等\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的地点列表，每个地点包含名称、地址、坐标等信息\n    '''\n    pass\n```\n\n\n```tool-2\ndef amap.get_current_location() -> Dict[str, float]:\n    '''\n    获取当前位置\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : Dict[str, float]\n        返回当前的经纬度坐标\n    '''\n    pass\n```\n\n\n```tool-3\ndef semantic_search.personal_context_search(query: str) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef ctrip.search_flight_ticket(arr_city: str, dep_city: str, arr_airport: str, dep_airport: str, flight_date: str, page: int) -> List[str]:\n    '''\n    帮助用户获取机票信息，用户需要输入出发地、目的地\n\n    Parameters\n    ----------\n    arr_city : str\n        目的地城市，如'北京'、'上海'、'南京'\n    dep_city : str\n        出发城市，如'北京'、'上海'、'南京'\n    arr_airport : str, optional\n        到达的机场\n    dep_airport : str, optional\n        出发的机场\n    flight_date : str\n        出发时间，如'2024-03-29'\n    page : int, optional\n        页数，默认值为1，当用户请求更多时输入2，3依次增加\n\n    Returns\n    ----------\n    : List[str]\n        返回的航班信息\n    '''\n    pass\n```\n\n\n```tool-5\ndef amap.get_nearby_parking(location: str) -> List[Dict]:\n    '''\n    获取附近的停车场信息\n\n    Parameters\n    ----------\n    location : str\n        当前位置坐标，经纬度用逗号分隔\n\n    Returns\n    ----------\n    : List[Dict]\n        返回附近的停车场列表，每个停车场包含名称、地址、距离等信息\n    '''\n    pass\n```\n\n\n```tool-6\ndef wechat.send_message(recipient_id: str, message_type: str, content: Union[str, bytes]) -> bool:\n    '''\n    发送消息\n\n    Parameters\n    ----------\n    recipient_id : str\n        消息接收者ID\n    message_type : str\n        消息类型，如'text', 'image', 'video', 'voice'\n    content : Union[str, bytes]\n        消息内容，根据消息类型可以是文字、图片、视频二进制数据等\n\n    Returns\n    ----------\n    : bool\n        发送消息操作是否成功\n    '''\n    pass\n```\n\n\n```tool-7\ndef wechat.manage_subscriptions(action: str, account_id: Optional[str]) -> Union[List[Dict[str, Union[str, int]]], bool]:\n    '''\n    管理公众号订阅\n\n    Parameters\n    ----------\n    action : str\n        操作类型，例如'subscribe', 'unsubscribe', 'view'\n    account_id : Optional[str], optional\n        公众号ID，仅在订阅或取消订阅时需要\n\n    Returns\n    ----------\n    : Union[List[Dict[str, Union[str, int]]], bool]\n        公众号信息列表，或公众号管理操作是否成功\n    '''\n    pass\n```\n\n\n```tool-8\ndef amap.route_planning(origin: str, destination: str, strategy: str) -> Dict:\n    '''\n    路线规划\n\n    Parameters\n    ----------\n    origin : str\n        起点坐标，经纬度用逗号分隔\n    destination : str\n        终点坐标，经纬度用逗号分隔\n    strategy : str, optional\n        路线规划策略，如最短时间，避开拥堵等\n\n    Returns\n    ----------\n    : Dict\n        返回路线规划信息，如路程时间、距离、途径点等\n    '''\n    pass\n```\n\n\n```tool-9\ndef wechat.make_call(recipient_id: str, call_type: str) -> bool:\n    '''\n    语音和视频通话\n\n    Parameters\n    ----------\n    recipient_id : str\n        通话接收者ID\n    call_type : str\n        通话类型，'voice'或'video'\n\n    Returns\n    ----------\n    : bool\n        通话操作是否成功\n    '''\n    pass\n```\n\n\n```tool-10\ndef semantic_search.web_search(query: str, count: int) -> List[str]:\n    '''\n    网页搜索，根据输入的query，在搜索引擎中查找相关页面，可用于查找人物、物品、体育赛事、事件相关的时效性信息，精确信息。\n\n    Parameters\n    ----------\n    query : str\n        用户搜索的关键词、短语、查询，该参数项不能为空。\n    count : int, optional\n        期望返回的搜索结果数量\n\n    Returns\n    ----------\n    : List[str]\n        搜索引擎返回的结果\n    '''\n    pass\n```",
        "query": "查下明天去泰国的机票，然后问欣欣哪个航班合适",
        "ground_truth": [
            {
                "id": 1,
                "name": "amap.get_current_location",
                "args": {}
            },
            {
                "id": 2,
                "name": "ctrip.search_flight_ticket",
                "args": {
                    "arr_city": "泰国",
                    "dep_city": "#E1",
                    "flight_date": "2024-08-22"
                }
            },
            {
                "id": 3,
                "name": "semantic_search.personal_context_search",
                "args": {
                    "query": "欣欣的联系方式"
                }
            },
            {
                "id": 4,
                "name": "wechat.send_message",
                "args": {
                    "recipient_id": "#E3",
                    "message_type": "text",
                    "content": "航班信息：#E2，哪个航班合适？"
                }
            }
        ],
        "plan_str": "SubTask1: 获取当前位置\n#E1 = amap.get_current_location()\nSubTask2: 查询明天飞往泰国的航班信息\n#E2 = ctrip.search_flight_ticket(arr_city=\"泰国\", dep_city=#E1, flight_date=\"2024-08-22\")\nSubTask3: 查找欣欣的联系方式\n#E3 = semantic_search.personal_context_search(query=\"欣欣的联系方式\")\nSubTask4: 给欣欣发送航班信息\n#E4 = wechat.send_message(recipient_id=#E3, message_type=\"text\", content=\"航班信息：#E2，哪个航班合适？\")"
    },
    "query_51": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "semantic_search",
                    "amap",
                    "models"
                ],
                "selected_apis_name": [
                    "amap.get_current_location",
                    "models.creative_writing",
                    "amap.route_planning",
                    "amap.get_nearby_parking",
                    "models.date_qa",
                    "models.general_response",
                    "models.search_then_response",
                    "semantic_search.personal_context_search",
                    "amap.search_poi",
                    "amap.get_nearby_gas_stations"
                ]
            },
            "environment": {
                "datetime": "2024年07月06日 星期六",
                "location": "抚州"
            }
        },
        "api_descriptions": "```tool-1\ndef amap.get_current_location() -> Dict[str, float]:\n    '''\n    获取当前位置\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : Dict[str, float]\n        返回当前的经纬度坐标\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef amap.route_planning(origin: str, destination: str, strategy: str) -> Dict:\n    '''\n    路线规划\n\n    Parameters\n    ----------\n    origin : str\n        起点坐标，经纬度用逗号分隔\n    destination : str\n        终点坐标，经纬度用逗号分隔\n    strategy : str, optional\n        路线规划策略，如最短时间，避开拥堵等\n\n    Returns\n    ----------\n    : Dict\n        返回路线规划信息，如路程时间、距离、途径点等\n    '''\n    pass\n```\n\n\n```tool-4\ndef amap.get_nearby_parking(location: str) -> List[Dict]:\n    '''\n    获取附近的停车场信息\n\n    Parameters\n    ----------\n    location : str\n        当前位置坐标，经纬度用逗号分隔\n\n    Returns\n    ----------\n    : List[Dict]\n        返回附近的停车场列表，每个停车场包含名称、地址、距离等信息\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.date_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长解答节假日、节气、是否上班、调休信息相关问题；也支持时间推理计算，如日期天数之差、离国庆节还有多久等。\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题，与节假日、节气、调休信息、日期推算相关\n    references : List[Union[List[str], str]]\n        提供的参考信息，能帮助解答问题，如当前日期、星期数等信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.search_then_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个具备搜索引擎能力的问答模型，具备以下能力：\n1. 搜索实时信息并总结。如果用户问题涉及时效性信息，问答模型第一步通过搜索引擎检索信息，第二步对检索的多个信息进行汇总，生成回复；\n2. 问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的instruction和给定的参考references，生成正确、有用、安全的回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令/问题，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        返回的回复\n    '''\n    pass\n```\n\n\n```tool-8\ndef semantic_search.personal_context_search(query: str) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef amap.search_poi(keywords: str, city: str, types: str) -> List[Dict]:\n    '''\n    搜索地点\n\n    Parameters\n    ----------\n    keywords : str\n        搜索关键词\n    city : str, optional\n        城市名\n    types : str, optional\n        搜索POI类型，如餐馆，酒店等\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的地点列表，每个地点包含名称、地址、坐标等信息\n    '''\n    pass\n```\n\n\n```tool-10\ndef amap.get_nearby_gas_stations(location: str) -> List[Dict]:\n    '''\n    获取附近加油站信息\n\n    Parameters\n    ----------\n    location : str\n        当前位置坐标，经纬度用逗号分隔\n\n    Returns\n    ----------\n    : List[Dict]\n        返回附近的加油站列表，每个加油站包含名称、地址、距离等信息\n    '''\n    pass\n```",
        "query": "我现在要开车去同学聚会，在上次记下来的那个酒店，先要找一个附近的加油站给车加油，能准时赶上吗？",
        "ground_truth": [
            {
                "id": 1,
                "name": "amap.get_current_location",
                "args": {}
            },
            {
                "id": 2,
                "name": "semantic_search.personal_context_search",
                "args": {
                    "query": "同学聚会酒店地址"
                }
            },
            {
                "id": 3,
                "name": "amap.search_poi",
                "args": {
                    "keywords": "#E2",
                    "city": "",
                    "types": "酒店"
                }
            },
            {
                "id": 4,
                "name": "amap.get_nearby_gas_stations",
                "args": {
                    "location": "#E1['longitude'] #E1['latitude']"
                }
            },
            {
                "id": 5,
                "name": "amap.route_planning",
                "args": {
                    "origin": "#E1['longitude'] #E1['latitude']",
                    "destination": "#E4[0]['location']['longitude'] #E4[0]['location']['latitude']",
                    "strategy": "最短时间"
                }
            },
            {
                "id": 6,
                "name": "amap.route_planning",
                "args": {
                    "origin": "#E4[0]['location']['longitude'] #E4[0]['location']['latitude']",
                    "destination": "#E3[0]['location']['longitude'] #E3[0]['location']['latitude']",
                    "strategy": "最短时间"
                }
            },
            {
                "id": 7,
                "name": "models.general_response",
                "args": {
                    "instruction": "我现在要从当前位置开车去同学聚会的酒店，需要先去附近的加油站加油，请帮我评估一下能否准时赶到？",
                    "references": [
                        "#E5",
                        "#E6"
                    ]
                }
            }
        ],
        "plan_str": "SubTask1: 获取当前位置\n#E1 = amap.get_current_location()\nSubTask2: 获取同学聚会酒店的地址\n#E2 = semantic_search.personal_context_search(query=\"同学聚会酒店地址\")\nSubTask3: 查找同学聚会酒店的位置\n#E3 = amap.search_poi(keywords=#E2, city=\"\", types=\"酒店\")\nSubTask4: 获取附近的加油站信息\n#E4 = amap.get_nearby_gas_stations(location=\"#E1['longitude'] #E1['latitude']\")\nSubTask5:  获取从当前位置到附近加油站的路线规划\n#E5 = amap.route_planning(origin=\"#E1['longitude'] #E1['latitude']\", destination=\"#E4[0]['location']['longitude'] #E4[0]['location']['latitude']\", strategy=\"最短时间\")\nSubTask6: 获取从附近加油站到酒店的路线规划\n#E6 = amap.route_planning(origin=\"#E4[0]['location']['longitude'] #E4[0]['location']['latitude']\", destination=\"#E3[0]['location']['longitude'] #E3[0]['location']['latitude']\", strategy=\"最短时间\")\nSubTask7: 综合评估能否准时赶到\n#E7 = models.general_response(instruction=\"我现在要从当前位置开车去同学聚会的酒店，需要先去附近的加油站加油，请帮我评估一下能否准时赶到？\", references=[#E5, #E6]) \n"
    },
    "query_52": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "wechat",
                    "semantic_search",
                    "wewave",
                    "models"
                ],
                "selected_apis_name": [
                    "semantic_search.personal_context_search",
                    "wewave.get_star_updates",
                    "wewave.get_super_topic_posts",
                    "models.general_response",
                    "wechat.send_message",
                    "wewave.join_super_topic",
                    "models.image_search",
                    "models.extract_information_from_text",
                    "wewave.interact_with_live_stream",
                    "models.personal_qa"
                ]
            },
            "environment": {
                "datetime": "2024年08月20日 星期二",
                "location": "新疆维吾尔自治区昆玉市"
            }
        },
        "api_descriptions": "```tool-1\ndef semantic_search.personal_context_search(query: str) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef wewave.get_star_updates(star_id: str) -> Dict[str, Union[str, int, List[str]]]:\n    '''\n    获取明星和大V的最新动态\n\n    Parameters\n    ----------\n    star_id : str\n        明星或大V的唯一标识\n\n    Returns\n    ----------\n    : Dict[str, Union[str, int, List[str]]]\n        明星或大V的最新动态信息，包括动态内容、发布时间、点赞数等\n    '''\n    pass\n```\n\n\n```tool-3\ndef wewave.get_super_topic_posts(topic_id: str) -> List[Dict[str, Union[str, int, float]]]:\n    '''\n    获取超话社区的帖子\n\n    Parameters\n    ----------\n    topic_id : str\n        超话社区的唯一标识\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, int, float]]]\n        超话社区的帖子列表，每个帖子包含内容、发布时间、点赞数等信息\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef wechat.send_message(recipient_id: str, message_type: str, content: Union[str, bytes]) -> bool:\n    '''\n    发送消息\n\n    Parameters\n    ----------\n    recipient_id : str\n        消息接收者ID\n    message_type : str\n        消息类型，如'text', 'image', 'video', 'voice'\n    content : Union[str, bytes]\n        消息内容，根据消息类型可以是文字、图片、视频二进制数据等\n\n    Returns\n    ----------\n    : bool\n        发送消息操作是否成功\n    '''\n    pass\n```\n\n\n```tool-6\ndef wewave.join_super_topic(topic_id: str) -> bool:\n    '''\n    加入超话社区\n\n    Parameters\n    ----------\n    topic_id : str\n        超话社区的唯一标识\n\n    Returns\n    ----------\n    : bool\n        加入超话社区是否成功的标志\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.image_search(image_url: str) -> str:\n    '''\n    一个基于给定的图片搜索图中事物相关信息的模型，该模型的能力包括：\n1. 搜索著名人物的身份、经历，包括明星、政客、历史人物、体育明星等；\n2. 识别图像中动物/植物的品种；\n3. 识别照片中地点或景点的名称和地址。\n\n    Parameters\n    ----------\n    image_url : str\n        给定图片地址，将搜索该图片中的人、动植物或地点的相关信息\n\n    Returns\n    ----------\n    : str\n        图片中事物的相关信息\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef wewave.interact_with_live_stream(live_stream_id: str, message: str) -> bool:\n    '''\n    与正在进行的直播互动\n\n    Parameters\n    ----------\n    live_stream_id : str\n        直播的唯一标识\n    message : str\n        互动消息内容\n\n    Returns\n    ----------\n    : bool\n        互动是否成功的标志\n    '''\n    pass\n```\n\n\n```tool-10\ndef models.personal_qa(instruction: str, user_features: str, references: Dict[str, str]) -> str:\n    '''\n    擅长回复可以结合用户个性化信息回答的问题\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题\n    user_features : str\n        提供的用户个性化信息\n    references : Dict[str, str], optional\n        参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```",
        "query": "帮我找找我昨天看到的周杰伦演唱会的微博，添加收藏，然后总结一下演唱会信息发给微信里的黄牛问他这一场有票吗",
        "ground_truth": [
            {
                "id": 1,
                "name": "wewave.get_star_updates",
                "args": {
                    "star_id": "周杰伦"
                }
            },
            {
                "id": 2,
                "name": "models.extract_information_from_text",
                "args": {
                    "instruction": "筛选昨天发布的关于周杰伦演唱会的微博",
                    "text": "#E1"
                }
            },
            {
                "id": 3,
                "name": "wewave.interact_with_live_stream",
                "args": {
                    "live_stream_id": "#E2",
                    "message": "收藏"
                }
            },
            {
                "id": 4,
                "name": "semantic_search.personal_context_search",
                "args": {
                    "query": "微信 黄牛 联系方式"
                }
            },
            {
                "id": 5,
                "name": "models.general_response",
                "args": {
                    "instruction": "\"帮我总结以下信息\"，references=[#E2]"
                }
            },
            {
                "id": 6,
                "name": "wechat.send_message",
                "args": {
                    "recipient_id": "#E5",
                    "message_type": "text",
                    "content": "#E2 这场演唱会还有票吗？"
                }
            }
        ],
        "plan_str": "SubTask1: 搜索周杰伦演唱会的微博\n#E1 = wewave.get_star_updates(star_id=\"周杰伦\")\nSubTask2: 筛选昨天发布的微博\n#E2 = models.extract_information_from_text(instruction=\"筛选昨天发布的关于周杰伦演唱会的微博\", text=#E1) \nSubTask3: 添加微博收藏\n#E3 = wewave.interact_with_live_stream(live_stream_id=#E2, message=\"收藏\")\nSubTask4: 在微信中查找黄牛的联系方式\n#E4 = semantic_search.personal_context_search(query=\"微信 黄牛 联系方式\")\nSubTask5: 总结演唱会信息\n#E5 = models.general_response(instruction=\"帮我总结以下信息\"，references=[#E2])\nSubTask6: 转发演唱会信息给黄牛\n#E6 = wechat.send_message(recipient_id=#E5, message_type='text', content=\"#E2 这场演唱会还有票吗？\")\n"
    },
    "query_53": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "semantic_search",
                    "messages",
                    "models"
                ],
                "selected_apis_name": [
                    "semantic_search.personal_context_search",
                    "models.math_qa",
                    "models.multimodal_qa",
                    "models.directly_answer",
                    "messages.send_text_message",
                    "models.image_search",
                    "models.general_response",
                    "models.creative_writing",
                    "messages.set_notifications",
                    "messages.delete_message"
                ]
            },
            "environment": {
                "datetime": "2021年10月21日 星期四",
                "location": "吉林省白山市"
            }
        },
        "api_descriptions": "```tool-1\ndef semantic_search.personal_context_search(query: str) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.directly_answer(answer: str) -> str:\n    '''\n    你可以通过这个工具直接回答问题。例如以下情况，你可以直接回答：\n1. 用户的问题属于简单闲聊类，如问候语、询问人设信息等；\n2. 用户问题的答案可以直接从屏幕图片中获取，如图片中的文字、颜色、数量等显式信息。\n\n    Parameters\n    ----------\n    answer : str\n        answer\n\n    Returns\n    ----------\n    : str\n        问题答案\n    '''\n    pass\n```\n\n\n```tool-5\ndef messages.send_text_message(recipient: List[str], title: str, message: str) -> str:\n    '''\n    发送文本消息\n\n    Parameters\n    ----------\n    recipient : List[str]\n        接收者的电话号码\n    title : str, optional\n        文本消息标题\n    message : str\n        文本消息的内容\n\n    Returns\n    ----------\n    : str\n        消息ID\n    '''\n    pass\n```\n\n\n```tool-6\ndef models.image_search(image_url: str) -> str:\n    '''\n    一个基于给定的图片搜索图中事物相关信息的模型，该模型的能力包括：\n1. 搜索著名人物的身份、经历，包括明星、政客、历史人物、体育明星等；\n2. 识别图像中动物/植物的品种；\n3. 识别照片中地点或景点的名称和地址。\n\n    Parameters\n    ----------\n    image_url : str\n        给定图片地址，将搜索该图片中的人、动植物或地点的相关信息\n\n    Returns\n    ----------\n    : str\n        图片中事物的相关信息\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef messages.set_notifications() -> bool:\n    '''\n    开启消息通知\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : bool\n        操作是否成功的布尔值\n    '''\n    pass\n```\n\n\n```tool-10\ndef messages.delete_message(message_id: str) -> bool:\n    '''\n    删除指定ID的消息\n\n    Parameters\n    ----------\n    message_id : str\n        消息ID\n\n    Returns\n    ----------\n    : bool\n        删除操作是否成功\n    '''\n    pass\n```",
        "query": "帮我算一下, 我昨天吃饭一共花了多少钱, 然后发一个群收款到我的北京高中同学群, 大家AA一下",
        "ground_truth": [
            {
                "id": 1,
                "name": "semantic_search.personal_context_search",
                "args": {
                    "query": "昨天的消费记录"
                }
            },
            {
                "id": 2,
                "name": "models.math_qa",
                "args": {
                    "instruction": "计算昨天吃饭的总花费",
                    "references": [
                        "#E1"
                    ]
                }
            },
            {
                "id": 3,
                "name": "semantic_search.personal_context_search",
                "args": {
                    "query": "北京高中同学群联系方式"
                }
            },
            {
                "id": 4,
                "name": "messages.send_text_message",
                "args": {
                    "recipient": [
                        "#E3"
                    ],
                    "title": "AA制收款",
                    "message": "昨天吃饭总花费为#E2，请大家AA支付。"
                }
            }
        ],
        "plan_str": "SubTask1: 搜索用户昨天的消费记录\n#E1 = semantic_search.personal_context_search(query=\"昨天的消费记录\")\n\nSubTask2: 计算昨天吃饭的总花费\n#E2 = models.math_qa(instruction=\"计算昨天吃饭的总花费\", references=[#E1])\n\nSubTask3: 查找北京高中同学群的联系方式\n#E3 = semantic_search.personal_context_search(query=\"北京高中同学群联系方式\")\n\nSubTask4: 发送群收款消息\n#E4 = messages.send_text_message(recipient=[#E3], title=\"AA制收款\", message=\"昨天吃饭总花费为#E2，请大家AA支付。\")"
    },
    "query_54": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "wechat",
                    "wewave",
                    "models"
                ],
                "selected_apis_name": [
                    "wewave.get_recommended_content",
                    "wewave.get_hot_search_list",
                    "wechat.manage_contacts",
                    "wechat.manage_group",
                    "wewave.cancel_membership_subscription",
                    "models.code_qa",
                    "models.creative_writing",
                    "wechat.send_message",
                    "wewave.post_weibo",
                    "wechat.share_moment"
                ]
            },
            "environment": {
                "datetime": "2024年08月21日 星期三",
                "location": "厦门"
            }
        },
        "api_descriptions": "```tool-1\ndef wewave.get_recommended_content() -> List[Dict[str, Union[str, int, float]]]:\n    '''\n    获取微博推荐内容\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, int, float]]]\n        推荐内容的列表，每个内容包含标题、描述、发布时间等信息\n    '''\n    pass\n```\n\n\n```tool-2\ndef wewave.get_hot_search_list() -> List[Dict[str, Union[str, int]]]:\n    '''\n    获取微博热搜榜单\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, int]]]\n        微博热搜榜单，包括热搜词条及其热度等信息\n    '''\n    pass\n```\n\n\n```tool-3\ndef wechat.manage_contacts(action: str, contact_id: Optional[str], contact_info: Optional[Dict[str, Union[str, int]]]) -> Union[List[Dict[str, Union[str, int]]], bool]:\n    '''\n    管理好友\n\n    Parameters\n    ----------\n    action : str\n        操作类型，例如'add', 'delete', 'block', 'view'\n    contact_id : Optional[str], optional\n        好友ID，仅在添加、删除、屏蔽时需要\n    contact_info : Optional[Dict[str, Union[str, int]]], optional\n        好友信息，仅在添加或更新时需要\n\n    Returns\n    ----------\n    : Union[List[Dict[str, Union[str, int]]], bool]\n        好友信息列表，或好友管理操作是否成功\n    '''\n    pass\n```\n\n\n```tool-4\ndef wechat.manage_group(action: str, group_id: str, member_id: Optional[str]) -> Union[Dict[str, Union[str, List[str]]], bool]:\n    '''\n    管理群聊\n\n    Parameters\n    ----------\n    action : str\n        操作类型，例如'add_member', 'remove_member', 'view'\n    group_id : str\n        群聊ID\n    member_id : Optional[str], optional\n        群聊成员ID，仅在添加或删除成员时需要\n\n    Returns\n    ----------\n    : Union[Dict[str, Union[str, List[str]]], bool]\n        群聊信息，或群聊管理操作是否成功\n    '''\n    pass\n```\n\n\n```tool-5\ndef wewave.cancel_membership_subscription() -> bool:\n    '''\n    取消微博会员订阅\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : bool\n        取消订阅是否成功的标志\n    '''\n    pass\n```\n\n\n```tool-6\ndef models.code_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长代码生成、代码解释、代码调试、代码语言转换、代码优化、代码识别等代码程序相关任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与代码、程序相关。\n    references : List[Union[List[str], str]]\n        应答代码相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef wechat.send_message(recipient_id: str, message_type: str, content: Union[str, bytes]) -> bool:\n    '''\n    发送消息\n\n    Parameters\n    ----------\n    recipient_id : str\n        消息接收者ID\n    message_type : str\n        消息类型，如'text', 'image', 'video', 'voice'\n    content : Union[str, bytes]\n        消息内容，根据消息类型可以是文字、图片、视频二进制数据等\n\n    Returns\n    ----------\n    : bool\n        发送消息操作是否成功\n    '''\n    pass\n```\n\n\n```tool-9\ndef wewave.post_weibo(content: str, images: List[str], video: str) -> bool:\n    '''\n    发布新的微博\n\n    Parameters\n    ----------\n    content : str\n        微博内容\n    images : List[str], optional\n        微博图片列表\n    video : str, optional\n        微博视频链接\n\n    Returns\n    ----------\n    : bool\n        发布微博是否成功的状态\n    '''\n    pass\n```\n\n\n```tool-10\ndef wechat.share_moment(content: Union[str, bytes]) -> bool:\n    '''\n    分享朋友圈动态\n\n    Parameters\n    ----------\n    content : Union[str, bytes]\n        分享的内容，可以是文字、图片或视频\n\n    Returns\n    ----------\n    : bool\n        分享操作是否成功\n    '''\n    pass\n```",
        "query": "为我写一段关于东山岛的旅游攻略，在微博上发布，并在微信上分享给王五",
        "ground_truth": [
            {
                "id": 1,
                "name": "models.creative_writing",
                "args": {
                    "instruction": "撰写关于东山岛的旅游攻略",
                    "references": []
                }
            },
            {
                "id": 2,
                "name": "wewave.post_weibo",
                "args": {
                    "content": "#E1",
                    "images": [],
                    "video": ""
                }
            },
            {
                "id": 3,
                "name": "wechat.manage_contacts",
                "args": {
                    "action": "view",
                    "contact_id": "",
                    "contact_info": {
                        "name": "王五"
                    }
                }
            },
            {
                "id": 4,
                "name": "wechat.send_message",
                "args": {
                    "recipient_id": "#E3",
                    "message_type": "text",
                    "content": "#E1"
                }
            }
        ],
        "plan_str": "SubTask1: 撰写关于东山岛的旅游攻略\n#E1 = models.creative_writing(instruction=\"撰写关于东山岛的旅游攻略\", references=[])\nSubTask2: 发布微博\n#E2 = wewave.post_weibo(content=\"#E1\", images=[], video=\"\")\nSubTask3: 查找王五的微信ID\n#E3 = wechat.manage_contacts(action=\"view\", contact_id=\"\", contact_info={\"name\": \"王五\"})\nSubTask4: 在微信上分享东山岛的旅游攻略给王五\n#E4 = wechat.send_message(recipient_id=#E3, message_type=\"text\", content=#E1)"
    },
    "query_55": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "models",
                    "boss_zhipin"
                ],
                "selected_apis_name": [
                    "models.multimodal_qa",
                    "boss_zhipin.get_favorite_jobs",
                    "models.general_response",
                    "boss_zhipin.get_notifications",
                    "boss_zhipin.submit_resume",
                    "boss_zhipin.get_user_profile",
                    "boss_zhipin.chat_with_recruiter",
                    "boss_zhipin.search_jobs",
                    "boss_zhipin.update_user_profile",
                    "boss_zhipin.get_recommended_jobs"
                ]
            },
            "environment": {
                "datetime": "2018年12月02日 星期日",
                "location": "广东省东莞市"
            }
        },
        "api_descriptions": "```tool-1\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef boss_zhipin.get_favorite_jobs() -> List[Dict]:\n    '''\n    获取关注的职位\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict]\n        用户关注的职位列表\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef boss_zhipin.get_notifications() -> List[Dict]:\n    '''\n    查看消息通知\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict]\n        消息通知列表，包括职位推荐、聊天消息等\n    '''\n    pass\n```\n\n\n```tool-5\ndef boss_zhipin.submit_resume(job_id: str, resume_id: str) -> bool:\n    '''\n    用户简历投递\n\n    Parameters\n    ----------\n    job_id : str\n        职位ID\n    resume_id : str\n        简历ID\n\n    Returns\n    ----------\n    : bool\n        简历投递是否成功\n    '''\n    pass\n```\n\n\n```tool-6\ndef boss_zhipin.get_user_profile() -> Dict:\n    '''\n    获取用户资料\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : Dict\n        用户个人资料，包括姓名、联系方式、求职意向等\n    '''\n    pass\n```\n\n\n```tool-7\ndef boss_zhipin.chat_with_recruiter(recruiter_id: str, message: str) -> bool:\n    '''\n    在线沟通\n\n    Parameters\n    ----------\n    recruiter_id : str\n        招聘方ID\n    message : str\n        聊天消息内容\n\n    Returns\n    ----------\n    : bool\n        消息发送是否成功\n    '''\n    pass\n```\n\n\n```tool-8\ndef boss_zhipin.search_jobs(keywords: str, location: str, job_type: str, salary_range: str) -> List[Dict]:\n    '''\n    搜索职位\n\n    Parameters\n    ----------\n    keywords : str\n        搜索关键词\n    location : str, optional\n        位置，如城市名\n    job_type : str, optional\n        职位类型\n    salary_range : str, optional\n        薪资范围\n\n    Returns\n    ----------\n    : List[Dict]\n        返回符合条件的职位列表，包括职位名称、公司名称、薪资等信息\n    '''\n    pass\n```\n\n\n```tool-9\ndef boss_zhipin.update_user_profile(profile_info: Dict) -> bool:\n    '''\n    更新用户资料\n\n    Parameters\n    ----------\n    profile_info : Dict\n        需要更新的个人资料信息\n\n    Returns\n    ----------\n    : bool\n        更新操作是否成功\n    '''\n    pass\n```\n\n\n```tool-10\ndef boss_zhipin.get_recommended_jobs() -> List[Dict]:\n    '''\n    获取推荐职位\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict]\n        根据用户的简历和求职意向推荐的职位列表\n    '''\n    pass\n```",
        "query": "帮我在boss直聘上搜索一下软件开发工程师相关的岗位，筛选一下base地在深圳。根据我的简历，帮我总结汇总一下适合推荐的岗位。",
        "ground_truth": [
            {
                "id": 1,
                "name": "boss_zhipin.search_jobs",
                "args": {
                    "keywords": "软件开发工程师",
                    "location": "深圳",
                    "job_type": "",
                    "salary_range": ""
                }
            },
            {
                "id": 2,
                "name": "boss_zhipin.get_user_profile",
                "args": {}
            },
            {
                "id": 3,
                "name": "boss_zhipin.get_recommended_jobs",
                "args": {
                    "user_id": "#E2"
                }
            },
            {
                "id": 4,
                "name": "models.general_response",
                "args": {
                    "instruction": "帮我汇总一下boss直聘上深圳的软件开发工程师岗位，以及推荐给我的岗位",
                    "references": [
                        "#E1",
                        "#E3"
                    ]
                }
            }
        ],
        "plan_str": "SubTask1: 搜索boss直聘上深圳的软件开发工程师岗位\n#E1 = boss_zhipin.search_jobs(keywords=\"软件开发工程师\", location=\"深圳\", job_type=\"\", salary_range=\"\")\nSubTask2: 获取用户的简历信息\n#E2 = boss_zhipin.get_user_profile()\nSubTask3: 获取推荐职位\n#E3 = boss_zhipin.get_recommended_jobs(user_id=#E2)\nSubTask4: 汇总符合条件的职位信息\n#E4 = models.general_response(instruction=\"帮我汇总一下boss直聘上深圳的软件开发工程师岗位，以及推荐给我的岗位\", references=[#E1, #E3])\n"
    },
    "query_56": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "semantic_search",
                    "models"
                ],
                "selected_apis_name": [
                    "models.date_qa",
                    "models.general_response",
                    "models.personal_qa",
                    "models.safety_response",
                    "semantic_search.web_search",
                    "semantic_search.personal_context_search",
                    "models.multimodal_qa",
                    "models.extract_information_from_text",
                    "models.code_qa",
                    "models.math_qa"
                ]
            },
            "environment": {
                "datetime": "2018年02月08日 星期四",
                "location": "海南省三亚市"
            }
        },
        "api_descriptions": "```tool-1\ndef models.date_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长解答节假日、节气、是否上班、调休信息相关问题；也支持时间推理计算，如日期天数之差、离国庆节还有多久等。\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题，与节假日、节气、调休信息、日期推算相关\n    references : List[Union[List[str], str]]\n        提供的参考信息，能帮助解答问题，如当前日期、星期数等信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.personal_qa(instruction: str, user_features: str, references: Dict[str, str]) -> str:\n    '''\n    擅长回复可以结合用户个性化信息回答的问题\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题\n    user_features : str\n        提供的用户个性化信息\n    references : Dict[str, str], optional\n        参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.safety_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长回应与安全价值观相关的问题，用于直接回答黄赌毒、性别歧视、社会和谐、道德伦理、涉政、宗教、和恶意引导/诱导相关的用户请求。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题存在安全价值观风险，如黄赌毒、涉政、宗教、或恶意引导。\n    references : List[Union[List[str], str]]\n        应答安全价值观相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的安全且友好的回复结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef semantic_search.web_search(query: str, count: int) -> List[str]:\n    '''\n    网页搜索，根据输入的query，在搜索引擎中查找相关页面，可用于查找人物、物品、体育赛事、事件相关的时效性信息，精确信息。\n\n    Parameters\n    ----------\n    query : str\n        用户搜索的关键词、短语、查询，该参数项不能为空。\n    count : int, optional\n        期望返回的搜索结果数量\n\n    Returns\n    ----------\n    : List[str]\n        搜索引擎返回的结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef semantic_search.personal_context_search(query: str) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef models.code_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长代码生成、代码解释、代码调试、代码语言转换、代码优化、代码识别等代码程序相关任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与代码、程序相关。\n    references : List[Union[List[str], str]]\n        应答代码相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```",
        "query": "查一下我这周有哪些会议日程，有没有时间冲突的",
        "ground_truth": [
            {
                "id": 1,
                "name": "semantic_search.personal_context_search",
                "args": {
                    "query": "这周的日程安排"
                }
            },
            {
                "id": 2,
                "name": "models.general_response",
                "args": {
                    "instruction": "检查以下日程是否有时间冲突：#E1"
                }
            }
        ],
        "plan_str": "SubTask1: 查找用户这周的日程安排\n#E1 = semantic_search.personal_context_search(query=\"这周的日程安排\")\nSubTask2: 检查日程安排中是否有时间冲突\n#E2 = models.general_response(instruction=\"检查以下日程是否有时间冲突：#E1\")"
    },
    "query_57": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "models",
                    "toutiao"
                ],
                "selected_apis_name": [
                    "toutiao.get_video_detail",
                    "models.code_qa",
                    "toutiao.get_comments",
                    "models.search_then_response",
                    "models.creative_writing",
                    "models.general_response",
                    "toutiao.subscribe_author",
                    "toutiao.subscribe_notifications",
                    "toutiao.search_news",
                    "toutiao.update_user_profile"
                ]
            },
            "environment": {
                "datetime": "2020年05月12日 星期二",
                "location": "新疆维吾尔自治区新星市"
            }
        },
        "api_descriptions": "```tool-1\ndef toutiao.get_video_detail(video_id: str) -> Dict:\n    '''\n    获取视频详情\n\n    Parameters\n    ----------\n    video_id : str\n        视频ID\n\n    Returns\n    ----------\n    : Dict\n        视频的详细信息，包括标题、内容、作者等\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.code_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长代码生成、代码解释、代码调试、代码语言转换、代码优化、代码识别等代码程序相关任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与代码、程序相关。\n    references : List[Union[List[str], str]]\n        应答代码相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef toutiao.get_comments(content_id: str, page: int, count: int) -> List[Dict]:\n    '''\n    获取文章或视频的评论列表\n\n    Parameters\n    ----------\n    content_id : str\n        文章或视频ID\n    page : int, optional\n        页码\n    count : int, optional\n        每页显示的评论条数\n\n    Returns\n    ----------\n    : List[Dict]\n        评论列表，每条评论包括用户、内容、时间等信息\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.search_then_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个具备搜索引擎能力的问答模型，具备以下能力：\n1. 搜索实时信息并总结。如果用户问题涉及时效性信息，问答模型第一步通过搜索引擎检索信息，第二步对检索的多个信息进行汇总，生成回复；\n2. 问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的instruction和给定的参考references，生成正确、有用、安全的回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令/问题，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        返回的回复\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-7\ndef toutiao.subscribe_author(author_id: str) -> bool:\n    '''\n    订阅作者\n\n    Parameters\n    ----------\n    author_id : str\n        作者ID\n\n    Returns\n    ----------\n    : bool\n        订阅操作是否成功\n    '''\n    pass\n```\n\n\n```tool-8\ndef toutiao.subscribe_notifications(notification_types: List[str]) -> bool:\n    '''\n    接收消息推送\n\n    Parameters\n    ----------\n    notification_types : List[str], optional\n        希望接收的消息类型，如新闻推送、评论回复等\n\n    Returns\n    ----------\n    : bool\n        订阅操作是否成功\n    '''\n    pass\n```\n\n\n```tool-9\ndef toutiao.search_news(query: str, page: int, count: int) -> List[Dict]:\n    '''\n    搜索新闻\n\n    Parameters\n    ----------\n    query : str\n        搜索关键词\n    page : int, optional\n        页码\n    count : int, optional\n        每页显示的新闻条数\n\n    Returns\n    ----------\n    : List[Dict]\n        搜索结果，符合条件的新闻列表\n    '''\n    pass\n```\n\n\n```tool-10\ndef toutiao.update_user_profile(profile_info: Dict) -> bool:\n    '''\n    更新用户个人资料\n\n    Parameters\n    ----------\n    profile_info : Dict\n        需要更新的个人资料信息\n\n    Returns\n    ----------\n    : bool\n        更新操作是否成功\n    '''\n    pass\n```",
        "query": "搜索这次火箭发射的详细解读",
        "ground_truth": [
            {
                "id": 1,
                "name": "toutiao.search_news",
                "args": {
                    "query": "“引力一号（遥二）海澜之家号”火箭发射",
                    "page": "1",
                    "count": "10"
                }
            },
            {
                "id": 2,
                "name": "models.general_response",
                "args": {
                    "instruction": "根据查询结果，总结火箭发射的详细解读",
                    "references": [
                        "#E1"
                    ]
                }
            }
        ],
        "plan_str": "SubTask1: 搜索火箭发射的相关报道\n#E1 = toutiao.search_news(query=\"“引力一号（遥二）海澜之家号”火箭发射\", page=1, count=10)\nSubTask2: 总结查询结果\n#E2 = models.general_response(instruction=\"根据查询结果，总结火箭发射的详细解读\", references=[#E1])"
    },
    "query_58": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "wechat",
                    "semantic_search",
                    "photos"
                ],
                "selected_apis_name": [
                    "wechat.make_call",
                    "wechat.share_moment",
                    "wechat.manage_subscriptions",
                    "photos.get_all_albums",
                    "photos.create_album",
                    "semantic_search.personal_context_search",
                    "photos.get_all_photos",
                    "wechat.send_message",
                    "photos.search_photo_local",
                    "photos.share_photo"
                ]
            },
            "environment": {
                "datetime": "2024年08月23日 星期五",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef wechat.make_call(recipient_id: str, call_type: str) -> bool:\n    '''\n    语音和视频通话\n\n    Parameters\n    ----------\n    recipient_id : str\n        通话接收者ID\n    call_type : str\n        通话类型，'voice'或'video'\n\n    Returns\n    ----------\n    : bool\n        通话操作是否成功\n    '''\n    pass\n```\n\n\n```tool-2\ndef wechat.share_moment(content: Union[str, bytes]) -> bool:\n    '''\n    分享朋友圈动态\n\n    Parameters\n    ----------\n    content : Union[str, bytes]\n        分享的内容，可以是文字、图片或视频\n\n    Returns\n    ----------\n    : bool\n        分享操作是否成功\n    '''\n    pass\n```\n\n\n```tool-3\ndef wechat.manage_subscriptions(action: str, account_id: Optional[str]) -> Union[List[Dict[str, Union[str, int]]], bool]:\n    '''\n    管理公众号订阅\n\n    Parameters\n    ----------\n    action : str\n        操作类型，例如'subscribe', 'unsubscribe', 'view'\n    account_id : Optional[str], optional\n        公众号ID，仅在订阅或取消订阅时需要\n\n    Returns\n    ----------\n    : Union[List[Dict[str, Union[str, int]]], bool]\n        公众号信息列表，或公众号管理操作是否成功\n    '''\n    pass\n```\n\n\n```tool-4\ndef photos.get_all_albums() -> List[str]:\n    '''\n    获取设备上所有相册的ID列表\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[str]\n        相册对象ID列表\n    '''\n    pass\n```\n\n\n```tool-5\ndef photos.create_album(album_name: str) -> str:\n    '''\n    创建一个新的相册\n\n    Parameters\n    ----------\n    album_name : str\n        相册名称\n\n    Returns\n    ----------\n    : str\n        新创建相册的ID\n    '''\n    pass\n```\n\n\n```tool-6\ndef semantic_search.personal_context_search(query: str) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-7\ndef photos.get_all_photos() -> List[str]:\n    '''\n    获取设备上所有照片的列表\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[str]\n        照片对象ID列表\n    '''\n    pass\n```\n\n\n```tool-8\ndef wechat.send_message(recipient_id: str, message_type: str, content: Union[str, bytes]) -> bool:\n    '''\n    发送消息\n\n    Parameters\n    ----------\n    recipient_id : str\n        消息接收者ID\n    message_type : str\n        消息类型，如'text', 'image', 'video', 'voice'\n    content : Union[str, bytes]\n        消息内容，根据消息类型可以是文字、图片、视频二进制数据等\n\n    Returns\n    ----------\n    : bool\n        发送消息操作是否成功\n    '''\n    pass\n```\n\n\n```tool-9\ndef photos.search_photo_local(search_local_photo_keyword: str, location: str, time: str, search_media_type: str, search_album_type: str) -> List[str]:\n    '''\n    本地图片搜索 <图片搜索>属于<动效播放>类设置项，<本地图片搜索>是<图片搜索>设置项的一个具体操作指令，主要用于图片搜索可以让用户通过输入关键词等方式在系统图库或网络上快速查找特定的图片。在系统功能中的定义就是提供一种便捷的途径，帮助用户从大量的图片资源中精准定位到想要查找的图片，节省用户查找图片的时间和精力，提高用户在管理和浏览图片时的效率和体验。本地图片搜索是图片搜索下的一个类别，可以查找本地保存的特定主题的照片、特定时间拍摄的图片。它可以快速定位到用户手机内保存的各种图片，包括用户拍摄的照片、下载的图片、截图等。在系统功能中的定义就是通过特定的算法和索引，对本地存储的图片文件进行检索和筛选，以便用户能够精准、高效地找到他们想要的本地图片资源。\n\n\n    Parameters\n    ----------\n    search_local_photo_keyword : str, optional\n        图片搜索类型，取值范围不定，可能为[需要通过本地相册搜索的网络图片的名称或关键词,用户可以输入具体的图片名称、类型或模糊的图片描述,比如大草原、沙漠、湖泊、森林、汽车等,此参数可为空。]，可缺失\n    location : str, optional\n        图片搜索类型，取值范围不定，可能为[一个具体的地区名称,可以是一个国家,比如中国、美国、英国；也可以是省级行政区的名称,比如四川、北京、宁夏、香港；也可以是市级行政区的名称,比如成都、朝阳区；也可以是县级行政区的名称,比如金堂县、双流区；不能是一些泛化的区域描述,比如西南地区、华北地区、当前位置、这个位置。可以缺失]，可缺失\n    time : str, optional\n        图片搜索类型，取值范围不定，可能为[通用日期和时间的描述,可以是日期区间,比如最近,最近一周,未来五天,最近七天,周末；也可以是具体的某一天,比如今天、明天、星期六,下周一、7月13日,13号；也可以是某一天内的时间段,比如上午,今天下午,明天晚上；也可以是具体的时刻,比如现在,当前,目前,6点,明天10点。可以缺失]，可缺失\n    search_media_type : str, optional\n        图片搜索类型，取值范围不定，可能为[用户想要搜索的多媒体类型,包含：图片、视频、（动图、gif）,连拍,全景,延时摄影,慢动作,人像景深,实况图,为空则默认为搜图片]，可缺失\n    search_album_type : str, optional\n        图片搜索类型，取值范围不定，可能为[用户想要搜索的图集类型,该图集包含相册自带的和一些自动生成的,具体包含：收藏、截图、人物、微信、美图秀秀、美颜相机、轻颜相机等,可为空]，可缺失\n\n    Returns\n    ----------\n    : List[str]\n        本地图片搜索结果的文件路径列表\n    '''\n    pass\n```\n\n\n```tool-10\ndef photos.share_photo(photo_id: str, contact_app: str, contacts: Dict[str, str]) -> bool:\n    '''\n    分享照片\n\n    Parameters\n    ----------\n    photo_id : str\n        照片ID\n    contact_app : str\n        想要将照片分享的应用app\n    contacts : Dict[str, str]\n        联系人信息，如名字，电话，微信号\n\n    Returns\n    ----------\n    : bool\n        是否成功发送\n    '''\n    pass\n```",
        "query": "把上个月事故现场的车辆损毁照片发给保险公司客服让他尽快处理，再发个朋友圈表达保险公司处理太慢，很无语",
        "ground_truth": [
            {
                "id": 1,
                "name": "photos.search_photo_local",
                "args": {
                    "search_local_photo_keyword": "事故现场",
                    "time": "2024-07",
                    "search_media_type": "图片",
                    "search_album_type": ""
                }
            },
            {
                "id": 2,
                "name": "semantic_search.personal_context_search",
                "args": {
                    "query": "保险公司客服联系方式"
                }
            },
            {
                "id": 3,
                "name": "photos.share_photo",
                "args": {
                    "photo_id": "#E1[0]",
                    "contact_app": "wechat",
                    "contacts": {
                        "name": "保险公司客服",
                        "contact": "#E2"
                    }
                }
            },
            {
                "id": 4,
                "name": "wechat.share_moment",
                "args": {
                    "content": "保险公司处理太慢，很无语"
                }
            }
        ],
        "plan_str": "SubTask1: 搜索上个月事故现场的车辆损毁照片\n#E1 = photos.search_photo_local(search_local_photo_keyword=\"事故现场\", time=\"2024-07\", search_media_type=\"图片\", search_album_type=\"\") \n\nSubTask2: 获取保险公司客服的联系方式\n#E2 = semantic_search.personal_context_search(query=\"保险公司客服联系方式\")\n\nSubTask3: 将事故现场的车辆损毁照片发送给保险公司客服\n#E3 = photos.share_photo(photo_id=#E1[0], contact_app=\"wechat\", contacts={\"name\": \"保险公司客服\", \"contact\": #E2})\n\nSubTask4: 在朋友圈分享对保险公司处理速度的抱怨\n#E4 = wechat.share_moment(content=\"保险公司处理太慢，很无语\")"
    },
    "query_59": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "qunar",
                    "models"
                ],
                "selected_apis_name": [
                    "models.math_qa",
                    "qunar.manage_orders",
                    "models.date_qa",
                    "models.multimodal_qa",
                    "models.extract_information_from_text",
                    "qunar.search_train_tickets",
                    "qunar.search_hotels",
                    "qunar.get_travel_guides",
                    "models.general_response",
                    "models.creative_writing"
                ]
            },
            "environment": {
                "datetime": "2024年08月21日 星期三",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef qunar.manage_orders() -> List[Dict]:\n    '''\n    管理订单\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict]\n        用户的订单列表，包括机票订单、酒店订单等\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.date_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长解答节假日、节气、是否上班、调休信息相关问题；也支持时间推理计算，如日期天数之差、离国庆节还有多久等。\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题，与节假日、节气、调休信息、日期推算相关\n    references : List[Union[List[str], str]]\n        提供的参考信息，能帮助解答问题，如当前日期、星期数等信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef qunar.search_train_tickets(departure_station: str, arrival_station: str, departure_date: str) -> List[Dict]:\n    '''\n    搜索火车票\n\n    Parameters\n    ----------\n    departure_station : str\n        出发站\n    arrival_station : str\n        到达站\n    departure_date : str\n        出发日期，格式为YYYY-MM-DD\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的火车票列表，包括车次信息、价格等\n    '''\n    pass\n```\n\n\n```tool-7\ndef qunar.search_hotels(location: str, check_in_date: str, check_out_date: str) -> List[Dict]:\n    '''\n    搜索酒店\n\n    Parameters\n    ----------\n    location : str\n        酒店所在城市或地点\n    check_in_date : str\n        入住日期，格式为YYYY-MM-DD\n    check_out_date : str\n        退房日期，格式为YYYY-MM-DD\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的酒店列表，包括酒店名称、价格等\n    '''\n    pass\n```\n\n\n```tool-8\ndef qunar.get_travel_guides(destination: str) -> List[Dict]:\n    '''\n    获取旅游攻略\n\n    Parameters\n    ----------\n    destination : str\n        旅游目的地\n\n    Returns\n    ----------\n    : List[Dict]\n        旅游攻略列表，包括景点推荐、餐饮推荐等\n    '''\n    pass\n```\n\n\n```tool-9\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```",
        "query": "帮我做一个中秋小长假去桂林游玩的攻略，2个人，预算4000元，用去哪儿旅行APP，详细一点。",
        "ground_truth": [
            {
                "id": 1,
                "name": "models.date_qa",
                "args": {
                    "instruction": "中秋节放假时间",
                    "references": [
                        "今天日期是2024-08-21，星期三。"
                    ]
                }
            },
            {
                "id": 2,
                "name": "qunar.get_travel_guides",
                "args": {
                    "destination": "桂林"
                }
            },
            {
                "id": 3,
                "name": "qunar.search_train_tickets",
                "args": {}
            },
            {
                "id": 4,
                "name": "qunar.search_hotels",
                "args": {
                    "location": "桂林",
                    "check_in_date": "#E1 第一天",
                    "check_out_date": "#E1 最后一天",
                    "budget": "2000"
                }
            },
            {
                "id": 5,
                "name": "models.creative_writing",
                "args": {
                    "instruction": "根据收集到的信息，规划一个去桂林的中秋小长假旅游计划",
                    "references": [
                        "#E1",
                        "#E2",
                        "#E3",
                        "#E4"
                    ]
                }
            }
        ],
        "plan_str": "SubTask1: 需要获取中秋节放假的时间\n#E1 = models.date_qa(instruction=\"中秋节放假时间\", references=[\"今天日期是2024-08-21，星期三。\"])\n\nSubTask2: 需要获取中秋假期去桂林游玩的相关信息，包括景点、美食、住宿等\n#E2 = qunar.get_travel_guides(destination=\"桂林\")\n\nSubTask3: 搜索中秋假期深圳去桂林的火车票\n#E3 = qunar.search_train_tickets(departure_station=\"深圳\", arrival_station=\"桂林\", \ndeparture_date=\"#E1 第一天\", return_date=\"#E1 最后一天\")\n\nSubTask4: 搜索中秋假期去桂林的酒店，预算4000元/2人/3晚\n#E4 = qunar.search_hotels(location=\"桂林\", check_in_date=\"#E1 第一天\", check_out_date=\"#E1 最后一天\", budget=2000)\n\nSubTask5: 根据收集到的信息，规划一个去桂林的中秋小长假旅游计划\n#E5 = models.creative_writing(instruction=\"根据收集到的信息，规划一个去桂林的中秋小长假旅游计划\", references=[#E1, #E2, #E3, #E4])"
    },
    "query_60": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "wechat",
                    "royalflush",
                    "models"
                ],
                "selected_apis_name": [
                    "wechat.send_message",
                    "wechat.make_call",
                    "royalflush.get_stock_prices",
                    "models.scan_image_then_extract_information",
                    "models.extract_information_from_text",
                    "royalflush.set_price_alert",
                    "wechat.manage_contacts",
                    "wechat.manage_group",
                    "royalflush.analyze_portfolio",
                    "wechat.wechat_pay"
                ]
            },
            "environment": {
                "datetime": "2020年06月30日 星期二",
                "location": "安徽省淮北市"
            }
        },
        "api_descriptions": "```tool-1\ndef wechat.send_message(recipient_id: str, message_type: str, content: Union[str, bytes]) -> bool:\n    '''\n    发送消息\n\n    Parameters\n    ----------\n    recipient_id : str\n        消息接收者ID\n    message_type : str\n        消息类型，如'text', 'image', 'video', 'voice'\n    content : Union[str, bytes]\n        消息内容，根据消息类型可以是文字、图片、视频二进制数据等\n\n    Returns\n    ----------\n    : bool\n        发送消息操作是否成功\n    '''\n    pass\n```\n\n\n```tool-2\ndef wechat.make_call(recipient_id: str, call_type: str) -> bool:\n    '''\n    语音和视频通话\n\n    Parameters\n    ----------\n    recipient_id : str\n        通话接收者ID\n    call_type : str\n        通话类型，'voice'或'video'\n\n    Returns\n    ----------\n    : bool\n        通话操作是否成功\n    '''\n    pass\n```\n\n\n```tool-3\ndef royalflush.get_stock_prices(stock_symbols: List[str], date_range: str) -> List[Dict]:\n    '''\n    查询股票行情\n\n    Parameters\n    ----------\n    stock_symbols : List[str]\n        股票代码列表\n    date_range : str, optional\n        查询日期范围，格式为YYYY-MM-DD~YYYY-MM-DD\n\n    Returns\n    ----------\n    : List[Dict]\n        股票行情列表，包括股票代码、名称、实时价格、涨跌幅等\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.scan_image_then_extract_information(instruction: str, image_url: str) -> str:\n    '''\n    擅长从给定(手机屏幕)图片中抽取需要的信息，例如从手机/PC等设备屏幕上抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将从该图片中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef royalflush.set_price_alert(stock_symbol: str, target_price: float) -> bool:\n    '''\n    设定行情提醒\n\n    Parameters\n    ----------\n    stock_symbol : str\n        股票代码\n    target_price : float\n        目标价格，达到此价格触发提醒\n\n    Returns\n    ----------\n    : bool\n        设定操作是否成功\n    '''\n    pass\n```\n\n\n```tool-7\ndef wechat.manage_contacts(action: str, contact_id: Optional[str], contact_info: Optional[Dict[str, Union[str, int]]]) -> Union[List[Dict[str, Union[str, int]]], bool]:\n    '''\n    管理好友\n\n    Parameters\n    ----------\n    action : str\n        操作类型，例如'add', 'delete', 'block', 'view'\n    contact_id : Optional[str], optional\n        好友ID，仅在添加、删除、屏蔽时需要\n    contact_info : Optional[Dict[str, Union[str, int]]], optional\n        好友信息，仅在添加或更新时需要\n\n    Returns\n    ----------\n    : Union[List[Dict[str, Union[str, int]]], bool]\n        好友信息列表，或好友管理操作是否成功\n    '''\n    pass\n```\n\n\n```tool-8\ndef wechat.manage_group(action: str, group_id: str, member_id: Optional[str]) -> Union[Dict[str, Union[str, List[str]]], bool]:\n    '''\n    管理群聊\n\n    Parameters\n    ----------\n    action : str\n        操作类型，例如'add_member', 'remove_member', 'view'\n    group_id : str\n        群聊ID\n    member_id : Optional[str], optional\n        群聊成员ID，仅在添加或删除成员时需要\n\n    Returns\n    ----------\n    : Union[Dict[str, Union[str, List[str]]], bool]\n        群聊信息，或群聊管理操作是否成功\n    '''\n    pass\n```\n\n\n```tool-9\ndef royalflush.analyze_portfolio() -> Dict:\n    '''\n    投资组合分析\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : Dict\n        投资组合分析结果，包括收益率、风险评估等\n    '''\n    pass\n```\n\n\n```tool-10\ndef wechat.wechat_pay(amount: float, merchant_id: str) -> bool:\n    '''\n    微信支付\n\n    Parameters\n    ----------\n    amount : float\n        支付金额\n    merchant_id : str\n        商户ID\n\n    Returns\n    ----------\n    : bool\n        支付操作是否成功\n    '''\n    pass\n```",
        "query": "帮我总结一下我买的股票最近哪些涨了哪些跌了，并把涨的股票信息汇总后用微信发给张帆，推荐他买这几个股票。",
        "ground_truth": [
            {
                "id": 1,
                "name": "royalflush.analyze_portfolio",
                "args": {}
            },
            {
                "id": 2,
                "name": "models.extract_information_from_text",
                "args": {
                    "instruction": "提取涨的股票信息",
                    "text": "#E1"
                }
            },
            {
                "id": 3,
                "name": "wechat.manage_contacts",
                "args": {
                    "action": "view",
                    "contact_id": "None",
                    "contact_info": {
                        "name": "张帆"
                    }
                }
            },
            {
                "id": 4,
                "name": "wechat.send_message",
                "args": {
                    "recipient_id": "#E3",
                    "message_type": "text",
                    "content": "推荐购买这些股票：#E2"
                }
            }
        ],
        "plan_str": "SubTask1: 分析用户的投资组合，确定哪些股票最近涨了，哪些股票最近跌了\n#E1 = royalflush.analyze_portfolio()\n\nSubTask2: 提取涨的股票信息\n#E2 = models.extract_information_from_text(instruction=\"提取涨的股票信息\", text=#E1)\n\nSubTask3: 查找张帆的微信联系方式\n#E3 = wechat.manage_contacts(action=\"view\", contact_id=None, contact_info={\"name\": \"张帆\"})\n\nSubTask4: 通过微信发送涨的股票信息给张帆，并推荐购买这些股票\n#E4 = wechat.send_message(recipient_id=#E3, message_type=\"text\", content=\"推荐购买这些股票：#E2\")"
    },
    "query_61": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "wechat",
                    "semantic_search",
                    "singtogether"
                ],
                "selected_apis_name": [
                    "singtogether.join_duet",
                    "singtogether.create_song",
                    "singtogether.download_song",
                    "wechat.make_call",
                    "wechat.wechat_pay",
                    "wechat.send_message",
                    "semantic_search.personal_context_search",
                    "wechat.receive_message",
                    "wechat.manage_subscriptions",
                    "singtogether.cast_to_tv"
                ]
            },
            "environment": {
                "datetime": "2024年01月06日 星期六",
                "location": "湖北省十堰市"
            }
        },
        "api_descriptions": "```tool-1\ndef singtogether.join_duet(song_id: str, partner_id: str) -> bool:\n    '''\n    用于加入一个合唱\n\n    Parameters\n    ----------\n    song_id : str\n        要合唱的歌曲ID\n    partner_id : str\n        合唱伙伴的用户ID\n\n    Returns\n    ----------\n    : bool\n        加入合唱是否成功的标志\n    '''\n    pass\n```\n\n\n```tool-2\ndef singtogether.create_song(title: str, lyrics: str, background_music: str) -> str:\n    '''\n    用于创作一首新歌\n\n    Parameters\n    ----------\n    title : str\n        歌曲标题\n    lyrics : str\n        歌曲歌词\n    background_music : str\n        背景音乐文件路径\n\n    Returns\n    ----------\n    : str\n        新创作歌曲的唯一标识符（ID）\n    '''\n    pass\n```\n\n\n```tool-3\ndef singtogether.download_song(song_id: str) -> str:\n    '''\n    用于下载一首歌作为视频\n\n    Parameters\n    ----------\n    song_id : str\n        要下载的歌曲ID\n\n    Returns\n    ----------\n    : str\n        下载的视频文件的URL地址\n    '''\n    pass\n```\n\n\n```tool-4\ndef wechat.make_call(recipient_id: str, call_type: str) -> bool:\n    '''\n    语音和视频通话\n\n    Parameters\n    ----------\n    recipient_id : str\n        通话接收者ID\n    call_type : str\n        通话类型，'voice'或'video'\n\n    Returns\n    ----------\n    : bool\n        通话操作是否成功\n    '''\n    pass\n```\n\n\n```tool-5\ndef wechat.wechat_pay(amount: float, merchant_id: str) -> bool:\n    '''\n    微信支付\n\n    Parameters\n    ----------\n    amount : float\n        支付金额\n    merchant_id : str\n        商户ID\n\n    Returns\n    ----------\n    : bool\n        支付操作是否成功\n    '''\n    pass\n```\n\n\n```tool-6\ndef wechat.send_message(recipient_id: str, message_type: str, content: Union[str, bytes]) -> bool:\n    '''\n    发送消息\n\n    Parameters\n    ----------\n    recipient_id : str\n        消息接收者ID\n    message_type : str\n        消息类型，如'text', 'image', 'video', 'voice'\n    content : Union[str, bytes]\n        消息内容，根据消息类型可以是文字、图片、视频二进制数据等\n\n    Returns\n    ----------\n    : bool\n        发送消息操作是否成功\n    '''\n    pass\n```\n\n\n```tool-7\ndef semantic_search.personal_context_search(query: str) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef wechat.receive_message(filter: Optional[Dict[str, Union[str, List[str]]]]) -> List[Dict[str, Union[str, bytes]]]:\n    '''\n    接收消息\n\n    Parameters\n    ----------\n    filter : Optional[Dict[str, Union[str, List[str]]]], optional\n        过滤条件，如消息类型、发送者ID等\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, bytes]]]\n        接收到的消息列表，每条消息包含详细信息\n    '''\n    pass\n```\n\n\n```tool-9\ndef wechat.manage_subscriptions(action: str, account_id: Optional[str]) -> Union[List[Dict[str, Union[str, int]]], bool]:\n    '''\n    管理公众号订阅\n\n    Parameters\n    ----------\n    action : str\n        操作类型，例如'subscribe', 'unsubscribe', 'view'\n    account_id : Optional[str], optional\n        公众号ID，仅在订阅或取消订阅时需要\n\n    Returns\n    ----------\n    : Union[List[Dict[str, Union[str, int]]], bool]\n        公众号信息列表，或公众号管理操作是否成功\n    '''\n    pass\n```\n\n\n```tool-10\ndef singtogether.cast_to_tv(song_id: str, tv_device_id: str) -> bool:\n    '''\n    用于将作品投射到电视播放\n\n    Parameters\n    ----------\n    song_id : str\n        要投射的歌曲ID\n    tv_device_id : str\n        电视设备ID\n\n    Returns\n    ----------\n    : bool\n        投射操作是否成功\n    '''\n    pass\n```",
        "query": "我想唱一首青花瓷发我女朋友听",
        "ground_truth": [
            {
                "id": 1,
                "name": "semantic_search.personal_context_search",
                "args": {
                    "query": "青花瓷 歌曲ID"
                }
            },
            {
                "id": 2,
                "name": "singtogether.create_song",
                "args": {
                    "title": "青花瓷",
                    "lyrics": "青花瓷的歌词",
                    "background_music": "青花瓷的背景音乐路径"
                }
            },
            {
                "id": 3,
                "name": "semantic_search.personal_context_search",
                "args": {
                    "query": "女朋友的联系方式"
                }
            },
            {
                "id": 4,
                "name": "wechat.send_message",
                "args": {
                    "recipient_id": "#E3",
                    "message_type": "audio",
                    "content": "#E2"
                }
            }
        ],
        "plan_str": "SubTask1: 查找歌曲《青花瓷》的ID\n#E1 = semantic_search.personal_context_search(query=\"青花瓷 歌曲ID\")\n\nSubTask2: 录制并保存《青花瓷》歌曲\n#E2 = singtogether.create_song(title=\"青花瓷\", lyrics=\"青花瓷的歌词\", background_music=\"青花瓷的背景音乐路径\")\n\nSubTask3: 查找用户女朋友的联系方式\n#E3 = semantic_search.personal_context_search(query=\"女朋友的联系方式\")\n\nSubTask4: 将录制的《青花瓷》发送给用户的女朋友\n#E4 = wechat.send_message(recipient_id=#E3, message_type=\"audio\", content=#E2)"
    },
    "query_62": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "study163",
                    "models"
                ],
                "selected_apis_name": [
                    "study163.get_user_profile",
                    "study163.search_courses",
                    "study163.watch_course_video",
                    "models.general_response",
                    "study163.browse_courses",
                    "study163.get_course_detail",
                    "study163.update_user_profile",
                    "models.extract_information_from_text",
                    "models.search_then_response",
                    "models.scan_image_then_extract_information"
                ]
            },
            "environment": {
                "datetime": "2021年05月15日 星期六",
                "location": "四川省广元市"
            }
        },
        "api_descriptions": "```tool-1\ndef study163.get_user_profile() -> Dict:\n    '''\n    获取用户个人资料\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : Dict\n        用户的个人信息，包括昵称、头像、学习记录等\n    '''\n    pass\n```\n\n\n```tool-2\ndef study163.search_courses(keywords: str) -> List[Dict]:\n    '''\n    搜索课程\n\n    Parameters\n    ----------\n    keywords : str\n        搜索关键词\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的课程列表，包括课程名称、简介、图片等\n    '''\n    pass\n```\n\n\n```tool-3\ndef study163.watch_course_video(course_id: str, video_id: str) -> bool:\n    '''\n    观看课程视频\n\n    Parameters\n    ----------\n    course_id : str\n        课程ID\n    video_id : str\n        视频ID\n\n    Returns\n    ----------\n    : bool\n        观看操作是否成功\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef study163.browse_courses(category: str, filter: str, sort_by: str) -> List[Dict]:\n    '''\n    浏览课程\n\n    Parameters\n    ----------\n    category : str, optional\n        课程分类，如科学、艺术、技术等\n    filter : str, optional\n        过滤条件，如免费的、热门的等\n    sort_by : str, optional\n        排序方式，如最新、评分等\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的课程列表，包括课程名称、简介、图片等\n    '''\n    pass\n```\n\n\n```tool-6\ndef study163.get_course_detail(course_id: str) -> Dict:\n    '''\n    获取课程详细信息\n\n    Parameters\n    ----------\n    course_id : str\n        课程ID\n\n    Returns\n    ----------\n    : Dict\n        课程的详细信息，包括名称、讲师、课程大纲等\n    '''\n    pass\n```\n\n\n```tool-7\ndef study163.update_user_profile(profile_info: Dict) -> bool:\n    '''\n    更新用户个人资料\n\n    Parameters\n    ----------\n    profile_info : Dict\n        需要更新的个人资料信息\n\n    Returns\n    ----------\n    : bool\n        更新操作是否成功\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef models.search_then_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个具备搜索引擎能力的问答模型，具备以下能力：\n1. 搜索实时信息并总结。如果用户问题涉及时效性信息，问答模型第一步通过搜索引擎检索信息，第二步对检索的多个信息进行汇总，生成回复；\n2. 问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的instruction和给定的参考references，生成正确、有用、安全的回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令/问题，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        返回的回复\n    '''\n    pass\n```\n\n\n```tool-10\ndef models.scan_image_then_extract_information(instruction: str, image_url: str) -> str:\n    '''\n    擅长从给定(手机屏幕)图片中抽取需要的信息，例如从手机/PC等设备屏幕上抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将从该图片中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```",
        "query": "我想看一下吴恩达老师的machine learning的第五节课",
        "ground_truth": [
            {
                "id": 1,
                "name": "study163.search_courses",
                "args": {
                    "keywords": "吴恩达 machine learning"
                }
            },
            {
                "id": 2,
                "name": "study163.get_course_detail",
                "args": {
                    "course_id": "#E1[0]['course_id']"
                }
            },
            {
                "id": 3,
                "name": "models.extract_information_from_text",
                "args": {
                    "text": "#E2",
                    "instruction": "找到第五节课的视频ID"
                }
            },
            {
                "id": 4,
                "name": "study163.watch_course_video",
                "args": {
                    "course_id": "#E1[0]['course_id']",
                    "video_id": "#E3"
                }
            }
        ],
        "plan_str": "SubTask1: 搜索吴恩达老师的machine learning课程\n#E1 = study163.search_courses(keywords=\"吴恩达 machine learning\")\nSubTask2: 获取课程详细信息，以便获取第五节课信息\n#E2 = study163.get_course_detail(course_id=#E1[0]['course_id'])\nSubTask3: 查找课程中第五节课的视频ID\n#E3 = models.extract_information_from_text(text=#E2, instruction=\"找到第五节课的视频ID\")\nSubTask4: 播放第五节课的视频\n#E4 = study163.watch_course_video(course_id=#E1[0]['course_id'], video_id=#E3) \n"
    },
    "query_63": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "photos",
                    "semantic_search",
                    "wewave",
                    "models"
                ],
                "selected_apis_name": [
                    "photos.search_picture_no_purpose",
                    "models.multimodal_qa",
                    "photos.share_photo",
                    "photos.search_photo_local",
                    "models.creative_writing",
                    "wewave.post_weibo",
                    "semantic_search.personal_context_search",
                    "models.general_response",
                    "photos.edit_photo",
                    "wewave.get_short_videos"
                ]
            },
            "environment": {
                "datetime": "2024年08月21日 星期三",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef photos.search_picture_no_purpose(search_picture_keyword: str) -> List[str]:\n    '''\n    无目的搜索 <无目的搜索-相册搜索>属于<动效播放>类设置项，<无目的搜索>是<无目的搜索-相册搜索>设置项的一个具体操作指令，主要用于图片搜索可以让用户通过输入关键词等方式在系统图库或网络上快速查找特定的图片。无目的搜索是指用户在没有明确目标的情况下，同时在本地存储空间和网络资源中广泛地搜索图片。在系统功能中的定义是提供一种较为宽泛的图片查找方式，不局限于特定主题或类别，旨在帮助用户发现更多可能感兴趣的图片。它可以帮助用户在本地相册中随机找到一些以往可能忽略的图片，也能在网络上搜索到各种不同风格、主题的图片资源，为用户提供更多视觉上的选择和灵感来源。\n\n    Parameters\n    ----------\n    search_picture_keyword : str\n        无目的搜索-相册搜索类型，取值范围不定，可能为[需要搜索的图片的名称、类型或关键词,用户可以输入具体的图片名称、类型或模糊的图片描述。此参数不可为空。]，不可缺失\n\n    Returns\n    ----------\n    : List[str]\n        搜索结果图片的URL列表\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef photos.share_photo(photo_id: str, contact_app: str, contacts: Dict[str, str]) -> bool:\n    '''\n    分享照片\n\n    Parameters\n    ----------\n    photo_id : str\n        照片ID\n    contact_app : str\n        想要将照片分享的应用app\n    contacts : Dict[str, str]\n        联系人信息，如名字，电话，微信号\n\n    Returns\n    ----------\n    : bool\n        是否成功发送\n    '''\n    pass\n```\n\n\n```tool-4\ndef photos.search_photo_local(search_local_photo_keyword: str, location: str, time: str, search_media_type: str, search_album_type: str) -> List[str]:\n    '''\n    本地图片搜索 <图片搜索>属于<动效播放>类设置项，<本地图片搜索>是<图片搜索>设置项的一个具体操作指令，主要用于图片搜索可以让用户通过输入关键词等方式在系统图库或网络上快速查找特定的图片。在系统功能中的定义就是提供一种便捷的途径，帮助用户从大量的图片资源中精准定位到想要查找的图片，节省用户查找图片的时间和精力，提高用户在管理和浏览图片时的效率和体验。本地图片搜索是图片搜索下的一个类别，可以查找本地保存的特定主题的照片、特定时间拍摄的图片。它可以快速定位到用户手机内保存的各种图片，包括用户拍摄的照片、下载的图片、截图等。在系统功能中的定义就是通过特定的算法和索引，对本地存储的图片文件进行检索和筛选，以便用户能够精准、高效地找到他们想要的本地图片资源。\n\n\n    Parameters\n    ----------\n    search_local_photo_keyword : str, optional\n        图片搜索类型，取值范围不定，可能为[需要通过本地相册搜索的网络图片的名称或关键词,用户可以输入具体的图片名称、类型或模糊的图片描述,比如大草原、沙漠、湖泊、森林、汽车等,此参数可为空。]，可缺失\n    location : str, optional\n        图片搜索类型，取值范围不定，可能为[一个具体的地区名称,可以是一个国家,比如中国、美国、英国；也可以是省级行政区的名称,比如四川、北京、宁夏、香港；也可以是市级行政区的名称,比如成都、朝阳区；也可以是县级行政区的名称,比如金堂县、双流区；不能是一些泛化的区域描述,比如西南地区、华北地区、当前位置、这个位置。可以缺失]，可缺失\n    time : str, optional\n        图片搜索类型，取值范围不定，可能为[通用日期和时间的描述,可以是日期区间,比如最近,最近一周,未来五天,最近七天,周末；也可以是具体的某一天,比如今天、明天、星期六,下周一、7月13日,13号；也可以是某一天内的时间段,比如上午,今天下午,明天晚上；也可以是具体的时刻,比如现在,当前,目前,6点,明天10点。可以缺失]，可缺失\n    search_media_type : str, optional\n        图片搜索类型，取值范围不定，可能为[用户想要搜索的多媒体类型,包含：图片、视频、（动图、gif）,连拍,全景,延时摄影,慢动作,人像景深,实况图,为空则默认为搜图片]，可缺失\n    search_album_type : str, optional\n        图片搜索类型，取值范围不定，可能为[用户想要搜索的图集类型,该图集包含相册自带的和一些自动生成的,具体包含：收藏、截图、人物、微信、美图秀秀、美颜相机、轻颜相机等,可为空]，可缺失\n\n    Returns\n    ----------\n    : List[str]\n        本地图片搜索结果的文件路径列表\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef wewave.post_weibo(content: str, images: List[str], video: str) -> bool:\n    '''\n    发布新的微博\n\n    Parameters\n    ----------\n    content : str\n        微博内容\n    images : List[str], optional\n        微博图片列表\n    video : str, optional\n        微博视频链接\n\n    Returns\n    ----------\n    : bool\n        发布微博是否成功的状态\n    '''\n    pass\n```\n\n\n```tool-7\ndef semantic_search.personal_context_search(query: str) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef photos.edit_photo(photo_id: str, editoptions: str) -> Union[str, bool]:\n    '''\n    编辑指定ID的照片，例如裁剪、调整滤镜等\n\n    Parameters\n    ----------\n    photo_id : str\n        照片ID\n    editoptions : str\n        编辑照片操作，如裁剪参数、滤镜选项等\n\n    Returns\n    ----------\n    : Union[str, bool]\n        编辑后新的照片ID,或是否在原图上编辑成功\n    '''\n    pass\n```\n\n\n```tool-10\ndef wewave.get_short_videos() -> List[Dict[str, Union[str, int, float]]]:\n    '''\n    获取微博短视频列表\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, int, float]]]\n        微博短视频列表，包括视频的标题、URL、时长等信息\n    '''\n    pass\n```",
        "query": "查找我昨天在黄山拍摄的图片，将它们在微信上分享到我的家族群，并写一段文字分享到我的微博",
        "ground_truth": [
            {
                "id": 1,
                "name": "photos.search_photo_local",
                "args": {
                    "search_local_photo_keyword": "",
                    "location": "黄山",
                    "time": "2024-08-20",
                    "search_media_type": "图片",
                    "search_album_type": ""
                }
            },
            {
                "id": 2,
                "name": "semantic_search.personal_context_search",
                "args": {
                    "query": "家族群ID"
                }
            },
            {
                "id": 3,
                "name": "photos.share_photo",
                "args": {
                    "photo_id": "#E1",
                    "contact_app": "wechat",
                    "contacts": {
                        "group_id": "#E2"
                    }
                }
            },
            {
                "id": 4,
                "name": "models.multimodal_qa",
                "args": {
                    "instruction": "获取给定图片的描述",
                    "image_url": [
                        "#E1"
                    ]
                }
            },
            {
                "id": 5,
                "name": "models.creative_writing",
                "args": {
                    "instruction": "根据描述写一段关于微博文章",
                    "references": [
                        "#E4"
                    ]
                }
            },
            {
                "id": 6,
                "name": "wewave.post_weibo",
                "args": {
                    "content": "#E4",
                    "images": "#E1",
                    "video": ""
                }
            }
        ],
        "plan_str": "SubTask1: 搜索用户昨天在黄山拍摄的图片\n#E1 = photos.search_photo_local(search_local_photo_keyword=\"\", location=\"黄山\", time=\"2024-08-20\", search_media_type=\"图片\", search_album_type=\"\") \n\nSubTask2: 获取用户的家族群ID\n#E2 = semantic_search.personal_context_search(query=\"家族群ID\")\n\nSubTask3: 将搜索到的图片分享到微信家族群\n#E3 = photos.share_photo(photo_id=#E1, contact_app=\"wechat\", contacts={\"group_id\": #E2})\n\nSubTask4: 获取关于图片的描述\n#E4 = models.multimodal_qa(instruction=\"获取给定图片的描述\", image_url=[#E1])\n\nSubTask5: 写一段微博文字\n#E5 = models.creative_writing(instruction=\"根据描述写一段关于微博文章\", references=[#E4])\n\nSubTask6: 将文字和图片分享到微博\n#E6 = wewave.post_weibo(content=#E4, images=#E1, video=\"\")"
    },
    "query_64": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "semantic_search",
                    "models"
                ],
                "selected_apis_name": [
                    "models.date_qa",
                    "models.extract_information_from_text",
                    "semantic_search.personal_context_search",
                    "models.creative_writing",
                    "models.search_then_response",
                    "models.math_qa",
                    "models.directly_answer",
                    "semantic_search.web_search",
                    "models.personal_qa",
                    "models.image_search"
                ]
            },
            "environment": {
                "datetime": "2024年02月23日 星期五",
                "location": "广西壮族自治区百色市"
            }
        },
        "api_descriptions": "```tool-1\ndef models.date_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长解答节假日、节气、是否上班、调休信息相关问题；也支持时间推理计算，如日期天数之差、离国庆节还有多久等。\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题，与节假日、节气、调休信息、日期推算相关\n    references : List[Union[List[str], str]]\n        提供的参考信息，能帮助解答问题，如当前日期、星期数等信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef semantic_search.personal_context_search(query: str) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.search_then_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个具备搜索引擎能力的问答模型，具备以下能力：\n1. 搜索实时信息并总结。如果用户问题涉及时效性信息，问答模型第一步通过搜索引擎检索信息，第二步对检索的多个信息进行汇总，生成回复；\n2. 问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的instruction和给定的参考references，生成正确、有用、安全的回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令/问题，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        返回的回复\n    '''\n    pass\n```\n\n\n```tool-6\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.directly_answer(answer: str) -> str:\n    '''\n    你可以通过这个工具直接回答问题。例如以下情况，你可以直接回答：\n1. 用户的问题属于简单闲聊类，如问候语、询问人设信息等；\n2. 用户问题的答案可以直接从屏幕图片中获取，如图片中的文字、颜色、数量等显式信息。\n\n    Parameters\n    ----------\n    answer : str\n        answer\n\n    Returns\n    ----------\n    : str\n        问题答案\n    '''\n    pass\n```\n\n\n```tool-8\ndef semantic_search.web_search(query: str, count: int) -> List[str]:\n    '''\n    网页搜索，根据输入的query，在搜索引擎中查找相关页面，可用于查找人物、物品、体育赛事、事件相关的时效性信息，精确信息。\n\n    Parameters\n    ----------\n    query : str\n        用户搜索的关键词、短语、查询，该参数项不能为空。\n    count : int, optional\n        期望返回的搜索结果数量\n\n    Returns\n    ----------\n    : List[str]\n        搜索引擎返回的结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef models.personal_qa(instruction: str, user_features: str, references: Dict[str, str]) -> str:\n    '''\n    擅长回复可以结合用户个性化信息回答的问题\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题\n    user_features : str\n        提供的用户个性化信息\n    references : Dict[str, str], optional\n        参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef models.image_search(image_url: str) -> str:\n    '''\n    一个基于给定的图片搜索图中事物相关信息的模型，该模型的能力包括：\n1. 搜索著名人物的身份、经历，包括明星、政客、历史人物、体育明星等；\n2. 识别图像中动物/植物的品种；\n3. 识别照片中地点或景点的名称和地址。\n\n    Parameters\n    ----------\n    image_url : str\n        给定图片地址，将搜索该图片中的人、动植物或地点的相关信息\n\n    Returns\n    ----------\n    : str\n        图片中事物的相关信息\n    '''\n    pass\n```",
        "query": "看一下还有多少天我女朋友过生日",
        "ground_truth": [
            {
                "id": 1,
                "name": "semantic_search.personal_context_search",
                "args": {
                    "query": "女朋友生日是哪天"
                }
            },
            {
                "id": 2,
                "name": "models.date_qa",
                "args": {
                    "instruction": "计算距离 #E1 还有多少天",
                    "references": [
                        "今天日期是2024-08-21，星期三。"
                    ]
                }
            }
        ],
        "plan_str": "SubTask1: 查找女朋友生日是哪天\n#E1 = semantic_search.personal_context_search(query=\"女朋友生日是哪天\")\nSubTask2: 计算距离女朋友生日还有多少天\n#E2 = models.date_qa(instruction=\"计算距离 #E1 还有多少天\", references=[\"今天日期是2024-08-21，星期三。\"])"
    },
    "query_65": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "messages",
                    "phone"
                ],
                "selected_apis_name": [
                    "messages.delete_message",
                    "phone.manage_contacts",
                    "phone.reject_call",
                    "phone.add_contact",
                    "messages.send_text_message",
                    "phone.manage_call_recordings",
                    "phone.manage_blacklist",
                    "messages.list_messages",
                    "messages.search_messages",
                    "phone.set_ringtone"
                ]
            },
            "environment": {
                "datetime": "2021年10月07日 星期四",
                "location": "河南省信阳市"
            }
        },
        "api_descriptions": "```tool-1\ndef messages.delete_message(message_id: str) -> bool:\n    '''\n    删除指定ID的消息\n\n    Parameters\n    ----------\n    message_id : str\n        消息ID\n\n    Returns\n    ----------\n    : bool\n        删除操作是否成功\n    '''\n    pass\n```\n\n\n```tool-2\ndef phone.manage_contacts(action: str, contact_info: Optional[Dict[str, str]]) -> Union[List[Dict[str, str]], bool]:\n    '''\n    管理联系人\n\n    Parameters\n    ----------\n    action : str\n        操作类型，例如'add', 'delete', 'update', 'view'\n    contact_info : Optional[Dict[str, str]], optional\n        联系人信息，仅在添加或更新时需要\n\n    Returns\n    ----------\n    : Union[List[Dict[str, str]], bool]\n        联系人信息列表，或联系人管理操作是否成功\n    '''\n    pass\n```\n\n\n```tool-3\ndef phone.reject_call(call_id: str) -> bool:\n    '''\n    拒接电话\n\n    Parameters\n    ----------\n    call_id : str\n        来电的唯一标识ID\n\n    Returns\n    ----------\n    : bool\n        拒接电话操作是否成功\n    '''\n    pass\n```\n\n\n```tool-4\ndef phone.add_contact(name: str, phone_number: str, email: str, address: str, birthday: str) -> Union[List[Dict[str, str]], bool]:\n    '''\n    添加联系人\n\n    Parameters\n    ----------\n    name : str\n        联系人姓名\n    phone_number : str\n        联系人号码\n    email : str, optional\n        联系人邮箱\n    address : str, optional\n        联系人地址\n    birthday : str, optional\n        联系人生日\n\n    Returns\n    ----------\n    : Union[List[Dict[str, str]], bool]\n        添加联系人操作是否成功\n    '''\n    pass\n```\n\n\n```tool-5\ndef messages.send_text_message(recipient: List[str], title: str, message: str) -> str:\n    '''\n    发送文本消息\n\n    Parameters\n    ----------\n    recipient : List[str]\n        接收者的电话号码\n    title : str, optional\n        文本消息标题\n    message : str\n        文本消息的内容\n\n    Returns\n    ----------\n    : str\n        消息ID\n    '''\n    pass\n```\n\n\n```tool-6\ndef phone.manage_call_recordings(action: str, call_id: Optional[str], recording_id: Optional[str]) -> Union[bool, List[Dict[str, str]], bytes]:\n    '''\n    通话录音\n\n    Parameters\n    ----------\n    action : str\n        操作类型，例如'record', 'stop', 'play', 'delete', 'view'\n    call_id : Optional[str], optional\n        通话的唯一标识ID，仅在录音和停止时需要\n    recording_id : Optional[str], optional\n        录音文件的唯一标识ID，仅在播放、删除或查看时需要\n\n    Returns\n    ----------\n    : Union[bool, List[Dict[str, str]], bytes]\n        录音操作是否成功，或录音文件列表，或录音文件内容\n    '''\n    pass\n```\n\n\n```tool-7\ndef phone.manage_blacklist(action: str, phone_number: Optional[str]) -> Union[List[str], bool]:\n    '''\n    拒接来电和黑名单管理\n\n    Parameters\n    ----------\n    action : str\n        操作类型，例如'add', 'remove', 'view'\n    phone_number : Optional[str], optional\n        电话号码，仅在添加或移除时需要\n\n    Returns\n    ----------\n    : Union[List[str], bool]\n        黑名单号码列表，或黑名单管理操作是否成功\n    '''\n    pass\n```\n\n\n```tool-8\ndef messages.list_messages(filter: str, sort_by: str) -> List[str]:\n    '''\n    获取所有消息的列表\n\n    Parameters\n    ----------\n    filter : str, optional\n        过滤条件，如联系人、日期等\n    sort_by : str, optional\n        排序条件，如时间、联系人等\n\n    Returns\n    ----------\n    : List[str]\n        消息ID的列表，每个ID可以链接到消息的详细内容\n    '''\n    pass\n```\n\n\n```tool-9\ndef messages.search_messages(query: str) -> List[str]:\n    '''\n    根据关键词搜索消息\n\n    Parameters\n    ----------\n    query : str\n        搜索关键词\n\n    Returns\n    ----------\n    : List[str]\n        搜索结果，符合条件的消息ID列表\n    '''\n    pass\n```\n\n\n```tool-10\ndef phone.set_ringtone(ringtone: str, vibration_mode: bool) -> bool:\n    '''\n    设置铃声和振动模式\n\n    Parameters\n    ----------\n    ringtone : str, optional\n        铃声文件的路径\n    vibration_mode : bool, optional\n        是否启用振动模式\n\n    Returns\n    ----------\n    : bool\n        设置铃声和振动模式操作是否成功\n    '''\n    pass\n```",
        "query": "今天晚上加班，告诉联系人中的同学群组，说同学聚会我会晚一点到。",
        "ground_truth": [
            {
                "id": 1,
                "name": "phone.manage_contacts",
                "args": {
                    "action": "view",
                    "contact_info": {
                        "name": "同学群组"
                    }
                }
            },
            {
                "id": 2,
                "name": "messages.send_text_message",
                "args": {
                    "recipient": [
                        "#E1[0][\"phoneNumber\""
                    ],
                    "title": "聚会消息",
                    "message": "同学聚会我会晚一点到，因为今天晚上加班。"
                }
            }
        ],
        "plan_str": "SubTask1: 查找联系人中“同学群组”的联系方式\n#E1 = phone.manage_contacts(action=\"view\", contact_info={\"name\": \"同学群组\"})\nSubTask2: 发送消息给“同学群组”\n#E2 = messages.send_text_message(recipient=[#E1[0][\"phoneNumber\"]], title=\"聚会消息\", message=\"同学聚会我会晚一点到，因为今天晚上加班。\")"
    },
    "query_66": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "semantic_search",
                    "models"
                ],
                "selected_apis_name": [
                    "models.extract_information_from_text",
                    "models.general_response",
                    "models.safety_response",
                    "models.creative_writing",
                    "models.scan_image_then_extract_information",
                    "models.math_qa",
                    "semantic_search.personal_context_search",
                    "models.image_search",
                    "semantic_search.web_search",
                    "models.multimodal_qa"
                ]
            },
            "environment": {
                "datetime": "2020年04月27日 星期一",
                "location": "广东省中山市"
            }
        },
        "api_descriptions": "```tool-1\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.safety_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长回应与安全价值观相关的问题，用于直接回答黄赌毒、性别歧视、社会和谐、道德伦理、涉政、宗教、和恶意引导/诱导相关的用户请求。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题存在安全价值观风险，如黄赌毒、涉政、宗教、或恶意引导。\n    references : List[Union[List[str], str]]\n        应答安全价值观相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的安全且友好的回复结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.scan_image_then_extract_information(instruction: str, image_url: str) -> str:\n    '''\n    擅长从给定(手机屏幕)图片中抽取需要的信息，例如从手机/PC等设备屏幕上抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将从该图片中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-7\ndef semantic_search.personal_context_search(query: str) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.image_search(image_url: str) -> str:\n    '''\n    一个基于给定的图片搜索图中事物相关信息的模型，该模型的能力包括：\n1. 搜索著名人物的身份、经历，包括明星、政客、历史人物、体育明星等；\n2. 识别图像中动物/植物的品种；\n3. 识别照片中地点或景点的名称和地址。\n\n    Parameters\n    ----------\n    image_url : str\n        给定图片地址，将搜索该图片中的人、动植物或地点的相关信息\n\n    Returns\n    ----------\n    : str\n        图片中事物的相关信息\n    '''\n    pass\n```\n\n\n```tool-9\ndef semantic_search.web_search(query: str, count: int) -> List[str]:\n    '''\n    网页搜索，根据输入的query，在搜索引擎中查找相关页面，可用于查找人物、物品、体育赛事、事件相关的时效性信息，精确信息。\n\n    Parameters\n    ----------\n    query : str\n        用户搜索的关键词、短语、查询，该参数项不能为空。\n    count : int, optional\n        期望返回的搜索结果数量\n\n    Returns\n    ----------\n    : List[str]\n        搜索引擎返回的结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```",
        "query": "中国和美国的GDP, 最近两三年都差多少? 中国有可能追上美国吗",
        "ground_truth": [
            {
                "id": 1,
                "name": "semantic_search.web_search",
                "args": {
                    "query": "中国最近两三年GDP数据"
                }
            },
            {
                "id": 2,
                "name": "semantic_search.web_search",
                "args": {
                    "query": "美国最近两三年GDP数据"
                }
            },
            {
                "id": 3,
                "name": "models.general_response",
                "args": {
                    "instruction": "对比中国和美国最近两三年的GDP差距",
                    "references": [
                        "#E1",
                        "#E2"
                    ]
                }
            },
            {
                "id": 4,
                "name": "models.general_response",
                "args": {
                    "instruction": "分析中国是否有可能追上美国的GDP",
                    "references": [
                        "#E3"
                    ]
                }
            }
        ],
        "plan_str": "SubTask1: 搜索中国最近两三年的GDP数据\n#E1 = semantic_search.web_search(query=\"中国最近两三年GDP数据\")\n\nSubTask2: 搜索美国最近两三年的GDP数据\n#E2 = semantic_search.web_search(query=\"美国最近两三年GDP数据\")\n\nSubTask3: 对比中国和美国最近两三年的GDP差距\n#E3 = models.general_response(instruction=\"对比中国和美国最近两三年的GDP差距\", references=[#E1, #E2])\n\nSubTask4: 分析中国是否有可能追上美国的GDP\n#E4 = models.general_response(instruction=\"分析中国是否有可能追上美国的GDP\", references=[#E3])"
    },
    "query_67": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "qq_music_hd",
                    "semantic_search",
                    "models",
                    "calendar_app"
                ],
                "selected_apis_name": [
                    "calendar_app.create_event",
                    "models.extract_information_from_text",
                    "semantic_search.web_search",
                    "qq_music_hd.next_song",
                    "qq_music_hd.resume_song",
                    "qq_music_hd.pause_song",
                    "calendar_app.list_events",
                    "qq_music_hd.get_cloud_sync_status",
                    "qq_music_hd.get_mv",
                    "calendar_app.set_event_reminder"
                ]
            },
            "environment": {
                "datetime": "2024年08月23日 星期五",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef calendar_app.create_event(title: str, start_time: str, end_time: str, location: str, description: str, attendees: List[str]) -> str:\n    '''\n    创建新的事件\n\n    Parameters\n    ----------\n    title : str\n        事件标题\n    start_time : str\n        事件开始时间（ISO格式）\n    end_time : str\n        事件结束时间（ISO格式）\n    location : str, optional\n        事件地点\n    description : str, optional\n        事件描述\n    attendees : List[str], optional\n        事件参与者邮箱列表\n\n    Returns\n    ----------\n    : str\n        创建成功的事件ID\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef semantic_search.web_search(query: str, count: int) -> List[str]:\n    '''\n    网页搜索，根据输入的query，在搜索引擎中查找相关页面，可用于查找人物、物品、体育赛事、事件相关的时效性信息，精确信息。\n\n    Parameters\n    ----------\n    query : str\n        用户搜索的关键词、短语、查询，该参数项不能为空。\n    count : int, optional\n        期望返回的搜索结果数量\n\n    Returns\n    ----------\n    : List[str]\n        搜索引擎返回的结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef qq_music_hd.next_song() -> bool:\n    '''\n    用于播放下一首歌曲\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : bool\n        操作是否成功\n    '''\n    pass\n```\n\n\n```tool-5\ndef qq_music_hd.resume_song() -> bool:\n    '''\n    用于恢复暂停的歌曲\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : bool\n        操作是否成功的标志\n    '''\n    pass\n```\n\n\n```tool-6\ndef qq_music_hd.pause_song() -> bool:\n    '''\n    用于暂停当前播放的歌曲\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : bool\n        暂停操作是否成功\n    '''\n    pass\n```\n\n\n```tool-7\ndef calendar_app.list_events(start_time: str, end_time: str, filter: str, sort_by: str) -> List[Dict[str, Union[str, List[str]]]]:\n    '''\n    获取所有事件的列表\n\n    Parameters\n    ----------\n    start_time : str\n        查询事件的开始时间（ISO格式）\n    end_time : str\n        查询事件的结束时间（ISO格式）\n    filter : str, optional\n        过滤条件，如地点、参与者等\n    sort_by : str, optional\n        排序条件，如时间、标题等\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, List[str]]]]\n        事件的列表，每个事件包含详细信息\n    '''\n    pass\n```\n\n\n```tool-8\ndef qq_music_hd.get_cloud_sync_status() -> Dict[str, Union[str, bool]]:\n    '''\n    用于获取云同步状态\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : Dict[str, Union[str, bool]]\n        云同步状态信息，包括同步状态、最后同步时间等\n    '''\n    pass\n```\n\n\n```tool-9\ndef qq_music_hd.get_mv(song_id: str) -> str:\n    '''\n    用于获取特定歌曲的MV\n\n    Parameters\n    ----------\n    song_id : str\n        歌曲的唯一标识符\n\n    Returns\n    ----------\n    : str\n        特定歌曲MV的URL地址\n    '''\n    pass\n```\n\n\n```tool-10\ndef calendar_app.set_event_reminder(event_id: str, reminder_time: str, reminder_method: str) -> bool:\n    '''\n    设置事件提醒和通知\n\n    Parameters\n    ----------\n    event_id : str\n        事件ID\n    reminder_time : str\n        提醒时间（ISO格式）\n    reminder_method : str\n        提醒方式，例如'email', 'popup'\n\n    Returns\n    ----------\n    : bool\n        设置提醒操作是否成功\n    '''\n    pass\n```",
        "query": "播放下一首歌，查下陈奕迅大连站开票时间当天提醒我",
        "ground_truth": [
            {
                "id": 1,
                "name": "qq_music_hd.next_song",
                "args": {}
            },
            {
                "id": 2,
                "name": "semantic_search.web_search",
                "args": {
                    "query": "陈奕迅 大连站 开票时间"
                }
            },
            {
                "id": 3,
                "name": "models.extract_information_from_text",
                "args": {
                    "instruction": "陈奕迅 大连站 开票时间",
                    "text": "#E2"
                }
            },
            {
                "id": 4,
                "name": "calendar_app.create_event",
                "args": {
                    "title": "陈奕迅演唱会抢票",
                    "start_time": "#E3",
                    "end_time": "#E3",
                    "description": "陈奕迅演唱会抢票"
                }
            }
        ],
        "plan_str": "SubTask1: 播放下一首歌\n#E1 = qq_music_hd.next_song()\nSubTask2: 搜索陈奕迅深圳站演唱会的开票时间\n#E2 = semantic_search.web_search(query=\"陈奕迅 大连站 开票时间\")\nSubTask3: 提取开票时间\n#E3 = models.extract_information_from_text(instruction=\"陈奕迅 大连站 开票时间\", text=#E2)\nSubTask4: 设置提醒，提醒用户抢票\n#E4 = calendar_app.create_event(title=\"陈奕迅演唱会抢票\", start_time=#E3, end_time=#E3, description=\"陈奕迅演唱会抢票\")"
    },
    "query_68": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "weather",
                    "messages",
                    "models",
                    "calendar_app"
                ],
                "selected_apis_name": [
                    "messages.delete_message",
                    "calendar_app.create_event",
                    "calendar_app.list_events",
                    "messages.send_text_message",
                    "models.general_response",
                    "weather.get_life_index",
                    "models.creative_writing",
                    "models.multimodal_qa",
                    "weather.get_weather_forecast",
                    "models.code_qa"
                ]
            },
            "environment": {
                "datetime": "2024年08月21日 星期三",
                "location": "广州"
            }
        },
        "api_descriptions": "```tool-1\ndef messages.delete_message(message_id: str) -> bool:\n    '''\n    删除指定ID的消息\n\n    Parameters\n    ----------\n    message_id : str\n        消息ID\n\n    Returns\n    ----------\n    : bool\n        删除操作是否成功\n    '''\n    pass\n```\n\n\n```tool-2\ndef calendar_app.create_event(title: str, start_time: str, end_time: str, location: str, description: str, attendees: List[str]) -> str:\n    '''\n    创建新的事件\n\n    Parameters\n    ----------\n    title : str\n        事件标题\n    start_time : str\n        事件开始时间（ISO格式）\n    end_time : str\n        事件结束时间（ISO格式）\n    location : str, optional\n        事件地点\n    description : str, optional\n        事件描述\n    attendees : List[str], optional\n        事件参与者邮箱列表\n\n    Returns\n    ----------\n    : str\n        创建成功的事件ID\n    '''\n    pass\n```\n\n\n```tool-3\ndef calendar_app.list_events(start_time: str, end_time: str, filter: str, sort_by: str) -> List[Dict[str, Union[str, List[str]]]]:\n    '''\n    获取所有事件的列表\n\n    Parameters\n    ----------\n    start_time : str\n        查询事件的开始时间（ISO格式）\n    end_time : str\n        查询事件的结束时间（ISO格式）\n    filter : str, optional\n        过滤条件，如地点、参与者等\n    sort_by : str, optional\n        排序条件，如时间、标题等\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, List[str]]]]\n        事件的列表，每个事件包含详细信息\n    '''\n    pass\n```\n\n\n```tool-4\ndef messages.send_text_message(recipient: List[str], title: str, message: str) -> str:\n    '''\n    发送文本消息\n\n    Parameters\n    ----------\n    recipient : List[str]\n        接收者的电话号码\n    title : str, optional\n        文本消息标题\n    message : str\n        文本消息的内容\n\n    Returns\n    ----------\n    : str\n        消息ID\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef weather.get_life_index(location: str) -> Dict[str, str]:\n    '''\n    提供生活指数建议\n\n    Parameters\n    ----------\n    location : str\n        查询生活指数的地点\n\n    Returns\n    ----------\n    : Dict[str, str]\n        生活建议，如穿衣建议、运动建议等\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef weather.get_weather_forecast(location: str, days: int) -> List[Dict[str, Union[str, int, float]]]:\n    '''\n    获取未来几天的天气预报\n\n    Parameters\n    ----------\n    location : str\n        查询天气预报的地点\n    days : int\n        查询的天数，如3天、7天等\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, int, float]]]\n        未来几天的天气预报信息列表\n    '''\n    pass\n```\n\n\n```tool-10\ndef models.code_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长代码生成、代码解释、代码调试、代码语言转换、代码优化、代码识别等代码程序相关任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与代码、程序相关。\n    references : List[Union[List[str], str]]\n        应答代码相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```",
        "query": "查询未来一周云南各地的天气情况，制定旅游计划到我的日程，提醒张三去云南旅游要准备什么衣服",
        "ground_truth": [
            {
                "id": 1,
                "name": "weather.get_weather_forecast",
                "args": {
                    "location": "云南",
                    "days": "7"
                }
            },
            {
                "id": 2,
                "name": "models.creative_writing",
                "args": {
                    "instruction": "根据未来一周云南的天气情况制定旅游计划",
                    "references": [
                        "#E1"
                    ]
                }
            },
            {
                "id": 3,
                "name": "calendar_app.create_event",
                "args": {
                    "title": "云南旅游计划",
                    "start_time": "2024-08-22T00:00:00",
                    "end_time": "2024-08-28T23:59:59",
                    "location": "云南",
                    "description": "#E2",
                    "attendees": []
                }
            },
            {
                "id": 4,
                "name": "weather.get_life_index",
                "args": {
                    "location": "云南"
                }
            },
            {
                "id": 5,
                "name": "messages.send_text_message",
                "args": {
                    "recipient": [
                        "张三的联系方式"
                    ],
                    "title": "云南旅游衣物准备提醒",
                    "message": "#E4"
                }
            }
        ],
        "plan_str": "SubTask1: 查询未来一周云南各地的天气情况\n#E1 = weather.get_weather_forecast(location=\"云南\", days=7)\n\nSubTask2: 根据未来一周的天气情况制定旅游计划\n#E2 = models.creative_writing(instruction=\"根据未来一周云南的天气情况制定旅游计划\", references=[#E1])\n\nSubTask3: 将制定的旅游计划添加到日程中\n#E3 = calendar_app.create_event(title=\"云南旅游计划\", start_time=\"2024-08-22T00:00:00\", end_time=\"2024-08-28T23:59:59\", location=\"云南\", description=#E2, attendees=[])\n\nSubTask4: 提醒张三去云南旅游要准备什么衣服\n#E4 = weather.get_life_index(location=\"云南\")\n\nSubTask5: 发送提醒信息给张三\n#E5 = messages.send_text_message(recipient=[\"张三的联系方式\"], title=\"云南旅游衣物准备提醒\", message=#E4)"
    },
    "query_69": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "semantic_search",
                    "messages",
                    "models",
                    "ctrip"
                ],
                "selected_apis_name": [
                    "messages.send_text_message",
                    "messages.set_notifications",
                    "models.multimodal_qa",
                    "messages.delete_message",
                    "models.general_response",
                    "ctrip.search_flight_ticket",
                    "models.date_qa",
                    "messages.search_messages",
                    "models.scan_image_then_extract_information",
                    "semantic_search.personal_context_search"
                ]
            },
            "environment": {
                "datetime": "2024年08月21日 星期三",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef messages.send_text_message(recipient: List[str], title: str, message: str) -> str:\n    '''\n    发送文本消息\n\n    Parameters\n    ----------\n    recipient : List[str]\n        接收者的电话号码\n    title : str, optional\n        文本消息标题\n    message : str\n        文本消息的内容\n\n    Returns\n    ----------\n    : str\n        消息ID\n    '''\n    pass\n```\n\n\n```tool-2\ndef messages.set_notifications() -> bool:\n    '''\n    开启消息通知\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : bool\n        操作是否成功的布尔值\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef messages.delete_message(message_id: str) -> bool:\n    '''\n    删除指定ID的消息\n\n    Parameters\n    ----------\n    message_id : str\n        消息ID\n\n    Returns\n    ----------\n    : bool\n        删除操作是否成功\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef ctrip.search_flight_ticket(arr_city: str, dep_city: str, arr_airport: str, dep_airport: str, flight_date: str, page: int) -> List[str]:\n    '''\n    帮助用户获取机票信息，用户需要输入出发地、目的地\n\n    Parameters\n    ----------\n    arr_city : str\n        目的地城市，如'北京'、'上海'、'南京'\n    dep_city : str\n        出发城市，如'北京'、'上海'、'南京'\n    arr_airport : str, optional\n        到达的机场\n    dep_airport : str, optional\n        出发的机场\n    flight_date : str\n        出发时间，如'2024-03-29'\n    page : int, optional\n        页数，默认值为1，当用户请求更多时输入2，3依次增加\n\n    Returns\n    ----------\n    : List[str]\n        返回的航班信息\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.date_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长解答节假日、节气、是否上班、调休信息相关问题；也支持时间推理计算，如日期天数之差、离国庆节还有多久等。\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题，与节假日、节气、调休信息、日期推算相关\n    references : List[Union[List[str], str]]\n        提供的参考信息，能帮助解答问题，如当前日期、星期数等信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef messages.search_messages(query: str) -> List[str]:\n    '''\n    根据关键词搜索消息\n\n    Parameters\n    ----------\n    query : str\n        搜索关键词\n\n    Returns\n    ----------\n    : List[str]\n        搜索结果，符合条件的消息ID列表\n    '''\n    pass\n```\n\n\n```tool-9\ndef models.scan_image_then_extract_information(instruction: str, image_url: str) -> str:\n    '''\n    擅长从给定(手机屏幕)图片中抽取需要的信息，例如从手机/PC等设备屏幕上抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将从该图片中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef semantic_search.personal_context_search(query: str) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```",
        "query": "下周三我要从深圳飞西安，帮我订一张上午8点到12点起飞，价格最低的机票，告诉表哥按时到机场接我。",
        "ground_truth": [
            {
                "id": 1,
                "name": "models.date_qa",
                "args": {
                    "instruction": "今天是2024-08-21，星期三，下周三是哪一天",
                    "references": []
                }
            },
            {
                "id": 2,
                "name": "ctrip.search_flight_ticket",
                "args": {
                    "dep_city": "深圳",
                    "arr_city": "西安",
                    "flight_date": "#E1",
                    "dep_airport": "",
                    "arr_airport": ""
                }
            },
            {
                "id": 3,
                "name": "models.general_response",
                "args": {
                    "instruction": "筛选出上午8点到12点起飞的航班",
                    "references": [
                        "#E2"
                    ]
                }
            },
            {
                "id": 4,
                "name": "models.general_response",
                "args": {
                    "instruction": "从这些航班中找到价格最低的航班",
                    "references": [
                        "#E3"
                    ]
                }
            },
            {
                "id": 5,
                "name": "semantic_search.personal_context_search",
                "args": {
                    "query": "表哥的手机号"
                }
            },
            {
                "id": 6,
                "name": "messages.send_text_message",
                "args": {
                    "recipient": "#E5",
                    "title": "接机提醒",
                    "message": "请于#E1上午去机场接我，航班信息：#E4"
                }
            }
        ],
        "plan_str": "SubTask1: 获取下周三的日期\n#E1 = models.date_qa(instruction=\"今天是2024-08-21，星期三，下周三是哪一天\", references=[])\nSubTask2: 查找航班信息\n#E2 = ctrip.search_flight_ticket(dep_city='深圳', arr_city='西安', flight_date=#E1, dep_airport='', arr_airport='')\nSubTask3: 筛选上午8点到12点起飞的航班\n#E3 = models.general_response(instruction=\"筛选出上午8点到12点起飞的航班\", references=[#E2])\nSubTask4: 查找价格最低的航班\n#E4 = models.general_response(instruction=\"从这些航班中找到价格最低的航班\", references=[#E3])\nSubTask5: 查找表哥的联系方式\n#E5 = semantic_search.personal_context_search(query=\"表哥的手机号\")\nSubTask6: 通知表哥\n#E6 = messages.send_text_message(recipient=#E5, title=\"接机提醒\", message=\"请于#E1上午去机场接我，航班信息：#E4\") \n"
    },
    "query_70": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "wechat",
                    "semantic_search",
                    "jingdong",
                    "models"
                ],
                "selected_apis_name": [
                    "wechat.send_message",
                    "jingdong.get_promotions",
                    "jingdong.update_user_profile",
                    "semantic_search.personal_context_search",
                    "models.image_search",
                    "jingdong.contact_customer_service",
                    "models.multimodal_qa",
                    "models.extract_information_from_text",
                    "jingdong.remove_from_cart",
                    "jingdong.add_to_cart"
                ]
            },
            "environment": {
                "datetime": "2018年03月25日 星期日",
                "location": "甘肃省金昌市"
            }
        },
        "api_descriptions": "```tool-1\ndef wechat.send_message(recipient_id: str, message_type: str, content: Union[str, bytes]) -> bool:\n    '''\n    发送消息\n\n    Parameters\n    ----------\n    recipient_id : str\n        消息接收者ID\n    message_type : str\n        消息类型，如'text', 'image', 'video', 'voice'\n    content : Union[str, bytes]\n        消息内容，根据消息类型可以是文字、图片、视频二进制数据等\n\n    Returns\n    ----------\n    : bool\n        发送消息操作是否成功\n    '''\n    pass\n```\n\n\n```tool-2\ndef jingdong.get_promotions() -> List[Dict]:\n    '''\n    获取促销活动信息\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict]\n        当前有效的促销活动列表，每个活动包括名称、描述、优惠等信息\n    '''\n    pass\n```\n\n\n```tool-3\ndef jingdong.update_user_profile(profile_info: Dict) -> bool:\n    '''\n    更新个人资料\n\n    Parameters\n    ----------\n    profile_info : Dict\n        需要更新的个人资料信息\n\n    Returns\n    ----------\n    : bool\n        更新操作是否成功\n    '''\n    pass\n```\n\n\n```tool-4\ndef semantic_search.personal_context_search(query: str) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.image_search(image_url: str) -> str:\n    '''\n    一个基于给定的图片搜索图中事物相关信息的模型，该模型的能力包括：\n1. 搜索著名人物的身份、经历，包括明星、政客、历史人物、体育明星等；\n2. 识别图像中动物/植物的品种；\n3. 识别照片中地点或景点的名称和地址。\n\n    Parameters\n    ----------\n    image_url : str\n        给定图片地址，将搜索该图片中的人、动植物或地点的相关信息\n\n    Returns\n    ----------\n    : str\n        图片中事物的相关信息\n    '''\n    pass\n```\n\n\n```tool-6\ndef jingdong.contact_customer_service(query: str) -> bool:\n    '''\n    联系客服\n\n    Parameters\n    ----------\n    query : str\n        咨询问题或需要客服帮助的内容\n\n    Returns\n    ----------\n    : bool\n        联系操作是否成功\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef jingdong.remove_from_cart(product_id: str) -> bool:\n    '''\n    从购物车移除商品\n\n    Parameters\n    ----------\n    product_id : str\n        商品ID\n\n    Returns\n    ----------\n    : bool\n        移除操作是否成功\n    '''\n    pass\n```\n\n\n```tool-10\ndef jingdong.add_to_cart(product_id: str, quantity: int) -> bool:\n    '''\n    添加商品到购物车\n\n    Parameters\n    ----------\n    product_id : str\n        商品ID\n    quantity : int\n        购买数量\n\n    Returns\n    ----------\n    : bool\n        添加操作是否成功\n    '''\n    pass\n```",
        "query": "帮我看看京东今天的电子产品相关的促销活动信息，看是否有卖雷蛇键盘的。如果有的话帮我添加到购物车里，然后发微信告诉刘德华雷蛇键盘打折了！",
        "ground_truth": [
            {
                "id": 1,
                "name": "jingdong.get_promotions",
                "args": {}
            },
            {
                "id": 2,
                "name": "models.extract_information_from_text",
                "args": {
                    "instruction": "今天京东电子产品促销活动中，是否有雷蛇键盘在促销",
                    "text": "#E1"
                }
            },
            {
                "id": 3,
                "name": "models.extract_information_from_text",
                "args": {
                    "instruction": "获取雷蛇键盘的商品ID",
                    "text": "#E2"
                }
            },
            {
                "id": 4,
                "name": "jingdong.add_to_cart",
                "args": {
                    "product_id": "#E3",
                    "quantity": "1"
                }
            },
            {
                "id": 5,
                "name": "semantic_search.personal_context_search",
                "args": {
                    "query": "刘德华的微信号"
                }
            },
            {
                "id": 6,
                "name": "wechat.send_message",
                "args": {
                    "recipient_id": "#E5",
                    "message_type": "text",
                    "content": "刘德华，雷蛇键盘打折了，快去京东看看吧！"
                }
            }
        ],
        "plan_str": "SubTask1: 获取京东今日的电子产品促销活动信息\n#E1 = jingdong.get_promotions()\nSubTask2: 从促销信息中查找是否有雷蛇键盘\n#E2 = models.extract_information_from_text(instruction=\"今天京东电子产品促销活动中，是否有雷蛇键盘在促销\", text=\"#E1\")\nSubTask3: 如果有雷蛇键盘，获取其商品ID\n#E3 = models.extract_information_from_text(instruction=\"获取雷蛇键盘的商品ID\", text=\"#E2\")\nSubTask4: 将雷蛇键盘添加到购物车，数量为1\n#E4 = jingdong.add_to_cart(product_id=\"#E3\", quantity=1)\nSubTask5: 查找刘德华的微信号\n#E5 = semantic_search.personal_context_search(query=\"刘德华的微信号\")\nSubTask6: 发送微信消息告诉刘德华雷蛇键盘打折了\n#E6 = wechat.send_message(recipient_id=\"#E5\", message_type=\"text\", content=\"刘德华，雷蛇键盘打折了，快去京东看看吧！\") \n"
    },
    "query_71": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "amap",
                    "models"
                ],
                "selected_apis_name": [
                    "models.extract_information_from_text",
                    "amap.get_nearby_parking",
                    "models.date_qa",
                    "amap.route_planning",
                    "amap.get_nearby_gas_stations",
                    "amap.get_current_location",
                    "models.image_search",
                    "models.safety_response",
                    "models.general_response",
                    "models.multimodal_qa"
                ]
            },
            "environment": {
                "datetime": "2019年11月02日 星期六",
                "location": "河南省漯河市"
            }
        },
        "api_descriptions": "```tool-1\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef amap.get_nearby_parking(location: str) -> List[Dict]:\n    '''\n    获取附近的停车场信息\n\n    Parameters\n    ----------\n    location : str\n        当前位置坐标，经纬度用逗号分隔\n\n    Returns\n    ----------\n    : List[Dict]\n        返回附近的停车场列表，每个停车场包含名称、地址、距离等信息\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.date_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长解答节假日、节气、是否上班、调休信息相关问题；也支持时间推理计算，如日期天数之差、离国庆节还有多久等。\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题，与节假日、节气、调休信息、日期推算相关\n    references : List[Union[List[str], str]]\n        提供的参考信息，能帮助解答问题，如当前日期、星期数等信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef amap.route_planning(origin: str, destination: str, strategy: str) -> Dict:\n    '''\n    路线规划\n\n    Parameters\n    ----------\n    origin : str\n        起点坐标，经纬度用逗号分隔\n    destination : str\n        终点坐标，经纬度用逗号分隔\n    strategy : str, optional\n        路线规划策略，如最短时间，避开拥堵等\n\n    Returns\n    ----------\n    : Dict\n        返回路线规划信息，如路程时间、距离、途径点等\n    '''\n    pass\n```\n\n\n```tool-5\ndef amap.get_nearby_gas_stations(location: str) -> List[Dict]:\n    '''\n    获取附近加油站信息\n\n    Parameters\n    ----------\n    location : str\n        当前位置坐标，经纬度用逗号分隔\n\n    Returns\n    ----------\n    : List[Dict]\n        返回附近的加油站列表，每个加油站包含名称、地址、距离等信息\n    '''\n    pass\n```\n\n\n```tool-6\ndef amap.get_current_location() -> Dict[str, float]:\n    '''\n    获取当前位置\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : Dict[str, float]\n        返回当前的经纬度坐标\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.image_search(image_url: str) -> str:\n    '''\n    一个基于给定的图片搜索图中事物相关信息的模型，该模型的能力包括：\n1. 搜索著名人物的身份、经历，包括明星、政客、历史人物、体育明星等；\n2. 识别图像中动物/植物的品种；\n3. 识别照片中地点或景点的名称和地址。\n\n    Parameters\n    ----------\n    image_url : str\n        给定图片地址，将搜索该图片中的人、动植物或地点的相关信息\n\n    Returns\n    ----------\n    : str\n        图片中事物的相关信息\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.safety_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长回应与安全价值观相关的问题，用于直接回答黄赌毒、性别歧视、社会和谐、道德伦理、涉政、宗教、和恶意引导/诱导相关的用户请求。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题存在安全价值观风险，如黄赌毒、涉政、宗教、或恶意引导。\n    references : List[Union[List[str], str]]\n        应答安全价值观相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的安全且友好的回复结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```",
        "query": "导航到最近的停车场",
        "ground_truth": [
            {
                "id": 1,
                "name": "amap.get_current_location",
                "args": {}
            },
            {
                "id": 2,
                "name": "amap.get_nearby_parking",
                "args": {
                    "location": "#E1['longitude'] #E1['latitude']"
                }
            },
            {
                "id": 3,
                "name": "models.general_response",
                "args": {
                    "instruction": "请从'#E2'中选择距离最近的停车场",
                    "references": [
                        "#E2"
                    ]
                }
            },
            {
                "id": 4,
                "name": "amap.route_planning",
                "args": {
                    "origin": "#E1['longitude'] #E1['latitude']",
                    "destination": "#E3['longitude'] #E3['latitude']",
                    "strategy": "最短时间"
                }
            }
        ],
        "plan_str": "SubTask1: 获取当前位置\n#E1 = amap.get_current_location()\nSubTask2: 获取附近的停车场信息\n#E2 = amap.get_nearby_parking(location=\"#E1['longitude'] #E1['latitude']\")\nSubTask3: 选择距离最近的停车场\n#E3 = models.general_response(instruction=\"请从'#E2'中选择距离最近的停车场\", references=[#E2])\nSubTask4: 导航到最近的停车场\n#E4 = amap.route_planning(origin=\"#E1['longitude'] #E1['latitude']\", destination=\"#E3['longitude'] #E3['latitude']\", strategy=\"最短时间\") \n"
    },
    "query_72": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "notes"
                ],
                "selected_apis_name": [
                    "notes.delete_note",
                    "notes.list_notes",
                    "notes.search_notes",
                    "notes.create_note",
                    "notes.add_attachment",
                    "notes.edit_note"
                ]
            },
            "environment": {
                "datetime": "2023年02月27日 星期一",
                "location": "新疆维吾尔自治区铁门关市"
            }
        },
        "api_descriptions": "```tool-1\ndef notes.delete_note(note_id: str) -> bool:\n    '''\n    删除指定ID的备忘录\n\n    Parameters\n    ----------\n    note_id : str\n        备忘录ID\n\n    Returns\n    ----------\n    : bool\n        删除操作是否成功\n    '''\n    pass\n```\n\n\n```tool-2\ndef notes.list_notes(filter: str, sort_by: str) -> List[str]:\n    '''\n    获取所有备忘录的列表\n\n    Parameters\n    ----------\n    filter : str, optional\n        过滤条件，如标签、日期等\n    sort_by : str, optional\n        排序条件，如时间、标题等\n\n    Returns\n    ----------\n    : List[str]\n        备忘录ID的列表，每个ID可以链接到笔记的详细信息\n    '''\n    pass\n```\n\n\n```tool-3\ndef notes.search_notes(query: str) -> List[str]:\n    '''\n    根据关键词搜索备忘录\n\n    Parameters\n    ----------\n    query : str\n        搜索关键词\n\n    Returns\n    ----------\n    : List[str]\n        搜索结果，符合条件的备忘录ID列表\n    '''\n    pass\n```\n\n\n```tool-4\ndef notes.create_note(title: str, content: str, tags: List[str]) -> str:\n    '''\n    添加一条新的备忘录\n\n    Parameters\n    ----------\n    title : str, optional\n        备忘录标题\n    content : str\n        备忘录内容\n    tags : List[str], optional\n        备忘录标签\n\n    Returns\n    ----------\n    : str\n        创建成功的备忘录ID\n    '''\n    pass\n```\n\n\n```tool-5\ndef notes.add_attachment(note_id: str, attachment: str) -> str:\n    '''\n    为备忘录添加附件，如图片、音频等\n\n    Parameters\n    ----------\n    note_id : str\n        备忘录ID\n    attachment : str\n        附件地址(url)\n\n    Returns\n    ----------\n    : str\n        新增附件之后的备忘录ID\n    '''\n    pass\n```\n\n\n```tool-6\ndef notes.edit_note(note_id: str, title: str, content: str, tags: List[str]) -> bool:\n    '''\n    编辑已有的备忘录\n\n    Parameters\n    ----------\n    note_id : str\n        备忘录ID\n    title : str, optional\n        新的备忘录标题\n    content : str\n        新的备忘录内容\n    tags : List[str], optional\n        新的备忘录标签\n\n    Returns\n    ----------\n    : bool\n        编辑操作是否成功\n    '''\n    pass\n```",
        "query": "把这个聊天内容的文字写到便签中",
        "ground_truth": [
            {
                "id": 1,
                "name": "notes.create_note",
                "args": {
                    "title": "聊天记录",
                    "content": "A: 国庆去哪玩\nB: 你推荐一下\nB: 来深圳玩也ok\nA: 我要去长沙\nB: 真羡慕"
                }
            }
        ],
        "plan_str": "SubTask1: 识别屏幕中的聊天内容，写到便签中\n#E1 = notes.create_note(title=\"聊天记录\", content=\"A: 国庆去哪玩\\nB: 你推荐一下\\nB: 来深圳玩也ok\\nA: 我要去长沙\\nB: 真羡慕\")"
    },
    "query_73": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "models",
                    "wewave",
                    "semantic_search"
                ],
                "selected_apis_name": [
                    "models.date_qa",
                    "wewave.get_recommended_content",
                    "wewave.interact_with_live_stream",
                    "models.general_response",
                    "wewave.post_weibo",
                    "semantic_search.personal_context_search",
                    "models.creative_writing",
                    "wewave.get_short_videos",
                    "wewave.get_star_updates",
                    "models.math_qa"
                ]
            },
            "environment": {
                "datetime": "2024年08月23日 星期五",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef models.date_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长解答节假日、节气、是否上班、调休信息相关问题；也支持时间推理计算，如日期天数之差、离国庆节还有多久等。\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题，与节假日、节气、调休信息、日期推算相关\n    references : List[Union[List[str], str]]\n        提供的参考信息，能帮助解答问题，如当前日期、星期数等信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef wewave.get_recommended_content() -> List[Dict[str, Union[str, int, float]]]:\n    '''\n    获取微博推荐内容\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, int, float]]]\n        推荐内容的列表，每个内容包含标题、描述、发布时间等信息\n    '''\n    pass\n```\n\n\n```tool-3\ndef wewave.interact_with_live_stream(live_stream_id: str, message: str) -> bool:\n    '''\n    与正在进行的直播互动\n\n    Parameters\n    ----------\n    live_stream_id : str\n        直播的唯一标识\n    message : str\n        互动消息内容\n\n    Returns\n    ----------\n    : bool\n        互动是否成功的标志\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef wewave.post_weibo(content: str, images: List[str], video: str) -> bool:\n    '''\n    发布新的微博\n\n    Parameters\n    ----------\n    content : str\n        微博内容\n    images : List[str], optional\n        微博图片列表\n    video : str, optional\n        微博视频链接\n\n    Returns\n    ----------\n    : bool\n        发布微博是否成功的状态\n    '''\n    pass\n```\n\n\n```tool-6\ndef semantic_search.personal_context_search(query: str) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef wewave.get_short_videos() -> List[Dict[str, Union[str, int, float]]]:\n    '''\n    获取微博短视频列表\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, int, float]]]\n        微博短视频列表，包括视频的标题、URL、时长等信息\n    '''\n    pass\n```\n\n\n```tool-9\ndef wewave.get_star_updates(star_id: str) -> Dict[str, Union[str, int, List[str]]]:\n    '''\n    获取明星和大V的最新动态\n\n    Parameters\n    ----------\n    star_id : str\n        明星或大V的唯一标识\n\n    Returns\n    ----------\n    : Dict[str, Union[str, int, List[str]]]\n        明星或大V的最新动态信息，包括动态内容、发布时间、点赞数等\n    '''\n    pass\n```\n\n\n```tool-10\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```",
        "query": "我跟小张经常讨论《唐朝诡事录》，根据聊天内容生成一段分析与观后感，发送到微博",
        "ground_truth": [
            {
                "id": 1,
                "name": "semantic_search.personal_context_search",
                "args": {
                    "query": "与小张讨论《唐朝诡事录》的聊天内容"
                }
            },
            {
                "id": 2,
                "name": "models.creative_writing",
                "args": {
                    "instruction": "根据以下聊天内容生成一段关于《唐朝诡事录》的分析与观后感",
                    "references": [
                        "#E1"
                    ]
                }
            },
            {
                "id": 3,
                "name": "wewave.post_weibo",
                "args": {
                    "content": "#E2",
                    "images": [],
                    "video": ""
                }
            }
        ],
        "plan_str": "SubTask1: 搜索用户与小张关于《唐朝诡事录》的聊天内容\n#E1 = semantic_search.personal_context_search(query=\"与小张讨论《唐朝诡事录》的聊天内容\")\n\nSubTask2: 根据聊天内容生成一段分析与观后感\n#E2 = models.creative_writing(instruction=\"根据以下聊天内容生成一段关于《唐朝诡事录》的分析与观后感\", references=[#E1])\n\nSubTask3: 定时发送生成的分析与观后感到微博\n#E3 = wewave.post_weibo(content=#E2, images=[], video=\"\")"
    },
    "query_74": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "models"
                ],
                "selected_apis_name": [
                    "models.date_qa",
                    "models.math_qa",
                    "models.scan_image_then_extract_information",
                    "models.creative_writing",
                    "models.multimodal_qa",
                    "models.extract_information_from_text",
                    "models.search_then_response",
                    "models.safety_response",
                    "models.personal_qa",
                    "models.image_search"
                ]
            },
            "environment": {
                "datetime": "2024年08月21日 星期三",
                "location": "上海"
            }
        },
        "api_descriptions": "```tool-1\ndef models.date_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长解答节假日、节气、是否上班、调休信息相关问题；也支持时间推理计算，如日期天数之差、离国庆节还有多久等。\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题，与节假日、节气、调休信息、日期推算相关\n    references : List[Union[List[str], str]]\n        提供的参考信息，能帮助解答问题，如当前日期、星期数等信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.scan_image_then_extract_information(instruction: str, image_url: str) -> str:\n    '''\n    擅长从给定(手机屏幕)图片中抽取需要的信息，例如从手机/PC等设备屏幕上抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将从该图片中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.search_then_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个具备搜索引擎能力的问答模型，具备以下能力：\n1. 搜索实时信息并总结。如果用户问题涉及时效性信息，问答模型第一步通过搜索引擎检索信息，第二步对检索的多个信息进行汇总，生成回复；\n2. 问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的instruction和给定的参考references，生成正确、有用、安全的回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令/问题，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        返回的回复\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.safety_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长回应与安全价值观相关的问题，用于直接回答黄赌毒、性别歧视、社会和谐、道德伦理、涉政、宗教、和恶意引导/诱导相关的用户请求。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题存在安全价值观风险，如黄赌毒、涉政、宗教、或恶意引导。\n    references : List[Union[List[str], str]]\n        应答安全价值观相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的安全且友好的回复结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef models.personal_qa(instruction: str, user_features: str, references: Dict[str, str]) -> str:\n    '''\n    擅长回复可以结合用户个性化信息回答的问题\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题\n    user_features : str\n        提供的用户个性化信息\n    references : Dict[str, str], optional\n        参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef models.image_search(image_url: str) -> str:\n    '''\n    一个基于给定的图片搜索图中事物相关信息的模型，该模型的能力包括：\n1. 搜索著名人物的身份、经历，包括明星、政客、历史人物、体育明星等；\n2. 识别图像中动物/植物的品种；\n3. 识别照片中地点或景点的名称和地址。\n\n    Parameters\n    ----------\n    image_url : str\n        给定图片地址，将搜索该图片中的人、动植物或地点的相关信息\n\n    Returns\n    ----------\n    : str\n        图片中事物的相关信息\n    '''\n    pass\n```",
        "query": "我的交稿日期在一个月后，除去节假日，和每周四需要开会，我还剩下多少时间来完成我的任务？",
        "ground_truth": [
            {
                "id": 1,
                "name": "models.date_qa",
                "args": {
                    "instruction": "今天日期是2024-08-21，计算一个月后的日期",
                    "references": [
                        "今天日期是2024-08-21，星期三。"
                    ]
                }
            },
            {
                "id": 2,
                "name": "models.date_qa",
                "args": {
                    "instruction": "从2024-08-21到一个月后的节假日信息",
                    "references": [
                        "今天日期是2024-08-21，星期三。"
                    ]
                }
            },
            {
                "id": 3,
                "name": "models.date_qa",
                "args": {
                    "instruction": "从2024-08-21到一个月后的每周四的日期",
                    "references": [
                        "今天日期是2024-08-21，星期三。"
                    ]
                }
            },
            {
                "id": 4,
                "name": "models.math_qa",
                "args": {
                    "instruction": "计算从2024-08-21到一个月后的除去节假日和每周四后的工作日期",
                    "references": [
                        "#E1",
                        "#E2",
                        "#E3"
                    ]
                }
            }
        ],
        "plan_str": "SubTask1: 计算一个月后的日期\n#E1 = models.date_qa(instruction=\"今天日期是2024-08-21，计算一个月后的日期\", references=[\"今天日期是2024-08-21，星期三。\"])\n\nSubTask2: 获取一个月内的节假日信息\n#E2 = models.date_qa(instruction=\"从2024-08-21到一个月后的节假日信息\", references=[\"今天日期是2024-08-21，星期三。\"])\n\nSubTask3: 获取每周四的日期\n#E3 = models.date_qa(instruction=\"从2024-08-21到一个月后的每周四的日期\", references=[\"今天日期是2024-08-21，星期三。\"])\n\nSubTask4: 计算除去节假日和每周四后的工作日期\n#E4 = models.math_qa(instruction=\"计算从2024-08-21到一个月后的除去节假日和每周四后的工作日期\", references=[#E1, #E2, #E3])"
    },
    "query_75": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "pupu",
                    "models"
                ],
                "selected_apis_name": [
                    "pupu.add_to_cart",
                    "models.code_qa",
                    "pupu.list_orders",
                    "models.extract_information_from_text",
                    "pupu.search_product",
                    "models.date_qa",
                    "pupu.view_cart",
                    "models.safety_response",
                    "models.creative_writing",
                    "pupu.contact_customer_service"
                ]
            },
            "environment": {
                "datetime": "2021年04月28日 星期三",
                "location": "福建省三明市"
            }
        },
        "api_descriptions": "```tool-1\ndef pupu.add_to_cart(product_id: str, quantity: int) -> bool:\n    '''\n    添加商品到购物车\n\n    Parameters\n    ----------\n    product_id : str\n        商品ID\n    quantity : int\n        购买数量\n\n    Returns\n    ----------\n    : bool\n        添加操作是否成功\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.code_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长代码生成、代码解释、代码调试、代码语言转换、代码优化、代码识别等代码程序相关任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与代码、程序相关。\n    references : List[Union[List[str], str]]\n        应答代码相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef pupu.list_orders(status: str) -> List[Dict]:\n    '''\n    查看历史订单\n\n    Parameters\n    ----------\n    status : str, optional\n        订单状态\n\n    Returns\n    ----------\n    : List[Dict]\n        历史订单列表，每个订单包括ID、商品列表、金额等信息\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef pupu.search_product(keywords: str, category: str, sort_by: str) -> List[Dict]:\n    '''\n    搜索商品\n\n    Parameters\n    ----------\n    keywords : str\n        搜索关键词\n    category : str, optional\n        商品分类\n    sort_by : str, optional\n        排序方式，如价格、销量等\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的商品列表，每个商品包括名称、价格、图片、评分等信息\n    '''\n    pass\n```\n\n\n```tool-6\ndef models.date_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长解答节假日、节气、是否上班、调休信息相关问题；也支持时间推理计算，如日期天数之差、离国庆节还有多久等。\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题，与节假日、节气、调休信息、日期推算相关\n    references : List[Union[List[str], str]]\n        提供的参考信息，能帮助解答问题，如当前日期、星期数等信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-7\ndef pupu.view_cart() -> List[Dict]:\n    '''\n    查看购物车\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict]\n        购物车商品列表，每个商品包括名称、价格、数量等信息\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.safety_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长回应与安全价值观相关的问题，用于直接回答黄赌毒、性别歧视、社会和谐、道德伦理、涉政、宗教、和恶意引导/诱导相关的用户请求。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题存在安全价值观风险，如黄赌毒、涉政、宗教、或恶意引导。\n    references : List[Union[List[str], str]]\n        应答安全价值观相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的安全且友好的回复结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef pupu.contact_customer_service(query: str) -> bool:\n    '''\n    联系客服\n\n    Parameters\n    ----------\n    query : str\n        咨询问题或需要客服帮助的内容\n\n    Returns\n    ----------\n    : bool\n        联系操作是否成功\n    '''\n    pass\n```",
        "query": "把我上周在朴朴超市上买的牛奶加到购物车去",
        "ground_truth": [
            {
                "id": 1,
                "name": "pupu.list_orders",
                "args": {
                    "status": "completed"
                }
            },
            {
                "id": 2,
                "name": "models.extract_information_from_text",
                "args": {
                    "instruction": "从订单中获取牛奶商品ID",
                    "text": "#E1"
                }
            },
            {
                "id": 3,
                "name": "pupu.add_to_cart",
                "args": {
                    "product_id": "#E2",
                    "quantity": "1"
                }
            }
        ],
        "plan_str": "SubTask1: 查询用户上周在朴朴超市购买的牛奶\n#E1 = pupu.list_orders(status=\"completed\")\nSubTask2: 从订单中获取牛奶商品ID\n#E2 = models.extract_information_from_text(instruction=\"从订单中获取牛奶商品ID\", text=#E1)\nSubTask3: 再次购买一箱牛奶\n#E3 = pupu.add_to_cart(product_id=#E2, quantity=1)"
    },
    "query_76": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "local_memory",
                    "boss_zhipin"
                ],
                "selected_apis_name": [
                    "boss_zhipin.search_jobs",
                    "boss_zhipin.get_notifications",
                    "boss_zhipin.get_recommended_jobs",
                    "boss_zhipin.update_user_profile",
                    "local_memory.search_all",
                    "boss_zhipin.submit_resume",
                    "boss_zhipin.add_to_favorites",
                    "boss_zhipin.remove_from_favorites",
                    "local_memory.add",
                    "local_memory.search"
                ]
            },
            "environment": {
                "datetime": "2023年04月07日 星期五",
                "location": "海南省临高县"
            }
        },
        "api_descriptions": "```tool-1\ndef boss_zhipin.search_jobs(keywords: str, location: str, job_type: str, salary_range: str) -> List[Dict]:\n    '''\n    搜索职位\n\n    Parameters\n    ----------\n    keywords : str\n        搜索关键词\n    location : str, optional\n        位置，如城市名\n    job_type : str, optional\n        职位类型\n    salary_range : str, optional\n        薪资范围\n\n    Returns\n    ----------\n    : List[Dict]\n        返回符合条件的职位列表，包括职位名称、公司名称、薪资等信息\n    '''\n    pass\n```\n\n\n```tool-2\ndef boss_zhipin.get_notifications() -> List[Dict]:\n    '''\n    查看消息通知\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict]\n        消息通知列表，包括职位推荐、聊天消息等\n    '''\n    pass\n```\n\n\n```tool-3\ndef boss_zhipin.get_recommended_jobs() -> List[Dict]:\n    '''\n    获取推荐职位\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict]\n        根据用户的简历和求职意向推荐的职位列表\n    '''\n    pass\n```\n\n\n```tool-4\ndef boss_zhipin.update_user_profile(profile_info: Dict) -> bool:\n    '''\n    更新用户资料\n\n    Parameters\n    ----------\n    profile_info : Dict\n        需要更新的个人资料信息\n\n    Returns\n    ----------\n    : bool\n        更新操作是否成功\n    '''\n    pass\n```\n\n\n```tool-5\ndef local_memory.search_all() -> List[str]:\n    '''\n    获取指定id的所有本地知识库和记忆内容\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef boss_zhipin.submit_resume(job_id: str, resume_id: str) -> bool:\n    '''\n    用户简历投递\n\n    Parameters\n    ----------\n    job_id : str\n        职位ID\n    resume_id : str\n        简历ID\n\n    Returns\n    ----------\n    : bool\n        简历投递是否成功\n    '''\n    pass\n```\n\n\n```tool-7\ndef boss_zhipin.add_to_favorites(job_id: str) -> bool:\n    '''\n    关注职位\n\n    Parameters\n    ----------\n    job_id : str\n        职位ID\n\n    Returns\n    ----------\n    : bool\n        关注操作是否成功\n    '''\n    pass\n```\n\n\n```tool-8\ndef boss_zhipin.remove_from_favorites(job_id: str) -> bool:\n    '''\n    取消关注职位\n\n    Parameters\n    ----------\n    job_id : str\n        职位ID\n\n    Returns\n    ----------\n    : bool\n        取消关注操作是否成功\n    '''\n    pass\n```\n\n\n```tool-9\ndef local_memory.add(data: str, metadata: dict) -> dict:\n    '''\n    向本地知识库中添加知识和记忆\n\n    Parameters\n    ----------\n    data : str\n        添加记忆的相关数据，文本数据为记忆本身的内容\n    metadata : dict, optional\n        记忆的相关属性，创建时间、类型等\n\n    Returns\n    ----------\n    : dict\n        mem0返回的状态\n    '''\n    pass\n```\n\n\n```tool-10\ndef local_memory.search(query: str, filters: dict) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n    filters : dict, optional\n        查询记忆的过滤条件\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```",
        "query": "根据我当前所在的城市搜索自然语言处理相关岗位的工作，并进行投递简历。",
        "ground_truth": [
            {
                "id": 1,
                "name": "local_memory.search",
                "args": {
                    "query": "用户所在城市"
                }
            },
            {
                "id": 2,
                "name": "boss_zhipin.search_jobs",
                "args": {
                    "keywords": "自然语言处理",
                    "location": "#E1[0]",
                    "job_type": "",
                    "salary_range": ""
                }
            },
            {
                "id": 3,
                "name": "boss_zhipin.submit_resume",
                "args": {}
            }
        ],
        "plan_str": "SubTask1: 搜索用户所在城市\n#E1 = local_memory.search(query=\"用户所在城市\")\nSubTask2: 根据用户所在城市搜索自然\n#E2 = boss_zhipin.search_jobs(keywords=\"自然语言处理\", location=\"#E1[0]\", job_type=\"\", salary_range=\"\")\nSubTask3: 在BOSS直聘上投递简历\n#E3 = boss_zhipin.submit_resume()"
    },
    "query_77": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "models",
                    "calendar_app"
                ],
                "selected_apis_name": [
                    "models.scan_image_then_extract_information",
                    "calendar_app.view_calendar",
                    "calendar_app.edit_event",
                    "calendar_app.search_events",
                    "calendar_app.list_events",
                    "models.date_qa",
                    "calendar_app.sync_calendar",
                    "models.multimodal_qa",
                    "calendar_app.create_event",
                    "models.extract_information_from_text"
                ]
            },
            "environment": {
                "datetime": "2024年08月21日 星期三",
                "location": "上海"
            }
        },
        "api_descriptions": "```tool-1\ndef models.scan_image_then_extract_information(instruction: str, image_url: str) -> str:\n    '''\n    擅长从给定(手机屏幕)图片中抽取需要的信息，例如从手机/PC等设备屏幕上抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将从该图片中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef calendar_app.view_calendar(view_type: str, date: str) -> List[Dict[str, Union[str, List[str]]]]:\n    '''\n    查看日历视图\n\n    Parameters\n    ----------\n    view_type : str\n        视图类型，例如'day', 'week', 'month'\n    date : str\n        需要查看的日期（ISO格式）\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, List[str]]]]\n        对应视图的事件列表\n    '''\n    pass\n```\n\n\n```tool-3\ndef calendar_app.edit_event(event_id: str, title: str, start_time: str, end_time: str, location: str, description: str, attendees: List[str]) -> bool:\n    '''\n    编辑已有的事件\n\n    Parameters\n    ----------\n    event_id : str\n        事件ID\n    title : str, optional\n        新的事件标题\n    start_time : str, optional\n        新的事件开始时间（ISO格式）\n    end_time : str, optional\n        新的事件结束时间（ISO格式）\n    location : str, optional\n        新的事件地点\n    description : str, optional\n        新的事件描述\n    attendees : List[str], optional\n        新的事件参与者邮箱列表\n\n    Returns\n    ----------\n    : bool\n        编辑操作是否成功\n    '''\n    pass\n```\n\n\n```tool-4\ndef calendar_app.search_events(query: str) -> List[Dict[str, Union[str, List[str]]]]:\n    '''\n    搜索事件和日程安排\n\n    Parameters\n    ----------\n    query : str\n        搜索关键词\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, List[str]]]]\n        搜索结果，符合条件的事件列表\n    '''\n    pass\n```\n\n\n```tool-5\ndef calendar_app.list_events(start_time: str, end_time: str, filter: str, sort_by: str) -> List[Dict[str, Union[str, List[str]]]]:\n    '''\n    获取所有事件的列表\n\n    Parameters\n    ----------\n    start_time : str\n        查询事件的开始时间（ISO格式）\n    end_time : str\n        查询事件的结束时间（ISO格式）\n    filter : str, optional\n        过滤条件，如地点、参与者等\n    sort_by : str, optional\n        排序条件，如时间、标题等\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, List[str]]]]\n        事件的列表，每个事件包含详细信息\n    '''\n    pass\n```\n\n\n```tool-6\ndef models.date_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长解答节假日、节气、是否上班、调休信息相关问题；也支持时间推理计算，如日期天数之差、离国庆节还有多久等。\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题，与节假日、节气、调休信息、日期推算相关\n    references : List[Union[List[str], str]]\n        提供的参考信息，能帮助解答问题，如当前日期、星期数等信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-7\ndef calendar_app.sync_calendar() -> bool:\n    '''\n    同步日历与其他设备\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : bool\n        同步操作是否成功\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef calendar_app.create_event(title: str, start_time: str, end_time: str, location: str, description: str, attendees: List[str]) -> str:\n    '''\n    创建新的事件\n\n    Parameters\n    ----------\n    title : str\n        事件标题\n    start_time : str\n        事件开始时间（ISO格式）\n    end_time : str\n        事件结束时间（ISO格式）\n    location : str, optional\n        事件地点\n    description : str, optional\n        事件描述\n    attendees : List[str], optional\n        事件参与者邮箱列表\n\n    Returns\n    ----------\n    : str\n        创建成功的事件ID\n    '''\n    pass\n```\n\n\n```tool-10\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```",
        "query": "帮我接入我日程中的会议",
        "ground_truth": [
            {
                "id": 1,
                "name": "models.date_qa",
                "args": {
                    "instruction": "现在几点"
                }
            },
            {
                "id": 2,
                "name": "calendar_app.view_calendar",
                "args": {
                    "view_type": "day",
                    "date": "2024-08-21"
                }
            },
            {
                "id": 3,
                "name": "models.extract_information_from_text",
                "args": {
                    "text": "#E2",
                    "instruction": "筛选出当前时间#E1正在进行的会议"
                }
            },
            {
                "id": 4,
                "name": "models.extract_information_from_text",
                "args": {
                    "text": "#E3",
                    "instruction": "抽取会议链接"
                }
            }
        ],
        "plan_str": "SubTask1: 获取当前时间\n#E1 = models.date_qa(instruction=\"现在几点\")\nSubTask2: 查看今天的日程安排，查找当前时间正在进行的会议\n#E2 = calendar_app.view_calendar(view_type='day', date='2024-08-21')\nSubTask3: 从今天的日程安排中，筛选出当前时间正在进行的会议\n#E3 = models.extract_information_from_text(text=#E2, instruction=\"筛选出当前时间#E1正在进行的会议\") \nSubTask4: 从筛选出的会议信息中，抽取会议链接\n#E4 = models.extract_information_from_text(text=#E3, instruction=\"抽取会议链接\")"
    },
    "query_78": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "qunar",
                    "models"
                ],
                "selected_apis_name": [
                    "models.personal_qa",
                    "qunar.manage_orders",
                    "qunar.search_flights",
                    "models.multimodal_qa",
                    "models.creative_writing",
                    "qunar.book_attraction_ticket",
                    "models.search_then_response",
                    "qunar.search_hotels",
                    "qunar.get_travel_guides",
                    "models.date_qa"
                ]
            },
            "environment": {
                "datetime": "2021年02月13日 星期六",
                "location": "浙江省金华市"
            }
        },
        "api_descriptions": "```tool-1\ndef models.personal_qa(instruction: str, user_features: str, references: Dict[str, str]) -> str:\n    '''\n    擅长回复可以结合用户个性化信息回答的问题\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题\n    user_features : str\n        提供的用户个性化信息\n    references : Dict[str, str], optional\n        参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef qunar.manage_orders() -> List[Dict]:\n    '''\n    管理订单\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict]\n        用户的订单列表，包括机票订单、酒店订单等\n    '''\n    pass\n```\n\n\n```tool-3\ndef qunar.search_flights(departure_city: str, arrival_city: str, departure_date: str, return_date: str) -> List[Dict]:\n    '''\n    搜索机票\n\n    Parameters\n    ----------\n    departure_city : str\n        出发城市\n    arrival_city : str\n        到达城市\n    departure_date : str\n        出发日期，格式为YYYY-MM-DD\n    return_date : str, optional\n        返回日期，格式为YYYY-MM-DD\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的机票列表，包括航班信息、价格等\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef qunar.book_attraction_ticket(attraction_id: str, visit_date: str, visitor_info: List[Dict], contact_info: Dict) -> Dict:\n    '''\n    预订景点门票\n\n    Parameters\n    ----------\n    attraction_id : str\n        景点ID\n    visit_date : str\n        参观日期，格式为YYYY-MM-DD\n    visitor_info : List[Dict]\n        参观者信息，包括姓名、身份证号等\n    contact_info : Dict\n        联系方式，包括手机号、邮箱等\n\n    Returns\n    ----------\n    : Dict\n        返回预订成功的订单信息\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.search_then_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个具备搜索引擎能力的问答模型，具备以下能力：\n1. 搜索实时信息并总结。如果用户问题涉及时效性信息，问答模型第一步通过搜索引擎检索信息，第二步对检索的多个信息进行汇总，生成回复；\n2. 问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的instruction和给定的参考references，生成正确、有用、安全的回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令/问题，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        返回的回复\n    '''\n    pass\n```\n\n\n```tool-8\ndef qunar.search_hotels(location: str, check_in_date: str, check_out_date: str) -> List[Dict]:\n    '''\n    搜索酒店\n\n    Parameters\n    ----------\n    location : str\n        酒店所在城市或地点\n    check_in_date : str\n        入住日期，格式为YYYY-MM-DD\n    check_out_date : str\n        退房日期，格式为YYYY-MM-DD\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的酒店列表，包括酒店名称、价格等\n    '''\n    pass\n```\n\n\n```tool-9\ndef qunar.get_travel_guides(destination: str) -> List[Dict]:\n    '''\n    获取旅游攻略\n\n    Parameters\n    ----------\n    destination : str\n        旅游目的地\n\n    Returns\n    ----------\n    : List[Dict]\n        旅游攻略列表，包括景点推荐、餐饮推荐等\n    '''\n    pass\n```\n\n\n```tool-10\ndef models.date_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长解答节假日、节气、是否上班、调休信息相关问题；也支持时间推理计算，如日期天数之差、离国庆节还有多久等。\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题，与节假日、节气、调休信息、日期推算相关\n    references : List[Union[List[str], str]]\n        提供的参考信息，能帮助解答问题，如当前日期、星期数等信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```",
        "query": "最近想去北京玩5天，给我定制一个合适的行程",
        "ground_truth": [
            {
                "id": 1,
                "name": "qunar.get_travel_guides",
                "args": {
                    "destination": "北京"
                }
            },
            {
                "id": 2,
                "name": "models.creative_writing",
                "args": {
                    "instruction": "根据北京的旅游攻略，定制一个为期5天的行程计划",
                    "references": [
                        "#E1"
                    ]
                }
            }
        ],
        "plan_str": "SubTask1: 获取北京的旅游攻略\n#E1 = qunar.get_travel_guides(destination=\"北京\")\n\nSubTask2: 根据旅游攻略，定制一个为期5天的行程计划\n#E2 = models.creative_writing(instruction=\"根据北京的旅游攻略，定制一个为期5天的行程计划\", references=[#E1])"
    },
    "query_79": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "royalflush",
                    "models",
                    "toutiao"
                ],
                "selected_apis_name": [
                    "toutiao.submit_comment",
                    "models.creative_writing",
                    "models.math_qa",
                    "toutiao.search_news",
                    "royalflush.get_financial_news",
                    "models.extract_information_from_text",
                    "royalflush.analyze_portfolio",
                    "royalflush.sell_stock",
                    "toutiao.get_article_detail",
                    "toutiao.get_hot_news"
                ]
            },
            "environment": {
                "datetime": "2021年03月26日 星期五",
                "location": "宁夏回族自治区石嘴山市"
            }
        },
        "api_descriptions": "```tool-1\ndef toutiao.submit_comment(content_id: str, content: str) -> bool:\n    '''\n    提交文章评论\n\n    Parameters\n    ----------\n    content_id : str\n        文章或视频的ID\n    content : str\n        评论内容\n\n    Returns\n    ----------\n    : bool\n        评论是否提交成功\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef toutiao.search_news(query: str, page: int, count: int) -> List[Dict]:\n    '''\n    搜索新闻\n\n    Parameters\n    ----------\n    query : str\n        搜索关键词\n    page : int, optional\n        页码\n    count : int, optional\n        每页显示的新闻条数\n\n    Returns\n    ----------\n    : List[Dict]\n        搜索结果，符合条件的新闻列表\n    '''\n    pass\n```\n\n\n```tool-5\ndef royalflush.get_financial_news(category: str) -> List[Dict]:\n    '''\n    获取财经资讯\n\n    Parameters\n    ----------\n    category : str, optional\n        资讯类别，如股票、基金、期货等\n\n    Returns\n    ----------\n    : List[Dict]\n        财经资讯列表，包括标题、发布时间、来源等\n    '''\n    pass\n```\n\n\n```tool-6\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-7\ndef royalflush.analyze_portfolio() -> Dict:\n    '''\n    投资组合分析\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : Dict\n        投资组合分析结果，包括收益率、风险评估等\n    '''\n    pass\n```\n\n\n```tool-8\ndef royalflush.sell_stock(stock_symbol: str, quantity: int, price: float) -> bool:\n    '''\n    卖出股票\n\n    Parameters\n    ----------\n    stock_symbol : str\n        股票代码\n    quantity : int\n        卖出数量\n    price : float\n        卖出价格\n\n    Returns\n    ----------\n    : bool\n        卖出操作是否成功\n    '''\n    pass\n```\n\n\n```tool-9\ndef toutiao.get_article_detail(article_id: str) -> Dict:\n    '''\n    获取文章详情\n\n    Parameters\n    ----------\n    article_id : str\n        文章ID\n\n    Returns\n    ----------\n    : Dict\n        文章的详细信息，包括标题、内容、作者等\n    '''\n    pass\n```\n\n\n```tool-10\ndef toutiao.get_hot_news(category: str, page: int, count: int) -> List[Dict]:\n    '''\n    获取热点新闻\n\n    Parameters\n    ----------\n    category : str, optional\n        热点新闻分类\n    page : int, optional\n        页码\n    count : int, optional\n        每页显示的新闻条数\n\n    Returns\n    ----------\n    : List[Dict]\n        热点新闻列表，每条新闻包括标题、摘要、链接等信息\n    '''\n    pass\n```",
        "query": "查一下最近那些股票上涨较快，并在头条上查询这些股票相关模块的新闻。",
        "ground_truth": [
            {
                "id": 1,
                "name": "royalflush.get_financial_news",
                "args": {
                    "category": "股票涨幅榜"
                }
            },
            {
                "id": 2,
                "name": "models.extract_information_from_text",
                "args": {
                    "instruction": "抽取最近股票涨幅榜中的股票名称",
                    "text": "#E1"
                }
            },
            {
                "id": 3,
                "name": "toutiao.search_news",
                "args": {
                    "query": "#E2",
                    "page": "1",
                    "count": "10"
                }
            }
        ],
        "plan_str": "SubTask1: 查询最近股票涨幅榜\n#E1 = royalflush.get_financial_news(category='股票涨幅榜')\nSubTask2: 从股票涨幅榜中抽取股票名称\n#E2 = models.extract_information_from_text(instruction=\"抽取最近股票涨幅榜中的股票名称\", text=#E1)\nSubTask3: 在头条上搜索这些股票相关的新闻\n#E3 = toutiao.search_news(query=\"#E2\", page=1, count=10) \n"
    },
    "query_80": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "semantic_search",
                    "singtogether"
                ],
                "selected_apis_name": [
                    "semantic_search.web_search",
                    "singtogether.create_song",
                    "singtogether.join_duet",
                    "singtogether.start_live_stream",
                    "singtogether.start_singing_competition",
                    "singtogether.cast_to_tv",
                    "semantic_search.personal_context_search",
                    "singtogether.start_ai_practice",
                    "singtogether.apply_audio_effect",
                    "singtogether.download_song"
                ]
            },
            "environment": {
                "datetime": "2023年10月25日 星期三",
                "location": "湖南省株洲市"
            }
        },
        "api_descriptions": "```tool-1\ndef semantic_search.web_search(query: str, count: int) -> List[str]:\n    '''\n    网页搜索，根据输入的query，在搜索引擎中查找相关页面，可用于查找人物、物品、体育赛事、事件相关的时效性信息，精确信息。\n\n    Parameters\n    ----------\n    query : str\n        用户搜索的关键词、短语、查询，该参数项不能为空。\n    count : int, optional\n        期望返回的搜索结果数量\n\n    Returns\n    ----------\n    : List[str]\n        搜索引擎返回的结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef singtogether.create_song(title: str, lyrics: str, background_music: str) -> str:\n    '''\n    用于创作一首新歌\n\n    Parameters\n    ----------\n    title : str\n        歌曲标题\n    lyrics : str\n        歌曲歌词\n    background_music : str\n        背景音乐文件路径\n\n    Returns\n    ----------\n    : str\n        新创作歌曲的唯一标识符（ID）\n    '''\n    pass\n```\n\n\n```tool-3\ndef singtogether.join_duet(song_id: str, partner_id: str) -> bool:\n    '''\n    用于加入一个合唱\n\n    Parameters\n    ----------\n    song_id : str\n        要合唱的歌曲ID\n    partner_id : str\n        合唱伙伴的用户ID\n\n    Returns\n    ----------\n    : bool\n        加入合唱是否成功的标志\n    '''\n    pass\n```\n\n\n```tool-4\ndef singtogether.start_live_stream(title: str, description: str) -> str:\n    '''\n    用于开始直播\n\n    Parameters\n    ----------\n    title : str\n        直播标题\n    description : str, optional\n        直播描述\n\n    Returns\n    ----------\n    : str\n        直播的唯一标识符（ID）\n    '''\n    pass\n```\n\n\n```tool-5\ndef singtogether.start_singing_competition(room_id: str) -> bool:\n    '''\n    用于开始一个抢麦比赛\n\n    Parameters\n    ----------\n    room_id : str\n        歌房ID\n\n    Returns\n    ----------\n    : bool\n        表示抢麦比赛是否成功开始的布尔值\n    '''\n    pass\n```\n\n\n```tool-6\ndef singtogether.cast_to_tv(song_id: str, tv_device_id: str) -> bool:\n    '''\n    用于将作品投射到电视播放\n\n    Parameters\n    ----------\n    song_id : str\n        要投射的歌曲ID\n    tv_device_id : str\n        电视设备ID\n\n    Returns\n    ----------\n    : bool\n        投射操作是否成功\n    '''\n    pass\n```\n\n\n```tool-7\ndef semantic_search.personal_context_search(query: str) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef singtogether.start_ai_practice(song_id: str) -> Dict[str, Union[str, int, float]]:\n    '''\n    用于开始AI练唱\n\n    Parameters\n    ----------\n    song_id : str\n        要练唱的歌曲ID\n\n    Returns\n    ----------\n    : Dict[str, Union[str, int, float]]\n        AI练唱的相关信息，包括练唱进度、评分等\n    '''\n    pass\n```\n\n\n```tool-9\ndef singtogether.apply_audio_effect(song_id: str, effect_type: str) -> bool:\n    '''\n    用于应用音效到录制的歌曲\n\n    Parameters\n    ----------\n    song_id : str\n        要应用音效的歌曲ID\n    effect_type : str\n        音效类型\n\n    Returns\n    ----------\n    : bool\n        音效应用是否成功\n    '''\n    pass\n```\n\n\n```tool-10\ndef singtogether.download_song(song_id: str) -> str:\n    '''\n    用于下载一首歌作为视频\n\n    Parameters\n    ----------\n    song_id : str\n        要下载的歌曲ID\n\n    Returns\n    ----------\n    : str\n        下载的视频文件的URL地址\n    '''\n    pass\n```",
        "query": "看一下本周最火的歌, 我想练一下",
        "ground_truth": [
            {
                "id": 1,
                "name": "semantic_search.web_search",
                "args": {
                    "query": "本周最火歌曲"
                }
            },
            {
                "id": 2,
                "name": "singtogether.start_ai_practice",
                "args": {
                    "song_id": "#E1[0]"
                }
            }
        ],
        "plan_str": "SubTask1: 查询本周最火的歌曲\n#E1 = semantic_search.web_search(query=\"本周最火歌曲\")\nSubTask2: 开始AI练唱，歌曲ID为搜索结果中的第一首歌\n#E2 = singtogether.start_ai_practice(song_id=#E1[0])"
    },
    "query_81": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "wewave",
                    "calendar_app",
                    "study163"
                ],
                "selected_apis_name": [
                    "calendar_app.invite_attendees",
                    "study163.record_learning_progress",
                    "study163.browse_courses",
                    "calendar_app.list_events",
                    "study163.download_course_video",
                    "calendar_app.set_event_reminder",
                    "calendar_app.set_recurring_event",
                    "calendar_app.create_event",
                    "wewave.post_weibo",
                    "study163.post_comment"
                ]
            },
            "environment": {
                "datetime": "2024年08月23日 星期五",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef calendar_app.invite_attendees(event_id: str, attendees: List[str]) -> bool:\n    '''\n    邀请他人参加事件\n\n    Parameters\n    ----------\n    event_id : str\n        事件ID\n    attendees : List[str]\n        参与者邮箱列表\n\n    Returns\n    ----------\n    : bool\n        邀请操作是否成功\n    '''\n    pass\n```\n\n\n```tool-2\ndef study163.record_learning_progress(course_id: str, video_id: str, progress: int) -> bool:\n    '''\n    记录学习进度\n\n    Parameters\n    ----------\n    course_id : str\n        课程ID\n    video_id : str\n        视频ID\n    progress : int\n        学习进度，视频播放的时间点，单位为秒\n\n    Returns\n    ----------\n    : bool\n        记录是否成功\n    '''\n    pass\n```\n\n\n```tool-3\ndef study163.browse_courses(category: str, filter: str, sort_by: str) -> List[Dict]:\n    '''\n    浏览课程\n\n    Parameters\n    ----------\n    category : str, optional\n        课程分类，如科学、艺术、技术等\n    filter : str, optional\n        过滤条件，如免费的、热门的等\n    sort_by : str, optional\n        排序方式，如最新、评分等\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的课程列表，包括课程名称、简介、图片等\n    '''\n    pass\n```\n\n\n```tool-4\ndef calendar_app.list_events(start_time: str, end_time: str, filter: str, sort_by: str) -> List[Dict[str, Union[str, List[str]]]]:\n    '''\n    获取所有事件的列表\n\n    Parameters\n    ----------\n    start_time : str\n        查询事件的开始时间（ISO格式）\n    end_time : str\n        查询事件的结束时间（ISO格式）\n    filter : str, optional\n        过滤条件，如地点、参与者等\n    sort_by : str, optional\n        排序条件，如时间、标题等\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, List[str]]]]\n        事件的列表，每个事件包含详细信息\n    '''\n    pass\n```\n\n\n```tool-5\ndef study163.download_course_video(course_id: str, video_id: str) -> str:\n    '''\n    下载课程视频\n\n    Parameters\n    ----------\n    course_id : str\n        课程ID\n    video_id : str\n        视频ID\n\n    Returns\n    ----------\n    : str\n        下载链接或下载操作是否成功\n    '''\n    pass\n```\n\n\n```tool-6\ndef calendar_app.set_event_reminder(event_id: str, reminder_time: str, reminder_method: str) -> bool:\n    '''\n    设置事件提醒和通知\n\n    Parameters\n    ----------\n    event_id : str\n        事件ID\n    reminder_time : str\n        提醒时间（ISO格式）\n    reminder_method : str\n        提醒方式，例如'email', 'popup'\n\n    Returns\n    ----------\n    : bool\n        设置提醒操作是否成功\n    '''\n    pass\n```\n\n\n```tool-7\ndef calendar_app.set_recurring_event(event_id: str, recurrence_rule: str) -> bool:\n    '''\n    设置重复事件\n\n    Parameters\n    ----------\n    event_id : str\n        事件ID\n    recurrence_rule : str\n        重复规则，例如'每周一重复'\n\n    Returns\n    ----------\n    : bool\n        设置重复事件操作是否成功\n    '''\n    pass\n```\n\n\n```tool-8\ndef calendar_app.create_event(title: str, start_time: str, end_time: str, location: str, description: str, attendees: List[str]) -> str:\n    '''\n    创建新的事件\n\n    Parameters\n    ----------\n    title : str\n        事件标题\n    start_time : str\n        事件开始时间（ISO格式）\n    end_time : str\n        事件结束时间（ISO格式）\n    location : str, optional\n        事件地点\n    description : str, optional\n        事件描述\n    attendees : List[str], optional\n        事件参与者邮箱列表\n\n    Returns\n    ----------\n    : str\n        创建成功的事件ID\n    '''\n    pass\n```\n\n\n```tool-9\ndef wewave.post_weibo(content: str, images: List[str], video: str) -> bool:\n    '''\n    发布新的微博\n\n    Parameters\n    ----------\n    content : str\n        微博内容\n    images : List[str], optional\n        微博图片列表\n    video : str, optional\n        微博视频链接\n\n    Returns\n    ----------\n    : bool\n        发布微博是否成功的状态\n    '''\n    pass\n```\n\n\n```tool-10\ndef study163.post_comment(course_id: str, comment: str) -> bool:\n    '''\n    发布课程评论\n\n    Parameters\n    ----------\n    course_id : str\n        课程ID\n    comment : str\n        评论内容\n\n    Returns\n    ----------\n    : bool\n        评论发布是否成功\n    '''\n    pass\n```",
        "query": "帮我下载些免费的犯罪心理学课程资源，每天20:00提醒我观看并在微博上打卡记录",
        "ground_truth": [
            {
                "id": 1,
                "name": "study163.browse_courses",
                "args": {
                    "category": "犯罪心理学",
                    "filter": "免费的",
                    "sort_by": "最新"
                }
            },
            {
                "id": 2,
                "name": "study163.download_course_video",
                "args": {
                    "course_id": "#E1[0]['course_id']",
                    "video_id": "#E1[0]['video_id']"
                }
            },
            {
                "id": 3,
                "name": "calendar_app.create_event",
                "args": {
                    "title": "观看犯罪心理学课程",
                    "start_time": "2024-08-21T20:00:00",
                    "end_time": "2024-08-21T21:00:00",
                    "location": "",
                    "description": "观看犯罪心理学课程",
                    "attendees": []
                }
            },
            {
                "id": 4,
                "name": "calendar_app.set_recurring_event",
                "args": {
                    "event_id": "#E3",
                    "recurrence_rule": "每天"
                }
            },
            {
                "id": 5,
                "name": "calendar_app.set_event_reminder",
                "args": {
                    "event_id": "#E3",
                    "reminder_time": "2024-08-21T19:55:00",
                    "reminder_method": "popup"
                }
            },
            {
                "id": 6,
                "name": "wewave.post_weibo",
                "args": {
                    "content": "我正在学习犯罪心理学课程，今天是第一天打卡！",
                    "images": [],
                    "video": ""
                }
            }
        ],
        "plan_str": "SubTask1: 浏览免费的犯罪心理学课程资源\n#E1 = study163.browse_courses(category=\"犯罪心理学\", filter=\"免费的\", sort_by=\"最新\")\n\nSubTask2: 下载第一个免费的犯罪心理学课程资源的视频\n#E2 = study163.download_course_video(course_id=#E1[0]['course_id'], video_id=#E1[0]['video_id'])\n\nSubTask3: 创建每天20:00的观看提醒\n#E3 = calendar_app.create_event(title=\"观看犯罪心理学课程\", start_time=\"2024-08-21T20:00:00\", end_time=\"2024-08-21T21:00:00\", location=\"\", description=\"观看犯罪心理学课程\", attendees=[])\n\nSubTask4: 设置事件为每天重复\n#E4 = calendar_app.set_recurring_event(event_id=#E3, recurrence_rule=\"每天\")\n\nSubTask5: 设置事件提醒\n#E5 = calendar_app.set_event_reminder(event_id=#E3, reminder_time=\"2024-08-21T19:55:00\", reminder_method=\"popup\")\n\nSubTask6: 在微博上打卡记录\n#E6 = wewave.post_weibo(content=\"我正在学习犯罪心理学课程，今天是第一天打卡！\", images=[], video=\"\")"
    },
    "query_82": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "wechat",
                    "amap",
                    "Starbucks"
                ],
                "selected_apis_name": [
                    "amap.route_planning",
                    "wechat.manage_contacts",
                    "wechat.wechat_pay",
                    "Starbucks.place_order",
                    "wechat.manage_group",
                    "wechat.send_message",
                    "Starbucks.subscribe_notifications",
                    "amap.search_poi",
                    "Starbucks.get_coupons",
                    "amap.get_current_location"
                ]
            },
            "environment": {
                "datetime": "2024年08月21日 星期三",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef amap.route_planning(origin: str, destination: str, strategy: str) -> Dict:\n    '''\n    路线规划\n\n    Parameters\n    ----------\n    origin : str\n        起点坐标，经纬度用逗号分隔\n    destination : str\n        终点坐标，经纬度用逗号分隔\n    strategy : str, optional\n        路线规划策略，如最短时间，避开拥堵等\n\n    Returns\n    ----------\n    : Dict\n        返回路线规划信息，如路程时间、距离、途径点等\n    '''\n    pass\n```\n\n\n```tool-2\ndef wechat.manage_contacts(action: str, contact_id: Optional[str], contact_info: Optional[Dict[str, Union[str, int]]]) -> Union[List[Dict[str, Union[str, int]]], bool]:\n    '''\n    管理好友\n\n    Parameters\n    ----------\n    action : str\n        操作类型，例如'add', 'delete', 'block', 'view'\n    contact_id : Optional[str], optional\n        好友ID，仅在添加、删除、屏蔽时需要\n    contact_info : Optional[Dict[str, Union[str, int]]], optional\n        好友信息，仅在添加或更新时需要\n\n    Returns\n    ----------\n    : Union[List[Dict[str, Union[str, int]]], bool]\n        好友信息列表，或好友管理操作是否成功\n    '''\n    pass\n```\n\n\n```tool-3\ndef wechat.wechat_pay(amount: float, merchant_id: str) -> bool:\n    '''\n    微信支付\n\n    Parameters\n    ----------\n    amount : float\n        支付金额\n    merchant_id : str\n        商户ID\n\n    Returns\n    ----------\n    : bool\n        支付操作是否成功\n    '''\n    pass\n```\n\n\n```tool-4\ndef Starbucks.place_order(store_id: str, items: List[Dict], pickup_time: str, payment_method: str) -> Dict:\n    '''\n    在线订购\n\n    Parameters\n    ----------\n    store_id : str\n        店铺ID\n    items : List[Dict]\n        订单商品列表，每个商品包括名称、数量、价格等\n    pickup_time : str\n        取货时间，格式为YYYY-MM-DD HH:MM\n    payment_method : str\n        支付方式，如银行卡、微信等\n\n    Returns\n    ----------\n    : Dict\n        返回成功下单的订单信息，包括订单ID、预估取货时间等\n    '''\n    pass\n```\n\n\n```tool-5\ndef wechat.manage_group(action: str, group_id: str, member_id: Optional[str]) -> Union[Dict[str, Union[str, List[str]]], bool]:\n    '''\n    管理群聊\n\n    Parameters\n    ----------\n    action : str\n        操作类型，例如'add_member', 'remove_member', 'view'\n    group_id : str\n        群聊ID\n    member_id : Optional[str], optional\n        群聊成员ID，仅在添加或删除成员时需要\n\n    Returns\n    ----------\n    : Union[Dict[str, Union[str, List[str]]], bool]\n        群聊信息，或群聊管理操作是否成功\n    '''\n    pass\n```\n\n\n```tool-6\ndef wechat.send_message(recipient_id: str, message_type: str, content: Union[str, bytes]) -> bool:\n    '''\n    发送消息\n\n    Parameters\n    ----------\n    recipient_id : str\n        消息接收者ID\n    message_type : str\n        消息类型，如'text', 'image', 'video', 'voice'\n    content : Union[str, bytes]\n        消息内容，根据消息类型可以是文字、图片、视频二进制数据等\n\n    Returns\n    ----------\n    : bool\n        发送消息操作是否成功\n    '''\n    pass\n```\n\n\n```tool-7\ndef Starbucks.subscribe_notifications(notification_types: List[str]) -> bool:\n    '''\n    接收消息通知\n\n    Parameters\n    ----------\n    notification_types : List[str], optional\n        希望接收的消息类型，如新品上市、活动优惠等\n\n    Returns\n    ----------\n    : bool\n        订阅操作是否成功\n    '''\n    pass\n```\n\n\n```tool-8\ndef amap.search_poi(keywords: str, city: str, types: str) -> List[Dict]:\n    '''\n    搜索地点\n\n    Parameters\n    ----------\n    keywords : str\n        搜索关键词\n    city : str, optional\n        城市名\n    types : str, optional\n        搜索POI类型，如餐馆，酒店等\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的地点列表，每个地点包含名称、地址、坐标等信息\n    '''\n    pass\n```\n\n\n```tool-9\ndef Starbucks.get_coupons() -> List[Dict]:\n    '''\n    领取优惠券\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict]\n        当前可用的优惠券列表，每个优惠券包括名称、折扣、有效期等\n    '''\n    pass\n```\n\n\n```tool-10\ndef amap.get_current_location() -> Dict[str, float]:\n    '''\n    获取当前位置\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : Dict[str, float]\n        返回当前的经纬度坐标\n    '''\n    pass\n```",
        "query": "领取星巴克优惠券，在距离最近的门店点一杯美式咖啡，在微信告知李四门店地址，提醒他及时取餐",
        "ground_truth": [
            {
                "id": 1,
                "name": "Starbucks.get_coupons",
                "args": {}
            },
            {
                "id": 2,
                "name": "amap.get_current_location",
                "args": {}
            },
            {
                "id": 3,
                "name": "amap.search_poi",
                "args": {
                    "keywords": "距离 #E2 最近的星巴克门店",
                    "city": "深圳",
                    "types": "餐厅"
                }
            },
            {
                "id": 4,
                "name": "Starbucks.place_order",
                "args": {
                    "user_id": "用户ID",
                    "store_id": "E3",
                    "items": [
                        "美式咖啡"
                    ],
                    "pickup_time": "2024-08-21 15:00",
                    "payment_method": "微信"
                }
            },
            {
                "id": 5,
                "name": "wechat.manage_contacts",
                "args": {
                    "action": "view",
                    "contact_id": "None",
                    "contact_info": {
                        "name": "李四"
                    }
                }
            },
            {
                "id": 6,
                "name": "wechat.send_message",
                "args": {
                    "recipient_id": "#E5[0]",
                    "message_type": "text",
                    "content": "门店地址：#E3 ，请凭借取餐信息#E4及时取餐"
                }
            }
        ],
        "plan_str": "SubTask1: 领取星巴克优惠券\n#E1 = Starbucks.get_coupons()\n\nSubTask2: 获取用户当前位置\n#E2 = amap.get_current_location()\n\nSubTask3: 查找距离用户最近的星巴克门店\n#E3 = amap.search_poi(keywords=\"距离 #E2 最近的星巴克门店\",  city=\"深圳\", types=\"餐厅\")\n\nSubTask4: 点一杯美式咖啡\n#E4 = Starbucks.place_order(user_id=\"用户ID\", store_id=E3, items=[\"美式咖啡\"], pickup_time=\"2024-08-21 15:00\", payment_method=\"微信\")\n\nSubTask5: 查找张帆的微信联系方式\n#E5 = wechat.manage_contacts(action=\"view\", contact_id=None, contact_info={\"name\": \"李四\"})\n\nSubTask6: 将门店地址发送给李四\n#E6 = wechat.send_message(recipient_id=#E5[0], message_type=\"text\", content=\"门店地址：#E3 ，请凭借取餐信息#E4及时取餐\")"
    },
    "query_83": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "tianyancha",
                    "semantic_search",
                    "models"
                ],
                "selected_apis_name": [
                    "models.personal_qa",
                    "semantic_search.web_search",
                    "models.general_response",
                    "models.math_qa",
                    "tianyancha.get_shareholders_info",
                    "models.image_search",
                    "models.directly_answer",
                    "tianyancha.get_search_records",
                    "semantic_search.personal_context_search",
                    "tianyancha.get_company_graph"
                ]
            },
            "environment": {
                "datetime": "2023年12月31日 星期日",
                "location": "长沙"
            }
        },
        "api_descriptions": "```tool-1\ndef models.personal_qa(instruction: str, user_features: str, references: Dict[str, str]) -> str:\n    '''\n    擅长回复可以结合用户个性化信息回答的问题\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题\n    user_features : str\n        提供的用户个性化信息\n    references : Dict[str, str], optional\n        参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef semantic_search.web_search(query: str, count: int) -> List[str]:\n    '''\n    网页搜索，根据输入的query，在搜索引擎中查找相关页面，可用于查找人物、物品、体育赛事、事件相关的时效性信息，精确信息。\n\n    Parameters\n    ----------\n    query : str\n        用户搜索的关键词、短语、查询，该参数项不能为空。\n    count : int, optional\n        期望返回的搜索结果数量\n\n    Returns\n    ----------\n    : List[str]\n        搜索引擎返回的结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef tianyancha.get_shareholders_info(company_id: str) -> List[Dict]:\n    '''\n    查询企业股东信息\n\n    Parameters\n    ----------\n    company_id : str\n        企业ID\n\n    Returns\n    ----------\n    : List[Dict]\n        企业的股东信息，包括股东名称、出资比例等\n    '''\n    pass\n```\n\n\n```tool-6\ndef models.image_search(image_url: str) -> str:\n    '''\n    一个基于给定的图片搜索图中事物相关信息的模型，该模型的能力包括：\n1. 搜索著名人物的身份、经历，包括明星、政客、历史人物、体育明星等；\n2. 识别图像中动物/植物的品种；\n3. 识别照片中地点或景点的名称和地址。\n\n    Parameters\n    ----------\n    image_url : str\n        给定图片地址，将搜索该图片中的人、动植物或地点的相关信息\n\n    Returns\n    ----------\n    : str\n        图片中事物的相关信息\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.directly_answer(answer: str) -> str:\n    '''\n    你可以通过这个工具直接回答问题。例如以下情况，你可以直接回答：\n1. 用户的问题属于简单闲聊类，如问候语、询问人设信息等；\n2. 用户问题的答案可以直接从屏幕图片中获取，如图片中的文字、颜色、数量等显式信息。\n\n    Parameters\n    ----------\n    answer : str\n        answer\n\n    Returns\n    ----------\n    : str\n        问题答案\n    '''\n    pass\n```\n\n\n```tool-8\ndef tianyancha.get_search_records() -> List[Dict]:\n    '''\n    获取查询记录\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict]\n        用户的查询记录列表，包括查询内容、查询时间等\n    '''\n    pass\n```\n\n\n```tool-9\ndef semantic_search.personal_context_search(query: str) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef tianyancha.get_company_graph(company_id: str) -> Dict:\n    '''\n    查看企业图谱\n\n    Parameters\n    ----------\n    company_id : str\n        企业ID\n\n    Returns\n    ----------\n    : Dict\n        企业的关联图谱，包括关联企业、股东、高管等信息\n    '''\n    pass\n```",
        "query": "发布cogVideoX大模型那家公司，谁的持股比例最高？",
        "ground_truth": [
            {
                "id": 1,
                "name": "semantic_search.web_search",
                "args": {
                    "query": "cogVideoX 大模型 发布 公司"
                }
            },
            {
                "id": 2,
                "name": "models.general_response",
                "args": {
                    "instruction": "从文本中提取发布cogVideoX大模型的公司名称",
                    "references": [
                        "#E1"
                    ]
                }
            },
            {
                "id": 3,
                "name": "tianyancha.get_shareholders_info",
                "args": {
                    "company_id": "#E2"
                }
            },
            {
                "id": 4,
                "name": "models.general_response",
                "args": {
                    "instruction": "从股东信息中找到持股比例最高的股东",
                    "references": [
                        "#E3"
                    ]
                }
            }
        ],
        "plan_str": "SubTask1: 搜索 cogVideoX 大模型发布公司\n#E1 = semantic_search.web_search(query=\"cogVideoX 大模型 发布 公司\")\nSubTask2: 从搜索结果中提取公司名称\n#E2 = models.general_response(instruction=\"从文本中提取发布cogVideoX大模型的公司名称\", references=#E1)\nSubTask3: 查询该公司的股东信息\n#E3 = tianyancha.get_shareholders_info(company_id=#E2)\nSubTask4: 从股东信息中找到持股比例最高的股东\n#E4 = models.general_response(instruction=\"从股东信息中找到持股比例最高的股东\", references=#E3) \n"
    },
    "query_84": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "wechat",
                    "semantic_search",
                    "photos"
                ],
                "selected_apis_name": [
                    "wechat.send_message",
                    "photos.search_photo_local",
                    "photos.get_photos_by_albumid",
                    "photos.enable_remove_passerby_mode",
                    "semantic_search.personal_context_search",
                    "photos.move_photo_to_album",
                    "photos.enable_ai_repair_mode",
                    "wechat.receive_message",
                    "photos.enable_group_photo_optimization",
                    "wechat.manage_contacts"
                ]
            },
            "environment": {
                "datetime": "2023年12月01日 星期五",
                "location": "洛杉矶"
            }
        },
        "api_descriptions": "```tool-1\ndef wechat.send_message(recipient_id: str, message_type: str, content: Union[str, bytes]) -> bool:\n    '''\n    发送消息\n\n    Parameters\n    ----------\n    recipient_id : str\n        消息接收者ID\n    message_type : str\n        消息类型，如'text', 'image', 'video', 'voice'\n    content : Union[str, bytes]\n        消息内容，根据消息类型可以是文字、图片、视频二进制数据等\n\n    Returns\n    ----------\n    : bool\n        发送消息操作是否成功\n    '''\n    pass\n```\n\n\n```tool-2\ndef photos.search_photo_local(search_local_photo_keyword: str, location: str, time: str, search_media_type: str, search_album_type: str) -> List[str]:\n    '''\n    本地图片搜索 <图片搜索>属于<动效播放>类设置项，<本地图片搜索>是<图片搜索>设置项的一个具体操作指令，主要用于图片搜索可以让用户通过输入关键词等方式在系统图库或网络上快速查找特定的图片。在系统功能中的定义就是提供一种便捷的途径，帮助用户从大量的图片资源中精准定位到想要查找的图片，节省用户查找图片的时间和精力，提高用户在管理和浏览图片时的效率和体验。本地图片搜索是图片搜索下的一个类别，可以查找本地保存的特定主题的照片、特定时间拍摄的图片。它可以快速定位到用户手机内保存的各种图片，包括用户拍摄的照片、下载的图片、截图等。在系统功能中的定义就是通过特定的算法和索引，对本地存储的图片文件进行检索和筛选，以便用户能够精准、高效地找到他们想要的本地图片资源。\n\n\n    Parameters\n    ----------\n    search_local_photo_keyword : str, optional\n        图片搜索类型，取值范围不定，可能为[需要通过本地相册搜索的网络图片的名称或关键词,用户可以输入具体的图片名称、类型或模糊的图片描述,比如大草原、沙漠、湖泊、森林、汽车等,此参数可为空。]，可缺失\n    location : str, optional\n        图片搜索类型，取值范围不定，可能为[一个具体的地区名称,可以是一个国家,比如中国、美国、英国；也可以是省级行政区的名称,比如四川、北京、宁夏、香港；也可以是市级行政区的名称,比如成都、朝阳区；也可以是县级行政区的名称,比如金堂县、双流区；不能是一些泛化的区域描述,比如西南地区、华北地区、当前位置、这个位置。可以缺失]，可缺失\n    time : str, optional\n        图片搜索类型，取值范围不定，可能为[通用日期和时间的描述,可以是日期区间,比如最近,最近一周,未来五天,最近七天,周末；也可以是具体的某一天,比如今天、明天、星期六,下周一、7月13日,13号；也可以是某一天内的时间段,比如上午,今天下午,明天晚上；也可以是具体的时刻,比如现在,当前,目前,6点,明天10点。可以缺失]，可缺失\n    search_media_type : str, optional\n        图片搜索类型，取值范围不定，可能为[用户想要搜索的多媒体类型,包含：图片、视频、（动图、gif）,连拍,全景,延时摄影,慢动作,人像景深,实况图,为空则默认为搜图片]，可缺失\n    search_album_type : str, optional\n        图片搜索类型，取值范围不定，可能为[用户想要搜索的图集类型,该图集包含相册自带的和一些自动生成的,具体包含：收藏、截图、人物、微信、美图秀秀、美颜相机、轻颜相机等,可为空]，可缺失\n\n    Returns\n    ----------\n    : List[str]\n        本地图片搜索结果的文件路径列表\n    '''\n    pass\n```\n\n\n```tool-3\ndef photos.get_photos_by_albumid(album_id: str) -> List[str]:\n    '''\n    根据相册ID获取相册中的所有照片\n\n    Parameters\n    ----------\n    album_id : str\n        相册的ID\n\n    Returns\n    ----------\n    : List[str]\n        该相册的照片对象ID列表\n    '''\n    pass\n```\n\n\n```tool-4\ndef photos.enable_remove_passerby_mode() -> int:\n    '''\n    打开消除路人 <一键消除路人>属于<动效播放>类设置项，<打开消除路人>是<一键消除路人>设置项的一个具体操作指令，主要用于打开消除路人主要是用于在拍摄的照片或视频中，通过特定的算法和技术来移除画面中的路人等不必要的元素。在系统功能中的定义就是为用户提供一种便捷的图像处理功能，让用户可以轻松地对拍摄内容进行后期处理，使得主体对象更加突出，画面更加简洁干净，满足用户在某些场景下想要获得更纯净、更聚焦主体画面的需求，提升用户的拍摄体验和照片、视频的质量。\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : int\n        一键消除路人数值，取值范围为[0,999]，最小为[0],最大为[999]，不可缺失\n    '''\n    pass\n```\n\n\n```tool-5\ndef semantic_search.personal_context_search(query: str) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef photos.move_photo_to_album(photo_ids: List[str], album_id: str) -> bool:\n    '''\n    将指定照片移动到指定相册\n\n    Parameters\n    ----------\n    photo_ids : List[str]\n        要添加的照片ID列表\n    album_id : str\n        目标相册ID\n\n    Returns\n    ----------\n    : bool\n        是否成功移动照片\n    '''\n    pass\n```\n\n\n```tool-7\ndef photos.enable_ai_repair_mode() -> int:\n    '''\n    打开AI修复 <打开AI修复>属于<动效播放>类设置项，<打开AI修复>是<打开AI修复>设置项的一个具体操作指令，主要用于打开 AI 修复能够利用人工智能技术对图片或视频等内容进行智能修复处理。在系统功能中的定义是通过先进的算法和模型，对图像或视频的画质、色彩、细节等方面进行优化和改善，比如可以修复模糊的图像、增强图像的清晰度和对比度、填补缺失的部分等，从而提升用户所拥有的媒体资源的质量和可用性，为用户带来更好的视觉体验和使用感受。\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : int\n        打开AI修复数值，取值范围为[0,999]，最小为[0],最大为[999]，不可缺失\n    '''\n    pass\n```\n\n\n```tool-8\ndef wechat.receive_message(filter: Optional[Dict[str, Union[str, List[str]]]]) -> List[Dict[str, Union[str, bytes]]]:\n    '''\n    接收消息\n\n    Parameters\n    ----------\n    filter : Optional[Dict[str, Union[str, List[str]]]], optional\n        过滤条件，如消息类型、发送者ID等\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, bytes]]]\n        接收到的消息列表，每条消息包含详细信息\n    '''\n    pass\n```\n\n\n```tool-9\ndef photos.enable_group_photo_optimization() -> int:\n    '''\n    打开合影优化 <打开合影优化>属于<动效播放>类设置项，<打开合影优化>是<打开合影优化>设置项的一个具体操作指令，主要用于合影优化设置项可以对包含多人的合影照片进行优化处理。在系统功能中的定义是通过特定的算法和技术，对合影中的人物面部特征、光线、色彩等进行智能分析和调整，使得合影中的人物形象更加清晰、自然、美观，提升合影照片的整体质量。它能帮助用户轻松获得效果更好的合影照片，无论是用于留念还是分享都能带来更好的体验。\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : int\n        打开合影优化数值，取值范围为[0,999]，最小为[0],最大为[999]，不可缺失\n    '''\n    pass\n```\n\n\n```tool-10\ndef wechat.manage_contacts(action: str, contact_id: Optional[str], contact_info: Optional[Dict[str, Union[str, int]]]) -> Union[List[Dict[str, Union[str, int]]], bool]:\n    '''\n    管理好友\n\n    Parameters\n    ----------\n    action : str\n        操作类型，例如'add', 'delete', 'block', 'view'\n    contact_id : Optional[str], optional\n        好友ID，仅在添加、删除、屏蔽时需要\n    contact_info : Optional[Dict[str, Union[str, int]]], optional\n        好友信息，仅在添加或更新时需要\n\n    Returns\n    ----------\n    : Union[List[Dict[str, Union[str, int]]], bool]\n        好友信息列表，或好友管理操作是否成功\n    '''\n    pass\n```",
        "query": "帮我找到我去年12月在洛杉矶Sawtelle吃可丽饼的照片， 把这些相关的照片添加到我的微信收藏，然后将这些照片发给李四告诉他这个特别好吃",
        "ground_truth": [
            {
                "id": 1,
                "name": "photos.search_photo_local",
                "args": {
                    "search_local_photo_keyword": "可丽饼",
                    "location": "洛杉矶Sawtelle",
                    "time": "2023-12",
                    "search_media_type": "图片",
                    "search_album_type": ""
                }
            },
            {
                "id": 2,
                "name": "photos.move_photo_to_album",
                "args": {
                    "photo_ids": "#E1",
                    "album_id": "微信收藏"
                }
            },
            {
                "id": 3,
                "name": "semantic_search.personal_context_search",
                "args": {
                    "query": "李四的联系方式"
                }
            },
            {
                "id": 4,
                "name": "wechat.send_message",
                "args": {
                    "recipient_id": "#E3",
                    "message_type": "image",
                    "content": {
                        "photos": "#E1",
                        "text": "这个特别好吃"
                    }
                }
            }
        ],
        "plan_str": "SubTask1: 搜索去年12月在洛杉矶Sawtelle吃可丽饼的照片\n#E1 = photos.search_photo_local(search_local_photo_keyword=\"可丽饼\", location=\"洛杉矶Sawtelle\", time=\"2023-12\", search_media_type=\"图片\", search_album_type=\"\") \n\nSubTask2: 将找到的照片添加到微信收藏\n#E2 = photos.move_photo_to_album(photo_ids=#E1, album_id=\"微信收藏\")\n\nSubTask3: 查找李四的联系方式\n#E3 = semantic_search.personal_context_search(query=\"李四的联系方式\")\n\nSubTask4: 将这些照片发送给李四，并告诉他这个特别好吃\n#E4 = wechat.send_message(recipient_id=#E3, message_type=\"image\", content={\"photos\": #E1, \"text\": \"这个特别好吃\"})"
    },
    "query_85": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "notes",
                    "models"
                ],
                "selected_apis_name": [
                    "models.safety_response",
                    "notes.edit_note",
                    "notes.list_notes",
                    "notes.create_note",
                    "models.code_qa",
                    "notes.delete_note",
                    "models.general_response",
                    "models.extract_information_from_text",
                    "models.creative_writing",
                    "notes.search_notes"
                ]
            },
            "environment": {
                "datetime": "2023年07月22日 星期六",
                "location": "山西省朔州市"
            }
        },
        "api_descriptions": "```tool-1\ndef models.safety_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长回应与安全价值观相关的问题，用于直接回答黄赌毒、性别歧视、社会和谐、道德伦理、涉政、宗教、和恶意引导/诱导相关的用户请求。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题存在安全价值观风险，如黄赌毒、涉政、宗教、或恶意引导。\n    references : List[Union[List[str], str]]\n        应答安全价值观相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的安全且友好的回复结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef notes.edit_note(note_id: str, title: str, content: str, tags: List[str]) -> bool:\n    '''\n    编辑已有的备忘录\n\n    Parameters\n    ----------\n    note_id : str\n        备忘录ID\n    title : str, optional\n        新的备忘录标题\n    content : str\n        新的备忘录内容\n    tags : List[str], optional\n        新的备忘录标签\n\n    Returns\n    ----------\n    : bool\n        编辑操作是否成功\n    '''\n    pass\n```\n\n\n```tool-3\ndef notes.list_notes(filter: str, sort_by: str) -> List[str]:\n    '''\n    获取所有备忘录的列表\n\n    Parameters\n    ----------\n    filter : str, optional\n        过滤条件，如标签、日期等\n    sort_by : str, optional\n        排序条件，如时间、标题等\n\n    Returns\n    ----------\n    : List[str]\n        备忘录ID的列表，每个ID可以链接到笔记的详细信息\n    '''\n    pass\n```\n\n\n```tool-4\ndef notes.create_note(title: str, content: str, tags: List[str]) -> str:\n    '''\n    添加一条新的备忘录\n\n    Parameters\n    ----------\n    title : str, optional\n        备忘录标题\n    content : str\n        备忘录内容\n    tags : List[str], optional\n        备忘录标签\n\n    Returns\n    ----------\n    : str\n        创建成功的备忘录ID\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.code_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长代码生成、代码解释、代码调试、代码语言转换、代码优化、代码识别等代码程序相关任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与代码、程序相关。\n    references : List[Union[List[str], str]]\n        应答代码相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef notes.delete_note(note_id: str) -> bool:\n    '''\n    删除指定ID的备忘录\n\n    Parameters\n    ----------\n    note_id : str\n        备忘录ID\n\n    Returns\n    ----------\n    : bool\n        删除操作是否成功\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef notes.search_notes(query: str) -> List[str]:\n    '''\n    根据关键词搜索备忘录\n\n    Parameters\n    ----------\n    query : str\n        搜索关键词\n\n    Returns\n    ----------\n    : List[str]\n        搜索结果，符合条件的备忘录ID列表\n    '''\n    pass\n```",
        "query": "看一下我的备忘录，最近有没有什么事情需要去处理的",
        "ground_truth": [
            {
                "id": 1,
                "name": "notes.list_notes",
                "args": {
                    "filter": "",
                    "sort_by": "时间"
                }
            },
            {
                "id": 2,
                "name": "models.general_response",
                "args": {
                    "instruction": "根据#E1 内容，回复用户有哪些事情需要处理",
                    "references": [
                        "#E1"
                    ]
                }
            }
        ],
        "plan_str": "SubTask1: 列出最近创建的备忘录\n#E1 = notes.list_notes(filter=\"\", sort_by=\"时间\")\nSubTask2: 汇总备忘录内容，并回复用户\n#E2 = models.general_response(instruction=\"根据#E1 内容，回复用户有哪些事情需要处理\", references=#E1)"
    },
    "query_86": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "models",
                    "local_memory",
                    "calendar_app"
                ],
                "selected_apis_name": [
                    "calendar_app.create_event",
                    "models.directly_answer",
                    "models.general_response",
                    "calendar_app.search_events",
                    "models.math_qa",
                    "local_memory.search",
                    "calendar_app.invite_attendees",
                    "calendar_app.view_calendar",
                    "models.date_qa",
                    "calendar_app.set_recurring_event"
                ]
            },
            "environment": {
                "datetime": "2018年11月03日 星期六",
                "location": "海南省万宁市"
            }
        },
        "api_descriptions": "```tool-1\ndef calendar_app.create_event(title: str, start_time: str, end_time: str, location: str, description: str, attendees: List[str]) -> str:\n    '''\n    创建新的事件\n\n    Parameters\n    ----------\n    title : str\n        事件标题\n    start_time : str\n        事件开始时间（ISO格式）\n    end_time : str\n        事件结束时间（ISO格式）\n    location : str, optional\n        事件地点\n    description : str, optional\n        事件描述\n    attendees : List[str], optional\n        事件参与者邮箱列表\n\n    Returns\n    ----------\n    : str\n        创建成功的事件ID\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.directly_answer(answer: str) -> str:\n    '''\n    你可以通过这个工具直接回答问题。例如以下情况，你可以直接回答：\n1. 用户的问题属于简单闲聊类，如问候语、询问人设信息等；\n2. 用户问题的答案可以直接从屏幕图片中获取，如图片中的文字、颜色、数量等显式信息。\n\n    Parameters\n    ----------\n    answer : str\n        answer\n\n    Returns\n    ----------\n    : str\n        问题答案\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef calendar_app.search_events(query: str) -> List[Dict[str, Union[str, List[str]]]]:\n    '''\n    搜索事件和日程安排\n\n    Parameters\n    ----------\n    query : str\n        搜索关键词\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, List[str]]]]\n        搜索结果，符合条件的事件列表\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef local_memory.search(query: str, filters: dict) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n    filters : dict, optional\n        查询记忆的过滤条件\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-7\ndef calendar_app.invite_attendees(event_id: str, attendees: List[str]) -> bool:\n    '''\n    邀请他人参加事件\n\n    Parameters\n    ----------\n    event_id : str\n        事件ID\n    attendees : List[str]\n        参与者邮箱列表\n\n    Returns\n    ----------\n    : bool\n        邀请操作是否成功\n    '''\n    pass\n```\n\n\n```tool-8\ndef calendar_app.view_calendar(view_type: str, date: str) -> List[Dict[str, Union[str, List[str]]]]:\n    '''\n    查看日历视图\n\n    Parameters\n    ----------\n    view_type : str\n        视图类型，例如'day', 'week', 'month'\n    date : str\n        需要查看的日期（ISO格式）\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, List[str]]]]\n        对应视图的事件列表\n    '''\n    pass\n```\n\n\n```tool-9\ndef models.date_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长解答节假日、节气、是否上班、调休信息相关问题；也支持时间推理计算，如日期天数之差、离国庆节还有多久等。\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题，与节假日、节气、调休信息、日期推算相关\n    references : List[Union[List[str], str]]\n        提供的参考信息，能帮助解答问题，如当前日期、星期数等信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef calendar_app.set_recurring_event(event_id: str, recurrence_rule: str) -> bool:\n    '''\n    设置重复事件\n\n    Parameters\n    ----------\n    event_id : str\n        事件ID\n    recurrence_rule : str\n        重复规则，例如'每周一重复'\n\n    Returns\n    ----------\n    : bool\n        设置重复事件操作是否成功\n    '''\n    pass\n```",
        "query": "查询今年的中秋节有没有什么安排，如果没有的话，创建一个和家人团聚吃饭的日程，并将这个日程分享给爸爸。",
        "ground_truth": [
            {
                "id": 1,
                "name": "models.date_qa",
                "args": {
                    "instruction": "今年中秋节是什么时候",
                    "references": []
                }
            },
            {
                "id": 2,
                "name": "calendar_app.search_events",
                "args": {
                    "query": "中秋节"
                }
            },
            {
                "id": 3,
                "name": "models.general_response",
                "args": {
                    "instruction": "判断#E2中是否包含#E1的日程安排",
                    "references": [
                        "#E1",
                        "#E2"
                    ]
                }
            },
            {
                "id": 4,
                "name": "calendar_app.create_event",
                "args": {
                    "title": "中秋节家庭聚餐",
                    "start_time": "#E1+\"T19:00+08:00\"",
                    "end_time": "#E1+\"T21:00+08:00\"",
                    "location": "",
                    "description": "与家人一起庆祝中秋节，共进晚餐。",
                    "attendees": []
                }
            },
            {
                "id": 5,
                "name": "local_memory.search",
                "args": {
                    "query": "爸爸的联系方式"
                }
            },
            {
                "id": 6,
                "name": "calendar_app.invite_attendees",
                "args": {
                    "event_id": "#E4",
                    "attendees": "#E5"
                }
            },
            {
                "id": 7,
                "name": "models.general_response",
                "args": {
                    "instruction": "如果#E3中包含#E1，则回复'中秋节当天已有安排'；否则回复'已创建中秋节家庭聚餐日程，并分享给爸爸'",
                    "references": [
                        "#E1",
                        "#E3"
                    ]
                }
            }
        ],
        "plan_str": "SubTask1: 获取今年中秋节的日期\n#E1 = models.date_qa(instruction=\"今年中秋节是什么时候\", references=[])\nSubTask2: 查询今年中秋节的日程安排\n#E2 = calendar_app.search_events(query=\"中秋节\")\nSubTask3: 判断中秋节是否有日程安排\n#E3 = models.general_response(instruction=\"判断#E2中是否包含#E1的日程安排\",references=[#E1, #E2])\nSubTask4: 如果中秋节当天没有日程，则创建和家人吃饭的日程\n#E4 = calendar_app.create_event(title=\"中秋节家庭聚餐\", start_time=#E1+\"T19:00+08:00\", end_time=#E1+\"T21:00+08:00\", location=\"\", description=\"与家人一起庆祝中秋节，共进晚餐。\", attendees=[])\nSubTask5: 获取爸爸的联系方式\n#E5 = local_memory.search(query=\"爸爸的联系方式\")\nSubTask6: 将日程分享给爸爸\n#E6 = calendar_app.invite_attendees(event_id=#E4, attendees=#E5)\nSubTask7: 通知用户创建成功\n#E7 = models.general_response(instruction=\"如果#E3中包含#E1，则回复'中秋节当天已有安排'；否则回复'已创建中秋节家庭聚餐日程，并分享给爸爸'\", references=[#E1, #E3]) \n"
    },
    "query_87": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "semantic_search",
                    "models"
                ],
                "selected_apis_name": [
                    "semantic_search.personal_context_search",
                    "models.general_response",
                    "models.personal_qa",
                    "models.math_qa",
                    "models.date_qa",
                    "models.scan_image_then_extract_information",
                    "models.multimodal_qa",
                    "models.code_qa",
                    "models.safety_response",
                    "models.directly_answer"
                ]
            },
            "environment": {
                "datetime": "2020年08月19日 星期三",
                "location": "甘肃省平凉市"
            }
        },
        "api_descriptions": "```tool-1\ndef semantic_search.personal_context_search(query: str) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.personal_qa(instruction: str, user_features: str, references: Dict[str, str]) -> str:\n    '''\n    擅长回复可以结合用户个性化信息回答的问题\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题\n    user_features : str\n        提供的用户个性化信息\n    references : Dict[str, str], optional\n        参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.date_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长解答节假日、节气、是否上班、调休信息相关问题；也支持时间推理计算，如日期天数之差、离国庆节还有多久等。\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题，与节假日、节气、调休信息、日期推算相关\n    references : List[Union[List[str], str]]\n        提供的参考信息，能帮助解答问题，如当前日期、星期数等信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef models.scan_image_then_extract_information(instruction: str, image_url: str) -> str:\n    '''\n    擅长从给定(手机屏幕)图片中抽取需要的信息，例如从手机/PC等设备屏幕上抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将从该图片中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.code_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长代码生成、代码解释、代码调试、代码语言转换、代码优化、代码识别等代码程序相关任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与代码、程序相关。\n    references : List[Union[List[str], str]]\n        应答代码相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef models.safety_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长回应与安全价值观相关的问题，用于直接回答黄赌毒、性别歧视、社会和谐、道德伦理、涉政、宗教、和恶意引导/诱导相关的用户请求。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题存在安全价值观风险，如黄赌毒、涉政、宗教、或恶意引导。\n    references : List[Union[List[str], str]]\n        应答安全价值观相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的安全且友好的回复结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef models.directly_answer(answer: str) -> str:\n    '''\n    你可以通过这个工具直接回答问题。例如以下情况，你可以直接回答：\n1. 用户的问题属于简单闲聊类，如问候语、询问人设信息等；\n2. 用户问题的答案可以直接从屏幕图片中获取，如图片中的文字、颜色、数量等显式信息。\n\n    Parameters\n    ----------\n    answer : str\n        answer\n\n    Returns\n    ----------\n    : str\n        问题答案\n    '''\n    pass\n```",
        "query": "看下我这个月的花销, 总结一下我在哪些方面花钱最多",
        "ground_truth": [
            {
                "id": 1,
                "name": "semantic_search.personal_context_search",
                "args": {
                    "query": "本月花销记录"
                }
            },
            {
                "id": 2,
                "name": "models.math_qa",
                "args": {
                    "instruction": "统计用户本月在不同方面的花销情况，并总结花钱最多的方面",
                    "references": [
                        "#E1"
                    ]
                }
            }
        ],
        "plan_str": "SubTask1: 搜索用户本月的花销记录\n#E1 = semantic_search.personal_context_search(query=\"本月花销记录\")\n\nSubTask2: 统计用户本月在不同方面的花销情况，并总结花钱最多的方面\n#E2 = models.math_qa(instruction=\"统计用户本月在不同方面的花销情况，并总结花钱最多的方面\", references=[#E1])"
    },
    "query_88": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "wps_office",
                    "browser",
                    "models"
                ],
                "selected_apis_name": [
                    "models.math_qa",
                    "browser.clear_cache",
                    "wps_office.create_document",
                    "models.extract_information_from_text",
                    "browser.search_web",
                    "wps_office.list_documents",
                    "wps_office.edit_document",
                    "models.scan_image_then_extract_information",
                    "wps_office.search_notes",
                    "models.general_response"
                ]
            },
            "environment": {
                "datetime": "2024年08月23日 星期五",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef browser.clear_cache() -> bool:\n    '''\n    清理缓存\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : bool\n        清理缓存操作是否成功\n    '''\n    pass\n```\n\n\n```tool-3\ndef wps_office.create_document(doc_type: str, content: str) -> str:\n    '''\n    创建新的文档\n\n    Parameters\n    ----------\n    doc_type : str\n        文档类型，枚举值：Word、Excel、PPT\n    content : str\n        文档内容\n\n    Returns\n    ----------\n    : str\n        创建成功的文档ID\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef browser.search_web(query: str) -> List[str]:\n    '''\n    进行网页搜索\n\n    Parameters\n    ----------\n    query : str\n        搜索关键词\n\n    Returns\n    ----------\n    : List[str]\n        搜索结果的网址列表\n    '''\n    pass\n```\n\n\n```tool-6\ndef wps_office.list_documents(filter: str, sort_by: str) -> List[str]:\n    '''\n    获取所有文档的列表\n\n    Parameters\n    ----------\n    filter : str, optional\n        过滤条件，如类型、日期等\n    sort_by : str, optional\n        排序条件，如时间、标题等\n\n    Returns\n    ----------\n    : List[str]\n        文档ID的列表，每个ID可以链接到文档的详细信息\n    '''\n    pass\n```\n\n\n```tool-7\ndef wps_office.edit_document(doc_id: str, content: str) -> bool:\n    '''\n    编辑已有的文档\n\n    Parameters\n    ----------\n    doc_id : str\n        文档ID\n    content : str\n        新的文档内容\n\n    Returns\n    ----------\n    : bool\n        编辑操作是否成功\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.scan_image_then_extract_information(instruction: str, image_url: str) -> str:\n    '''\n    擅长从给定(手机屏幕)图片中抽取需要的信息，例如从手机/PC等设备屏幕上抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将从该图片中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef wps_office.search_notes(query: str) -> List[str]:\n    '''\n    根据关键词搜索文档\n\n    Parameters\n    ----------\n    query : str\n        搜索关键词\n\n    Returns\n    ----------\n    : List[str]\n        搜索结果，符合条件的文档ID列表\n    '''\n    pass\n```\n\n\n```tool-10\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```",
        "query": "搜索近五届奥运会的奖牌情况，总结我国在各类项目上的发展走势写到wps",
        "ground_truth": [
            {
                "id": 1,
                "name": "browser.search_web",
                "args": {
                    "query": "近五届奥运会 奖牌榜"
                }
            },
            {
                "id": 2,
                "name": "models.extract_information_from_text",
                "args": {
                    "instruction": "整理近五届奥运会奖牌榜，包含国家、金牌数、银牌数、铜牌数",
                    "text": "#E1"
                }
            },
            {
                "id": 3,
                "name": "models.general_response",
                "args": {
                    "instruction": "根据近五届奥运会奖牌情况，总结我国在各类项目上的发展走势",
                    "references": [
                        "#E2"
                    ]
                }
            },
            {
                "id": 4,
                "name": "wps_office.create_document",
                "args": {
                    "doc_type": "word",
                    "content": "#E3"
                }
            }
        ],
        "plan_str": "SubTask1: 搜索近五届奥运会的奖牌情况\n#E1 = browser.search_web(query=\"近五届奥运会 奖牌榜\")\nSubTask2: 从搜索结果中整理近五届奥运会奖牌榜信息\n#E2 = models.extract_information_from_text(instruction=\"整理近五届奥运会奖牌榜，包含国家、金牌数、银牌数、铜牌数\", text=#E1)\nSubTask3: 总结我国在各类项目上的发展走势\n#E3 = models.general_response(instruction=\"根据近五届奥运会奖牌情况，总结我国在各类项目上的发展走势\", references=[#E2])\nSubTask4: 创建文件\n#E4 = wps_office.create_document(doc_type=\"word\", content=#E3)"
    },
    "query_89": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "models",
                    "wechat",
                    "semantic_search",
                    "notes"
                ],
                "selected_apis_name": [
                    "wechat.share_moment",
                    "notes.delete_note",
                    "wechat.manage_contacts",
                    "wechat.receive_message",
                    "notes.create_note",
                    "notes.edit_note",
                    "models.extract_information_from_text",
                    "semantic_search.personal_context_search",
                    "models.code_qa",
                    "models.directly_answer"
                ]
            },
            "environment": {
                "datetime": "2024年08月21日 星期三",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef wechat.share_moment(content: Union[str, bytes]) -> bool:\n    '''\n    分享朋友圈动态\n\n    Parameters\n    ----------\n    content : Union[str, bytes]\n        分享的内容，可以是文字、图片或视频\n\n    Returns\n    ----------\n    : bool\n        分享操作是否成功\n    '''\n    pass\n```\n\n\n```tool-2\ndef notes.delete_note(note_id: str) -> bool:\n    '''\n    删除指定ID的备忘录\n\n    Parameters\n    ----------\n    note_id : str\n        备忘录ID\n\n    Returns\n    ----------\n    : bool\n        删除操作是否成功\n    '''\n    pass\n```\n\n\n```tool-3\ndef wechat.manage_contacts(action: str, contact_id: Optional[str], contact_info: Optional[Dict[str, Union[str, int]]]) -> Union[List[Dict[str, Union[str, int]]], bool]:\n    '''\n    管理好友\n\n    Parameters\n    ----------\n    action : str\n        操作类型，例如'add', 'delete', 'block', 'view'\n    contact_id : Optional[str], optional\n        好友ID，仅在添加、删除、屏蔽时需要\n    contact_info : Optional[Dict[str, Union[str, int]]], optional\n        好友信息，仅在添加或更新时需要\n\n    Returns\n    ----------\n    : Union[List[Dict[str, Union[str, int]]], bool]\n        好友信息列表，或好友管理操作是否成功\n    '''\n    pass\n```\n\n\n```tool-4\ndef wechat.receive_message(filter: Optional[Dict[str, Union[str, List[str]]]]) -> List[Dict[str, Union[str, bytes]]]:\n    '''\n    接收消息\n\n    Parameters\n    ----------\n    filter : Optional[Dict[str, Union[str, List[str]]]], optional\n        过滤条件，如消息类型、发送者ID等\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, bytes]]]\n        接收到的消息列表，每条消息包含详细信息\n    '''\n    pass\n```\n\n\n```tool-5\ndef notes.create_note(title: str, content: str, tags: List[str]) -> str:\n    '''\n    添加一条新的备忘录\n\n    Parameters\n    ----------\n    title : str, optional\n        备忘录标题\n    content : str\n        备忘录内容\n    tags : List[str], optional\n        备忘录标签\n\n    Returns\n    ----------\n    : str\n        创建成功的备忘录ID\n    '''\n    pass\n```\n\n\n```tool-6\ndef notes.edit_note(note_id: str, title: str, content: str, tags: List[str]) -> bool:\n    '''\n    编辑已有的备忘录\n\n    Parameters\n    ----------\n    note_id : str\n        备忘录ID\n    title : str, optional\n        新的备忘录标题\n    content : str\n        新的备忘录内容\n    tags : List[str], optional\n        新的备忘录标签\n\n    Returns\n    ----------\n    : bool\n        编辑操作是否成功\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef semantic_search.personal_context_search(query: str) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef models.code_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长代码生成、代码解释、代码调试、代码语言转换、代码优化、代码识别等代码程序相关任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与代码、程序相关。\n    references : List[Union[List[str], str]]\n        应答代码相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef models.directly_answer(answer: str) -> str:\n    '''\n    你可以通过这个工具直接回答问题。例如以下情况，你可以直接回答：\n1. 用户的问题属于简单闲聊类，如问候语、询问人设信息等；\n2. 用户问题的答案可以直接从屏幕图片中获取，如图片中的文字、颜色、数量等显式信息。\n\n    Parameters\n    ----------\n    answer : str\n        answer\n\n    Returns\n    ----------\n    : str\n        问题答案\n    '''\n    pass\n```",
        "query": "总结工作群里提到的开发计划和技术细节，并记录到便签中",
        "ground_truth": [
            {
                "id": 1,
                "name": "semantic_search.personal_context_search",
                "args": {
                    "query": "工作群聊的ID"
                }
            },
            {
                "id": 2,
                "name": "wechat.receive_message",
                "args": {
                    "filter": {
                        "sender_id": "#E1"
                    }
                }
            },
            {
                "id": 3,
                "name": "models.extract_information_from_text",
                "args": {
                    "instruction": "总结工作群里提到的开发计划和技术细节",
                    "text": "#E2"
                }
            },
            {
                "id": 4,
                "name": "notes.create_note",
                "args": {
                    "title": "开发计划和技术细节",
                    "content": "#E3",
                    "tags": [
                        "开发",
                        "工作"
                    ]
                }
            }
        ],
        "plan_str": "SubTask1: 获取工作群聊的ID\n#E1 = semantic_search.personal_context_search(query=\"工作群聊的ID\")\nSubTask2: 获取工作群聊的历史消息记录\n#E2 = wechat.receive_message(filter={'sender_id': #E1})\nSubTask3: 从历史消息中提取开发计划和技术细节\n#E3 = models.extract_information_from_text(instruction=\"总结工作群里提到的开发计划和技术细节\", text=#E2)\nSubTask4: 创建新的笔记\n#E4 = notes.create_note(title=\"开发计划和技术细节\", content=#E3, tags=[\"开发\", \"工作\"]) \n"
    },
    "query_90": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "models",
                    "ctrip"
                ],
                "selected_apis_name": [
                    "models.creative_writing",
                    "models.extract_information_from_text",
                    "models.personal_qa",
                    "models.safety_response",
                    "models.search_then_response",
                    "ctrip.search_flight_ticket",
                    "models.scan_image_then_extract_information",
                    "models.date_qa",
                    "models.math_qa",
                    "models.multimodal_qa"
                ]
            },
            "environment": {
                "datetime": "2024年08月21日 星期三",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.personal_qa(instruction: str, user_features: str, references: Dict[str, str]) -> str:\n    '''\n    擅长回复可以结合用户个性化信息回答的问题\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题\n    user_features : str\n        提供的用户个性化信息\n    references : Dict[str, str], optional\n        参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.safety_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长回应与安全价值观相关的问题，用于直接回答黄赌毒、性别歧视、社会和谐、道德伦理、涉政、宗教、和恶意引导/诱导相关的用户请求。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题存在安全价值观风险，如黄赌毒、涉政、宗教、或恶意引导。\n    references : List[Union[List[str], str]]\n        应答安全价值观相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的安全且友好的回复结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.search_then_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个具备搜索引擎能力的问答模型，具备以下能力：\n1. 搜索实时信息并总结。如果用户问题涉及时效性信息，问答模型第一步通过搜索引擎检索信息，第二步对检索的多个信息进行汇总，生成回复；\n2. 问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的instruction和给定的参考references，生成正确、有用、安全的回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令/问题，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        返回的回复\n    '''\n    pass\n```\n\n\n```tool-6\ndef ctrip.search_flight_ticket(arr_city: str, dep_city: str, arr_airport: str, dep_airport: str, flight_date: str, page: int) -> List[str]:\n    '''\n    帮助用户获取机票信息，用户需要输入出发地、目的地\n\n    Parameters\n    ----------\n    arr_city : str\n        目的地城市，如'北京'、'上海'、'南京'\n    dep_city : str\n        出发城市，如'北京'、'上海'、'南京'\n    arr_airport : str, optional\n        到达的机场\n    dep_airport : str, optional\n        出发的机场\n    flight_date : str\n        出发时间，如'2024-03-29'\n    page : int, optional\n        页数，默认值为1，当用户请求更多时输入2，3依次增加\n\n    Returns\n    ----------\n    : List[str]\n        返回的航班信息\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.scan_image_then_extract_information(instruction: str, image_url: str) -> str:\n    '''\n    擅长从给定(手机屏幕)图片中抽取需要的信息，例如从手机/PC等设备屏幕上抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将从该图片中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.date_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长解答节假日、节气、是否上班、调休信息相关问题；也支持时间推理计算，如日期天数之差、离国庆节还有多久等。\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题，与节假日、节气、调休信息、日期推算相关\n    references : List[Union[List[str], str]]\n        提供的参考信息，能帮助解答问题，如当前日期、星期数等信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```",
        "query": "帮我搜一下明天上午10点左右去上海的飞机",
        "ground_truth": [
            {
                "id": 1,
                "name": "ctrip.search_flight_ticket",
                "args": {
                    "arr_city": "上海",
                    "dep_city": "深圳",
                    "arr_airport": "",
                    "dep_airport": "",
                    "flight_date": "2024-08-22",
                    "page": "1"
                }
            },
            {
                "id": 2,
                "name": "models.extract_information_from_text",
                "args": {
                    "instruction": "筛选明天上午10点左右去上海的航班信息",
                    "text": "#E1"
                }
            }
        ],
        "plan_str": "SubTask1: 搜索明天去上海的飞机\n#E1 = ctrip.search_flight_ticket(arr_city=\"上海\", dep_city=\"深圳\", arr_airport=\"\", dep_airport=\"\", flight_date=\"2024-08-22\", page=1)\n\nSubTask2: 获取明天上午10点左右去上海的飞机\n#E2 = models.extract_information_from_text(instruction=\"筛选明天上午10点左右去上海的航班信息\", text=#E1)"
    },
    "query_91": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "amap"
                ],
                "selected_apis_name": [
                    "amap.get_nearby_parking",
                    "amap.share_location",
                    "amap.route_planning",
                    "amap.search_poi",
                    "amap.get_traffic_info",
                    "amap.get_current_location",
                    "amap.get_nearby_gas_stations"
                ]
            },
            "environment": {
                "datetime": "2019年07月31日 星期三",
                "location": "福建省莆田市"
            }
        },
        "api_descriptions": "```tool-1\ndef amap.get_nearby_parking(location: str) -> List[Dict]:\n    '''\n    获取附近的停车场信息\n\n    Parameters\n    ----------\n    location : str\n        当前位置坐标，经纬度用逗号分隔\n\n    Returns\n    ----------\n    : List[Dict]\n        返回附近的停车场列表，每个停车场包含名称、地址、距离等信息\n    '''\n    pass\n```\n\n\n```tool-2\ndef amap.share_location(location: str, platform: str) -> bool:\n    '''\n    分享位置\n\n    Parameters\n    ----------\n    location : str\n        当前位置坐标，经纬度用逗号分隔\n    platform : str\n        分享平台，如微信、微博等\n\n    Returns\n    ----------\n    : bool\n        分享操作是否成功\n    '''\n    pass\n```\n\n\n```tool-3\ndef amap.route_planning(origin: str, destination: str, strategy: str) -> Dict:\n    '''\n    路线规划\n\n    Parameters\n    ----------\n    origin : str\n        起点坐标，经纬度用逗号分隔\n    destination : str\n        终点坐标，经纬度用逗号分隔\n    strategy : str, optional\n        路线规划策略，如最短时间，避开拥堵等\n\n    Returns\n    ----------\n    : Dict\n        返回路线规划信息，如路程时间、距离、途径点等\n    '''\n    pass\n```\n\n\n```tool-4\ndef amap.search_poi(keywords: str, city: str, types: str) -> List[Dict]:\n    '''\n    搜索地点\n\n    Parameters\n    ----------\n    keywords : str\n        搜索关键词\n    city : str, optional\n        城市名\n    types : str, optional\n        搜索POI类型，如餐馆，酒店等\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的地点列表，每个地点包含名称、地址、坐标等信息\n    '''\n    pass\n```\n\n\n```tool-5\ndef amap.get_traffic_info(city: str) -> Dict:\n    '''\n    获取实时路况\n\n    Parameters\n    ----------\n    city : str\n        城市名\n\n    Returns\n    ----------\n    : Dict\n        返回实时路况信息，如拥堵程度、事故等\n    '''\n    pass\n```\n\n\n```tool-6\ndef amap.get_current_location() -> Dict[str, float]:\n    '''\n    获取当前位置\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : Dict[str, float]\n        返回当前的经纬度坐标\n    '''\n    pass\n```\n\n\n```tool-7\ndef amap.get_nearby_gas_stations(location: str) -> List[Dict]:\n    '''\n    获取附近加油站信息\n\n    Parameters\n    ----------\n    location : str\n        当前位置坐标，经纬度用逗号分隔\n\n    Returns\n    ----------\n    : List[Dict]\n        返回附近的加油站列表，每个加油站包含名称、地址、距离等信息\n    '''\n    pass\n```",
        "query": "帮我导航到十三陵水库, 并途经一个中石化的加油站",
        "ground_truth": [
            {
                "id": 1,
                "name": "amap.get_current_location",
                "args": {}
            },
            {
                "id": 2,
                "name": "amap.search_poi",
                "args": {
                    "keywords": "中石化",
                    "city": "",
                    "types": "加油站"
                }
            },
            {
                "id": 3,
                "name": "amap.route_planning",
                "args": {
                    "origin": "#E1['longitude']} #E1['latitude']",
                    "destination": "十三陵水库",
                    "strategy": "途经点:#E2[0]['location']"
                }
            }
        ],
        "plan_str": "SubTask1: 获取当前位置的经纬度坐标\n#E1 = amap.get_current_location()\n\nSubTask2: 搜索附近的中石化加油站\n#E2 = amap.search_poi(keywords=\"中石化\", city=\"\", types=\"加油站\")\n\nSubTask3: 规划从当前位置到十三陵水库，并途经一个中石化加油站的路线\n#E3 = amap.route_planning(origin=\"#E1['longitude']} #E1['latitude']\", destination=\"十三陵水库\", strategy=\"途经点:#E2[0]['location']\")"
    },
    "query_92": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "weather",
                    "models"
                ],
                "selected_apis_name": [
                    "weather.get_multiple_location_weather",
                    "weather.get_current_weather",
                    "models.scan_image_then_extract_information",
                    "weather.get_weather_maps",
                    "models.creative_writing",
                    "weather.get_air_quality_index",
                    "models.code_qa",
                    "models.personal_qa",
                    "models.safety_response",
                    "weather.get_weather_forecast"
                ]
            },
            "environment": {
                "datetime": "2024年02月04日 星期日",
                "location": "北京"
            }
        },
        "api_descriptions": "```tool-1\ndef weather.get_multiple_location_weather(locations: List[str]) -> Dict[str, Dict[str, Union[str, int, float]]]:\n    '''\n    支持多区域天气查询\n\n    Parameters\n    ----------\n    locations : List[str]\n        查询天气的多个地点\n\n    Returns\n    ----------\n    : Dict[str, Dict[str, Union[str, int, float]]]\n        每个地点的当前天气信息\n    '''\n    pass\n```\n\n\n```tool-2\ndef weather.get_current_weather(location: str) -> Dict[str, Union[str, int, float]]:\n    '''\n    查询当前天气信息\n\n    Parameters\n    ----------\n    location : str\n        查询天气的地点\n\n    Returns\n    ----------\n    : Dict[str, Union[str, int, float]]\n        当前天气信息，包括温度、湿度、风速等\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.scan_image_then_extract_information(instruction: str, image_url: str) -> str:\n    '''\n    擅长从给定(手机屏幕)图片中抽取需要的信息，例如从手机/PC等设备屏幕上抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将从该图片中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef weather.get_weather_maps(map_type: str) -> str:\n    '''\n    查看天气雷达图和卫星云图\n\n    Parameters\n    ----------\n    map_type : str\n        地图类型，如雷达图（radar）或卫星云图（satellite）\n\n    Returns\n    ----------\n    : str\n        地图图像的URL地址\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef weather.get_air_quality_index(location: str) -> int:\n    '''\n    显示空气质量指数\n\n    Parameters\n    ----------\n    location : str\n        查询空气质量的地点\n\n    Returns\n    ----------\n    : int\n        空气质量指数（AQI）值\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.code_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长代码生成、代码解释、代码调试、代码语言转换、代码优化、代码识别等代码程序相关任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与代码、程序相关。\n    references : List[Union[List[str], str]]\n        应答代码相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.personal_qa(instruction: str, user_features: str, references: Dict[str, str]) -> str:\n    '''\n    擅长回复可以结合用户个性化信息回答的问题\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题\n    user_features : str\n        提供的用户个性化信息\n    references : Dict[str, str], optional\n        参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef models.safety_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长回应与安全价值观相关的问题，用于直接回答黄赌毒、性别歧视、社会和谐、道德伦理、涉政、宗教、和恶意引导/诱导相关的用户请求。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题存在安全价值观风险，如黄赌毒、涉政、宗教、或恶意引导。\n    references : List[Union[List[str], str]]\n        应答安全价值观相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的安全且友好的回复结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef weather.get_weather_forecast(location: str, days: int) -> List[Dict[str, Union[str, int, float]]]:\n    '''\n    获取未来几天的天气预报\n\n    Parameters\n    ----------\n    location : str\n        查询天气预报的地点\n    days : int\n        查询的天数，如3天、7天等\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, int, float]]]\n        未来几天的天气预报信息列表\n    '''\n    pass\n```",
        "query": "写一段100字以内的短文，描写今天的天气",
        "ground_truth": [
            {
                "id": 1,
                "name": "weather.get_current_weather",
                "args": {
                    "location": "北京"
                }
            },
            {
                "id": 2,
                "name": "models.creative_writing",
                "args": {
                    "instruction": "根据天气情况，写一段100字以内的短文，描写今天的天气",
                    "references": [
                        "#E1"
                    ]
                }
            }
        ],
        "plan_str": "SubTask1: 查询今天的天气情况\n#E1 = weather.get_current_weather(location=\"北京\")\nSubTask2: 根据天气情况，生成描述天气的短文\n#E2 = models.creative_writing(instruction=\"根据天气情况，写一段100字以内的短文，描写今天的天气\", references=[#E1])\n"
    },
    "query_93": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "weather",
                    "models",
                    "calendar_app"
                ],
                "selected_apis_name": [
                    "models.scan_image_then_extract_information",
                    "weather.get_weather_forecast",
                    "calendar_app.edit_event",
                    "models.math_qa",
                    "weather.get_date_weather_info",
                    "calendar_app.create_event",
                    "models.date_qa",
                    "models.creative_writing",
                    "models.multimodal_qa",
                    "models.general_response"
                ]
            },
            "environment": {
                "datetime": "2024年09月07日 星期六",
                "location": "内蒙古自治区巴彦淖尔市"
            }
        },
        "api_descriptions": "```tool-1\ndef models.scan_image_then_extract_information(instruction: str, image_url: str) -> str:\n    '''\n    擅长从给定(手机屏幕)图片中抽取需要的信息，例如从手机/PC等设备屏幕上抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将从该图片中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef weather.get_weather_forecast(location: str, days: int) -> List[Dict[str, Union[str, int, float]]]:\n    '''\n    获取未来几天的天气预报\n\n    Parameters\n    ----------\n    location : str\n        查询天气预报的地点\n    days : int\n        查询的天数，如3天、7天等\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, int, float]]]\n        未来几天的天气预报信息列表\n    '''\n    pass\n```\n\n\n```tool-3\ndef calendar_app.edit_event(event_id: str, title: str, start_time: str, end_time: str, location: str, description: str, attendees: List[str]) -> bool:\n    '''\n    编辑已有的事件\n\n    Parameters\n    ----------\n    event_id : str\n        事件ID\n    title : str, optional\n        新的事件标题\n    start_time : str, optional\n        新的事件开始时间（ISO格式）\n    end_time : str, optional\n        新的事件结束时间（ISO格式）\n    location : str, optional\n        新的事件地点\n    description : str, optional\n        新的事件描述\n    attendees : List[str], optional\n        新的事件参与者邮箱列表\n\n    Returns\n    ----------\n    : bool\n        编辑操作是否成功\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef weather.get_date_weather_info(location: str, start_date: str, end_date: str) -> List[Dict[str, Union[str, int, float]]]:\n    '''\n    查询指定日期区间的天气预报\n\n    Parameters\n    ----------\n    location : str\n        查询天气预报的地点\n    start_date : str\n        查询的的开始日期，格式xxxx-xx-xx\n    end_date : str\n        查询的的结束日期，格式xxxx-xx-xx\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, int, float]]]\n        指定日期和地点的天气信息，包括温度、湿度、风速等\n    '''\n    pass\n```\n\n\n```tool-6\ndef calendar_app.create_event(title: str, start_time: str, end_time: str, location: str, description: str, attendees: List[str]) -> str:\n    '''\n    创建新的事件\n\n    Parameters\n    ----------\n    title : str\n        事件标题\n    start_time : str\n        事件开始时间（ISO格式）\n    end_time : str\n        事件结束时间（ISO格式）\n    location : str, optional\n        事件地点\n    description : str, optional\n        事件描述\n    attendees : List[str], optional\n        事件参与者邮箱列表\n\n    Returns\n    ----------\n    : str\n        创建成功的事件ID\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.date_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长解答节假日、节气、是否上班、调休信息相关问题；也支持时间推理计算，如日期天数之差、离国庆节还有多久等。\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题，与节假日、节气、调休信息、日期推算相关\n    references : List[Union[List[str], str]]\n        提供的参考信息，能帮助解答问题，如当前日期、星期数等信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```",
        "query": "帮我在中秋节前10天的早上9:00设定一个日程，提醒我记得买去悉尼的机票。并帮我查一下中秋节悉尼的天气怎么样。",
        "ground_truth": [
            {
                "id": 1,
                "name": "models.date_qa",
                "args": {
                    "instruction": "2024年中秋节是哪天",
                    "references": []
                }
            },
            {
                "id": 2,
                "name": "models.date_qa",
                "args": {
                    "instruction": "计算 #E1 前10天的日期",
                    "references": [
                        "#E1"
                    ]
                }
            },
            {
                "id": 3,
                "name": "calendar_app.create_event",
                "args": {
                    "title": "购买去悉尼的机票",
                    "start_time": "#E2+\"T09:00:00\"",
                    "end_time": "#E2+\"T09:30:00\"",
                    "location": "",
                    "description": "记得买去悉尼的机票",
                    "attendees": []
                }
            },
            {
                "id": 4,
                "name": "weather.get_date_weather_info",
                "args": {
                    "location": "悉尼",
                    "start_date": "#E1",
                    "end_date": "#E1"
                }
            },
            {
                "id": 6,
                "name": "models.general_response",
                "args": {
                    "instruction": "总结 #E1 悉尼的天气情况",
                    "references": [
                        "#E4"
                    ]
                }
            }
        ],
        "plan_str": "SubTask1: 查询中秋节的日期\n#E1 = models.date_qa(instruction=\"2024年中秋节是哪天\", references=[])\nSubTask2: 计算中秋节前10天的日期\n#E2 = models.date_qa(instruction=\"计算 #E1 前10天的日期\", references=[#E1])\nSubTask3: 在中秋节前10天的早上9:00设定一个日程，提醒我记得买去悉尼的机票\n#E3 = calendar_app.create_event(title=\"购买去悉尼的机票\", start_time=#E2+\"T09:00:00\", end_time=#E2+\"T09:30:00\", location=\"\", description=\"记得买去悉尼的机票\", attendees=[])\nSubTask4: 查询中秋节当天的悉尼天气\n#E4 = weather.get_date_weather_info(location=\"悉尼\", start_date=#E1, end_date=#E1)\nSubTask6: 汇总中秋节悉尼的天气信息\n#E6 = models.general_response(instruction=\"总结 #E1 悉尼的天气情况\", references=[#E4])"
    },
    "query_94": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "models"
                ],
                "selected_apis_name": [
                    "models.directly_answer",
                    "models.general_response",
                    "models.date_qa",
                    "models.personal_qa",
                    "models.search_then_response",
                    "models.multimodal_qa",
                    "models.safety_response",
                    "models.image_search",
                    "models.creative_writing",
                    "models.math_qa"
                ]
            },
            "environment": {
                "datetime": "2024年07月29日 星期一",
                "location": "安徽省亳州市"
            }
        },
        "api_descriptions": "```tool-1\ndef models.directly_answer(answer: str) -> str:\n    '''\n    你可以通过这个工具直接回答问题。例如以下情况，你可以直接回答：\n1. 用户的问题属于简单闲聊类，如问候语、询问人设信息等；\n2. 用户问题的答案可以直接从屏幕图片中获取，如图片中的文字、颜色、数量等显式信息。\n\n    Parameters\n    ----------\n    answer : str\n        answer\n\n    Returns\n    ----------\n    : str\n        问题答案\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.date_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长解答节假日、节气、是否上班、调休信息相关问题；也支持时间推理计算，如日期天数之差、离国庆节还有多久等。\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题，与节假日、节气、调休信息、日期推算相关\n    references : List[Union[List[str], str]]\n        提供的参考信息，能帮助解答问题，如当前日期、星期数等信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.personal_qa(instruction: str, user_features: str, references: Dict[str, str]) -> str:\n    '''\n    擅长回复可以结合用户个性化信息回答的问题\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题\n    user_features : str\n        提供的用户个性化信息\n    references : Dict[str, str], optional\n        参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.search_then_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个具备搜索引擎能力的问答模型，具备以下能力：\n1. 搜索实时信息并总结。如果用户问题涉及时效性信息，问答模型第一步通过搜索引擎检索信息，第二步对检索的多个信息进行汇总，生成回复；\n2. 问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的instruction和给定的参考references，生成正确、有用、安全的回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令/问题，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        返回的回复\n    '''\n    pass\n```\n\n\n```tool-6\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.safety_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长回应与安全价值观相关的问题，用于直接回答黄赌毒、性别歧视、社会和谐、道德伦理、涉政、宗教、和恶意引导/诱导相关的用户请求。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题存在安全价值观风险，如黄赌毒、涉政、宗教、或恶意引导。\n    references : List[Union[List[str], str]]\n        应答安全价值观相关问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的安全且友好的回复结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.image_search(image_url: str) -> str:\n    '''\n    一个基于给定的图片搜索图中事物相关信息的模型，该模型的能力包括：\n1. 搜索著名人物的身份、经历，包括明星、政客、历史人物、体育明星等；\n2. 识别图像中动物/植物的品种；\n3. 识别照片中地点或景点的名称和地址。\n\n    Parameters\n    ----------\n    image_url : str\n        给定图片地址，将搜索该图片中的人、动植物或地点的相关信息\n\n    Returns\n    ----------\n    : str\n        图片中事物的相关信息\n    '''\n    pass\n```\n\n\n```tool-9\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```",
        "query": "1加2加3一直加到100等于多少",
        "ground_truth": [
            {
                "id": 1,
                "name": "models.math_qa",
                "args": {
                    "instruction": "计算1+2+3+...+100的和",
                    "references": []
                }
            }
        ],
        "plan_str": "SubTask1: 计算1+2+3+...+100的和\n#E1 = models.math_qa(instruction=\"计算1+2+3+...+100的和\", references=[])\n"
    },
    "query_95": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "models",
                    "singtogether"
                ],
                "selected_apis_name": [
                    "models.general_response",
                    "models.personal_qa",
                    "singtogether.start_ai_practice",
                    "models.creative_writing",
                    "models.math_qa",
                    "models.search_then_response",
                    "singtogether.create_song",
                    "models.directly_answer",
                    "models.image_search",
                    "singtogether.start_singing_competition"
                ]
            },
            "environment": {
                "datetime": "2020年09月01日 星期二",
                "location": "西藏自治区昌都市"
            }
        },
        "api_descriptions": "```tool-1\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.personal_qa(instruction: str, user_features: str, references: Dict[str, str]) -> str:\n    '''\n    擅长回复可以结合用户个性化信息回答的问题\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题\n    user_features : str\n        提供的用户个性化信息\n    references : Dict[str, str], optional\n        参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef singtogether.start_ai_practice(song_id: str) -> Dict[str, Union[str, int, float]]:\n    '''\n    用于开始AI练唱\n\n    Parameters\n    ----------\n    song_id : str\n        要练唱的歌曲ID\n\n    Returns\n    ----------\n    : Dict[str, Union[str, int, float]]\n        AI练唱的相关信息，包括练唱进度、评分等\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef models.search_then_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个具备搜索引擎能力的问答模型，具备以下能力：\n1. 搜索实时信息并总结。如果用户问题涉及时效性信息，问答模型第一步通过搜索引擎检索信息，第二步对检索的多个信息进行汇总，生成回复；\n2. 问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的instruction和给定的参考references，生成正确、有用、安全的回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令/问题，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        返回的回复\n    '''\n    pass\n```\n\n\n```tool-7\ndef singtogether.create_song(title: str, lyrics: str, background_music: str) -> str:\n    '''\n    用于创作一首新歌\n\n    Parameters\n    ----------\n    title : str\n        歌曲标题\n    lyrics : str\n        歌曲歌词\n    background_music : str\n        背景音乐文件路径\n\n    Returns\n    ----------\n    : str\n        新创作歌曲的唯一标识符（ID）\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.directly_answer(answer: str) -> str:\n    '''\n    你可以通过这个工具直接回答问题。例如以下情况，你可以直接回答：\n1. 用户的问题属于简单闲聊类，如问候语、询问人设信息等；\n2. 用户问题的答案可以直接从屏幕图片中获取，如图片中的文字、颜色、数量等显式信息。\n\n    Parameters\n    ----------\n    answer : str\n        answer\n\n    Returns\n    ----------\n    : str\n        问题答案\n    '''\n    pass\n```\n\n\n```tool-9\ndef models.image_search(image_url: str) -> str:\n    '''\n    一个基于给定的图片搜索图中事物相关信息的模型，该模型的能力包括：\n1. 搜索著名人物的身份、经历，包括明星、政客、历史人物、体育明星等；\n2. 识别图像中动物/植物的品种；\n3. 识别照片中地点或景点的名称和地址。\n\n    Parameters\n    ----------\n    image_url : str\n        给定图片地址，将搜索该图片中的人、动植物或地点的相关信息\n\n    Returns\n    ----------\n    : str\n        图片中事物的相关信息\n    '''\n    pass\n```\n\n\n```tool-10\ndef singtogether.start_singing_competition(room_id: str) -> bool:\n    '''\n    用于开始一个抢麦比赛\n\n    Parameters\n    ----------\n    room_id : str\n        歌房ID\n\n    Returns\n    ----------\n    : bool\n        表示抢麦比赛是否成功开始的布尔值\n    '''\n    pass\n```",
        "query": "对周杰伦的《青花瓷》进行重新填词，并在全面K歌中进行发布。",
        "ground_truth": [
            {
                "id": 1,
                "name": "models.creative_writing",
                "args": {
                    "instruction": "对周杰伦的《青花瓷》进行重新填词",
                    "references": [
                        "周杰伦《青花瓷》歌词"
                    ]
                }
            },
            {
                "id": 2,
                "name": "singtogether.create_song",
                "args": {
                    "title": "青花瓷（重新填词版）",
                    "lyrics": "#E1",
                    "background_music": "path_to_background_music"
                }
            }
        ],
        "plan_str": "SubTask1: 对周杰伦的《青花瓷》进行重新填词\n#E1 = models.creative_writing(instruction=\"对周杰伦的《青花瓷》进行重新填词\", references=[\"周杰伦《青花瓷》歌词\"])\n\nSubTask2: 在全面K歌中发布重新填词的《青花瓷》\n#E2 = singtogether.create_song(title=\"青花瓷（重新填词版）\", lyrics=#E1, background_music=\"path_to_background_music\")"
    },
    "query_96": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "pupu",
                    "models"
                ],
                "selected_apis_name": [
                    "models.search_then_response",
                    "models.math_qa",
                    "models.date_qa",
                    "pupu.view_cart",
                    "pupu.add_to_cart",
                    "pupu.place_order",
                    "models.personal_qa",
                    "models.extract_information_from_text",
                    "pupu.check_order_status",
                    "pupu.search_product"
                ]
            },
            "environment": {
                "datetime": "2023年01月26日 星期四",
                "location": "四川省德阳市"
            }
        },
        "api_descriptions": "```tool-1\ndef models.search_then_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个具备搜索引擎能力的问答模型，具备以下能力：\n1. 搜索实时信息并总结。如果用户问题涉及时效性信息，问答模型第一步通过搜索引擎检索信息，第二步对检索的多个信息进行汇总，生成回复；\n2. 问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的instruction和给定的参考references，生成正确、有用、安全的回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令/问题，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        返回的回复\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef models.date_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长解答节假日、节气、是否上班、调休信息相关问题；也支持时间推理计算，如日期天数之差、离国庆节还有多久等。\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题，与节假日、节气、调休信息、日期推算相关\n    references : List[Union[List[str], str]]\n        提供的参考信息，能帮助解答问题，如当前日期、星期数等信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-4\ndef pupu.view_cart() -> List[Dict]:\n    '''\n    查看购物车\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict]\n        购物车商品列表，每个商品包括名称、价格、数量等信息\n    '''\n    pass\n```\n\n\n```tool-5\ndef pupu.add_to_cart(product_id: str, quantity: int) -> bool:\n    '''\n    添加商品到购物车\n\n    Parameters\n    ----------\n    product_id : str\n        商品ID\n    quantity : int\n        购买数量\n\n    Returns\n    ----------\n    : bool\n        添加操作是否成功\n    '''\n    pass\n```\n\n\n```tool-6\ndef pupu.place_order(cart_items: List[Dict], address_id: str, payment_method: str) -> str:\n    '''\n    下单\n\n    Parameters\n    ----------\n    cart_items : List[Dict]\n        购物车中的商品列表\n    address_id : str\n        收货地址ID\n    payment_method : str\n        支付方式\n\n    Returns\n    ----------\n    : str\n        返回生成的订单ID\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.personal_qa(instruction: str, user_features: str, references: Dict[str, str]) -> str:\n    '''\n    擅长回复可以结合用户个性化信息回答的问题\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题\n    user_features : str\n        提供的用户个性化信息\n    references : Dict[str, str], optional\n        参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef pupu.check_order_status(order_id: str) -> Dict:\n    '''\n    查询订单状态\n\n    Parameters\n    ----------\n    order_id : str\n        订单ID\n\n    Returns\n    ----------\n    : Dict\n        返回订单状态信息，例如配送状态及预计送达时间\n    '''\n    pass\n```\n\n\n```tool-10\ndef pupu.search_product(keywords: str, category: str, sort_by: str) -> List[Dict]:\n    '''\n    搜索商品\n\n    Parameters\n    ----------\n    keywords : str\n        搜索关键词\n    category : str, optional\n        商品分类\n    sort_by : str, optional\n        排序方式，如价格、销量等\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的商品列表，每个商品包括名称、价格、图片、评分等信息\n    '''\n    pass\n```",
        "query": "我想吃西瓜了,  帮我订一个最好能送到的西瓜吧, 不要超过5块一斤",
        "ground_truth": [
            {
                "id": 1,
                "name": "pupu.search_product",
                "args": {
                    "keywords": "西瓜",
                    "category": "",
                    "sort_by": "价格"
                }
            },
            {
                "id": 2,
                "name": "models.extract_information_from_text",
                "args": {
                    "instruction": "筛选价格不超过5块一斤的西瓜",
                    "text": "#E1"
                }
            },
            {
                "id": 3,
                "name": "pupu.add_to_cart",
                "args": {
                    "product_id": "#E2[\"product_id\"]",
                    "quantity": "1"
                }
            },
            {
                "id": 4,
                "name": "pupu.view_cart",
                "args": {}
            },
            {
                "id": 5,
                "name": "pupu.place_order",
                "args": {
                    "cart_items": "#E4",
                    "address_id": "用户默认地址ID",
                    "payment_method": "用户默认支付方式"
                }
            }
        ],
        "plan_str": "SubTask1: 搜索符合条件的西瓜\n#E1 = pupu.search_product(keywords=\"西瓜\", category=\"\", sort_by=\"价格\")\nSubTask2: 从搜索结果中筛选价格不超过5块一斤的西瓜\n#E2 = models.extract_information_from_text(instruction=\"筛选价格不超过5块一斤的西瓜\", text=#E1)\nSubTask3: 添加筛选出的西瓜到购物车\n#E3 = pupu.add_to_cart(product_id=#E2[\"product_id\"], quantity=1)\nSubTask4: 查看购物车\n#E4 = pupu.view_cart()\nSubTask5: 下单\n#E5 = pupu.place_order(cart_items=#E4, address_id=\"用户默认地址ID\", payment_method=\"用户默认支付方式\")"
    },
    "query_97": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "tencentmeeting",
                    "wechat",
                    "semantic_search",
                    "calendar_app"
                ],
                "selected_apis_name": [
                    "wechat.create_group",
                    "calendar_app.list_events",
                    "wechat.send_message",
                    "semantic_search.personal_context_search",
                    "tencentmeeting.chat_in_meeting",
                    "tencentmeeting.create_meeting",
                    "wechat.scan_qr_code",
                    "wechat.manage_subscriptions",
                    "calendar_app.edit_event",
                    "calendar_app.sync_calendar"
                ]
            },
            "environment": {
                "datetime": "2024年08月21日 星期三",
                "location": "深圳"
            }
        },
        "api_descriptions": "```tool-1\ndef wechat.create_group(group_name: str, members: List[str]) -> str:\n    '''\n    创建群聊\n\n    Parameters\n    ----------\n    group_name : str\n        群聊名称\n    members : List[str]\n        群聊成员ID列表\n\n    Returns\n    ----------\n    : str\n        创建成功的群聊ID\n    '''\n    pass\n```\n\n\n```tool-2\ndef calendar_app.list_events(start_time: str, end_time: str, filter: str, sort_by: str) -> List[Dict[str, Union[str, List[str]]]]:\n    '''\n    获取所有事件的列表\n\n    Parameters\n    ----------\n    start_time : str\n        查询事件的开始时间（ISO格式）\n    end_time : str\n        查询事件的结束时间（ISO格式）\n    filter : str, optional\n        过滤条件，如地点、参与者等\n    sort_by : str, optional\n        排序条件，如时间、标题等\n\n    Returns\n    ----------\n    : List[Dict[str, Union[str, List[str]]]]\n        事件的列表，每个事件包含详细信息\n    '''\n    pass\n```\n\n\n```tool-3\ndef wechat.send_message(recipient_id: str, message_type: str, content: Union[str, bytes]) -> bool:\n    '''\n    发送消息\n\n    Parameters\n    ----------\n    recipient_id : str\n        消息接收者ID\n    message_type : str\n        消息类型，如'text', 'image', 'video', 'voice'\n    content : Union[str, bytes]\n        消息内容，根据消息类型可以是文字、图片、视频二进制数据等\n\n    Returns\n    ----------\n    : bool\n        发送消息操作是否成功\n    '''\n    pass\n```\n\n\n```tool-4\ndef semantic_search.personal_context_search(query: str) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef tencentmeeting.chat_in_meeting(meeting_id: str, message: str) -> bool:\n    '''\n    会议内聊天\n\n    Parameters\n    ----------\n    meeting_id : str\n        会议ID\n    message : str\n        聊天消息内容\n\n    Returns\n    ----------\n    : bool\n        消息发送是否成功\n    '''\n    pass\n```\n\n\n```tool-6\ndef tencentmeeting.create_meeting(host_id: str, title: str, start_time: str, duration: int, participants: List[str]) -> dict:\n    '''\n    创建新的会议\n\n    Parameters\n    ----------\n    host_id : str\n        会议主持人的ID\n    title : str\n        会议标题\n    start_time : str\n        会议开始时间，格式为YYYY-MM-DD HH:MM:SS\n    duration : int\n        会议时长，以分钟为单位\n    participants : List[str], optional\n        邀请参会者的ID列表\n\n    Returns\n    ----------\n    : dict\n        返回会议的详细信息，包括会议ID、加入链接等\n    '''\n    pass\n```\n\n\n```tool-7\ndef wechat.scan_qr_code(qr_code: str) -> Dict[str, Union[str, bytes]]:\n    '''\n    扫描二维码\n\n    Parameters\n    ----------\n    qr_code : str\n        扫描的二维码内容\n\n    Returns\n    ----------\n    : Dict[str, Union[str, bytes]]\n        二维码内容解析结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef wechat.manage_subscriptions(action: str, account_id: Optional[str]) -> Union[List[Dict[str, Union[str, int]]], bool]:\n    '''\n    管理公众号订阅\n\n    Parameters\n    ----------\n    action : str\n        操作类型，例如'subscribe', 'unsubscribe', 'view'\n    account_id : Optional[str], optional\n        公众号ID，仅在订阅或取消订阅时需要\n\n    Returns\n    ----------\n    : Union[List[Dict[str, Union[str, int]]], bool]\n        公众号信息列表，或公众号管理操作是否成功\n    '''\n    pass\n```\n\n\n```tool-9\ndef calendar_app.edit_event(event_id: str, title: str, start_time: str, end_time: str, location: str, description: str, attendees: List[str]) -> bool:\n    '''\n    编辑已有的事件\n\n    Parameters\n    ----------\n    event_id : str\n        事件ID\n    title : str, optional\n        新的事件标题\n    start_time : str, optional\n        新的事件开始时间（ISO格式）\n    end_time : str, optional\n        新的事件结束时间（ISO格式）\n    location : str, optional\n        新的事件地点\n    description : str, optional\n        新的事件描述\n    attendees : List[str], optional\n        新的事件参与者邮箱列表\n\n    Returns\n    ----------\n    : bool\n        编辑操作是否成功\n    '''\n    pass\n```\n\n\n```tool-10\ndef calendar_app.sync_calendar() -> bool:\n    '''\n    同步日历与其他设备\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : bool\n        同步操作是否成功\n    '''\n    pass\n```",
        "query": "看下明天下午四点有没有日程，没有的话创建一个一小时的技术讨论会，会议链接发到技术小组群",
        "ground_truth": [
            {
                "id": 1,
                "name": "calendar_app.list_events",
                "args": {
                    "start_time": "2024-08-22T16:00:00+08:00",
                    "end_time": "2024-08-22T17:00:00+08:00",
                    "filter": "",
                    "sort_by": ""
                }
            },
            {
                "id": 2,
                "name": "semantic_search.personal_context_search",
                "args": {
                    "query": "用户的腾讯会议ID"
                }
            },
            {
                "id": 3,
                "name": "tencentmeeting.create_meeting",
                "args": {
                    "host_id": "#E2",
                    "title": "技术讨论会",
                    "start_time": "2024-08-22T16:00:00+08:00",
                    "duration": "120",
                    "location": ""
                }
            },
            {
                "id": 4,
                "name": "semantic_search.personal_context_search",
                "args": {
                    "query": "技术小组群的ID"
                }
            },
            {
                "id": 5,
                "name": "wechat.send_message",
                "args": {
                    "recipient_id": "#E4",
                    "message_type": "text",
                    "content": "#E3"
                }
            }
        ],
        "plan_str": "SubTask1: 查看明天下午四点的日程安排\n#E1 = calendar_app.list_events(start_time=\"2024-08-22T16:00:00+08:00\", end_time=\"2024-08-22T17:00:00+08:00\", filter=\"\", sort_by=\"\")\nSubTask2: 获取用户的腾讯会议ID\n#E2 = semantic_search.personal_context_search(query=\"用户的腾讯会议ID\")\nSubTask3: 创建一个一小时的技术讨论会\n#E3 = tencentmeeting.create_meeting(host_id=#E2, title=\"技术讨论会\", start_time=\"2024-08-22T16:00:00+08:00\", duration=120, location=\"\")\nSubTask4: 获取技术小组群的ID\n#E4 = semantic_search.personal_context_search(query=\"技术小组群的ID\")\nSubTask5: 把会议链接发送到技术小组群\n#E5 = wechat.send_message(recipient_id=#E4, message_type=\"text\", content=#E3)"
    },
    "query_98": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "models",
                    "cpic"
                ],
                "selected_apis_name": [
                    "models.personal_qa",
                    "models.general_response",
                    "cpic.purchase_product",
                    "cpic.view_policies",
                    "cpic.get_user_profile",
                    "models.multimodal_qa",
                    "models.extract_information_from_text",
                    "models.date_qa",
                    "models.creative_writing",
                    "cpic.get_product_detail"
                ]
            },
            "environment": {
                "datetime": "2021年12月11日 星期六",
                "location": "吉林省辽源市"
            }
        },
        "api_descriptions": "```tool-1\ndef models.personal_qa(instruction: str, user_features: str, references: Dict[str, str]) -> str:\n    '''\n    擅长回复可以结合用户个性化信息回答的问题\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题\n    user_features : str\n        提供的用户个性化信息\n    references : Dict[str, str], optional\n        参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-2\ndef models.general_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个预训练语言模型，具备很强的问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的指令和给定的参考references，生成正确、有用、安全的回复；，也可以做翻译、文本相似度、文本推断、实体识别等常见自然语言任务\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-3\ndef cpic.purchase_product(product_id: str, personal_info: Dict) -> bool:\n    '''\n    购买保险产品\n\n    Parameters\n    ----------\n    product_id : str\n        保险产品ID\n    personal_info : Dict\n        个人信息，包括姓名、身份证号、联系方式等\n\n    Returns\n    ----------\n    : bool\n        购买操作是否成功\n    '''\n    pass\n```\n\n\n```tool-4\ndef cpic.view_policies() -> List[Dict]:\n    '''\n    查看保单\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict]\n        用户保单列表，包括保单号、保险种类、保费等信息\n    '''\n    pass\n```\n\n\n```tool-5\ndef cpic.get_user_profile() -> Dict:\n    '''\n    查看用户个人信息\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : Dict\n        个人信息，包括姓名、联系方式、身份证号等\n    '''\n    pass\n```\n\n\n```tool-6\ndef models.multimodal_qa(instruction: str, image_url: str) -> str:\n    '''\n    一个图文多模态模型，能基于给定的图片回答用户问题，多模态模型能回答的问题类型包括：\n1. OCR(optical character recognition)能力，即识别图片中的字符信息；\n2. 可以从图片中找到答案的问题。例如识别图像中的对象/元素，包括人物、地点、商品、动物、植物等；\n3. 静态知识问题，即当用户的问题不需要查询实时信息，那么多模态模型可以直接生成回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，针对提供的图片，用户提出的问题，例如要抽取的内容/对象等信息，或图片中某个对象的静态知识信息\n    image_url : str\n        给定的(手机屏幕)图片地址，将基于该图片回答问题\n\n    Returns\n    ----------\n    : str\n        多模态模型生成的结果\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef models.date_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长解答节假日、节气、是否上班、调休信息相关问题；也支持时间推理计算，如日期天数之差、离国庆节还有多久等。\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题，与节假日、节气、调休信息、日期推算相关\n    references : List[Union[List[str], str]]\n        提供的参考信息，能帮助解答问题，如当前日期、星期数等信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-9\ndef models.creative_writing(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长写文章、写点评、段落扩写/润色、写报告、写大纲、写PPT、写新闻稿、做SWOT分析等文字创作类任务。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/创作要求/问题，据此进行文字创作任务。\n    references : List[Union[List[str], str]]\n        创作时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef cpic.get_product_detail(product_id: str) -> Dict:\n    '''\n    获取保险产品详情\n\n    Parameters\n    ----------\n    product_id : str\n        保险产品ID\n\n    Returns\n    ----------\n    : Dict\n        保险产品的详细信息，包括产品介绍、保障范围、价格等\n    '''\n    pass\n```",
        "query": "查一下我之前买的保险具体能报销什么病",
        "ground_truth": [
            {
                "id": 1,
                "name": "cpic.get_user_profile",
                "args": {
                    "user_id": "用户ID"
                }
            },
            {
                "id": 2,
                "name": "cpic.view_policies",
                "args": {
                    "user_id": "#E1[\"user_id\"]"
                }
            },
            {
                "id": 3,
                "name": "cpic.get_product_detail",
                "args": {
                    "product_id": "#E2[0][\"policy_id\"]"
                }
            },
            {
                "id": 2,
                "name": "models.general_response",
                "args": {
                    "instruction": "保险能保险什么疾病",
                    "references": [
                        "#E3"
                    ]
                }
            }
        ],
        "plan_str": "SubTask1: 查看用户个人信息，以获取用户ID\n#E1 = cpic.get_user_profile(user_id=\"用户ID\")\n\nSubTask2: 查看用户的保单信息\n#E2 = cpic.view_policies(user_id=#E1[\"user_id\"])\n\nSubTask3: 获取用户保单的详细信息，以了解具体的报销范围\n#E3 = cpic.get_product_detail(product_id=#E2[0][\"policy_id\"])\n\nSubTask4: 根据查询的保单信息生成最终的回复\n#E2 = models.general_response(instruction=\"保险能保险什么疾病\", references=[#E3]) \n"
    },
    "query_99": {
        "meta": {
            "prompt_type": "ReWOO",
            "candidate_apis": {
                "apps": [
                    "qunar",
                    "semantic_search",
                    "models"
                ],
                "selected_apis_name": [
                    "models.search_then_response",
                    "qunar.get_travel_guides",
                    "qunar.book_attraction_ticket",
                    "models.math_qa",
                    "models.extract_information_from_text",
                    "qunar.manage_orders",
                    "models.personal_qa",
                    "qunar.search_flights",
                    "semantic_search.web_search",
                    "semantic_search.personal_context_search"
                ]
            },
            "environment": {
                "datetime": "2024年08月21日 星期三",
                "location": "北京"
            }
        },
        "api_descriptions": "```tool-1\ndef models.search_then_response(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    一个具备搜索引擎能力的问答模型，具备以下能力：\n1. 搜索实时信息并总结。如果用户问题涉及时效性信息，问答模型第一步通过搜索引擎检索信息，第二步对检索的多个信息进行汇总，生成回复；\n2. 问答、对话和信息总结能力，掌握世界知识。可以根据用户输入的instruction和给定的参考references，生成正确、有用、安全的回复。\n\n    Parameters\n    ----------\n    instruction : str\n        用户输入的指令/问题，期望模型完成的任务描述。\n    references : List[Union[List[str], str]]\n        回答问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        返回的回复\n    '''\n    pass\n```\n\n\n```tool-2\ndef qunar.get_travel_guides(destination: str) -> List[Dict]:\n    '''\n    获取旅游攻略\n\n    Parameters\n    ----------\n    destination : str\n        旅游目的地\n\n    Returns\n    ----------\n    : List[Dict]\n        旅游攻略列表，包括景点推荐、餐饮推荐等\n    '''\n    pass\n```\n\n\n```tool-3\ndef qunar.book_attraction_ticket(attraction_id: str, visit_date: str, visitor_info: List[Dict], contact_info: Dict) -> Dict:\n    '''\n    预订景点门票\n\n    Parameters\n    ----------\n    attraction_id : str\n        景点ID\n    visit_date : str\n        参观日期，格式为YYYY-MM-DD\n    visitor_info : List[Dict]\n        参观者信息，包括姓名、身份证号等\n    contact_info : Dict\n        联系方式，包括手机号、邮箱等\n\n    Returns\n    ----------\n    : Dict\n        返回预订成功的订单信息\n    '''\n    pass\n```\n\n\n```tool-4\ndef models.math_qa(instruction: str, references: List[Union[List[str], str]]) -> str:\n    '''\n    擅长数值计算、解方程、解应用题、概率论、微积分、三角函数、随机数生成、数据分析、报表分析等数学任务。以及精通python语言，可以通过python内置包、三方包解决问题。\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，该问题与数学相关\n    references : List[Union[List[str], str]]\n        解决问题时需要用到的参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-5\ndef models.extract_information_from_text(instruction: str, text: str) -> str:\n    '''\n    擅长从给定文本中抽取需要的信息，例如从手机/PC等设备屏幕的OCR识别结果中抽取信息\n\n    Parameters\n    ----------\n    instruction : str\n        用户指令/问题，描述了要抽取的内容/对象等信息\n    text : str\n        给定的文本内容/图片或屏幕OCR结果，将从该文本中抽取信息\n\n    Returns\n    ----------\n    : str\n        抽取结果\n    '''\n    pass\n```\n\n\n```tool-6\ndef qunar.manage_orders() -> List[Dict]:\n    '''\n    管理订单\n\n    Parameters\n    ----------\n\n\n    Returns\n    ----------\n    : List[Dict]\n        用户的订单列表，包括机票订单、酒店订单等\n    '''\n    pass\n```\n\n\n```tool-7\ndef models.personal_qa(instruction: str, user_features: str, references: Dict[str, str]) -> str:\n    '''\n    擅长回复可以结合用户个性化信息回答的问题\n\n    Parameters\n    ----------\n    instruction : str\n        输入的问题\n    user_features : str\n        提供的用户个性化信息\n    references : Dict[str, str], optional\n        参考信息\n\n    Returns\n    ----------\n    : str\n        生成的回复结果\n    '''\n    pass\n```\n\n\n```tool-8\ndef qunar.search_flights(departure_city: str, arrival_city: str, departure_date: str, return_date: str) -> List[Dict]:\n    '''\n    搜索机票\n\n    Parameters\n    ----------\n    departure_city : str\n        出发城市\n    arrival_city : str\n        到达城市\n    departure_date : str\n        出发日期，格式为YYYY-MM-DD\n    return_date : str, optional\n        返回日期，格式为YYYY-MM-DD\n\n    Returns\n    ----------\n    : List[Dict]\n        符合条件的机票列表，包括航班信息、价格等\n    '''\n    pass\n```\n\n\n```tool-9\ndef semantic_search.web_search(query: str, count: int) -> List[str]:\n    '''\n    网页搜索，根据输入的query，在搜索引擎中查找相关页面，可用于查找人物、物品、体育赛事、事件相关的时效性信息，精确信息。\n\n    Parameters\n    ----------\n    query : str\n        用户搜索的关键词、短语、查询，该参数项不能为空。\n    count : int, optional\n        期望返回的搜索结果数量\n\n    Returns\n    ----------\n    : List[str]\n        搜索引擎返回的结果\n    '''\n    pass\n```\n\n\n```tool-10\ndef semantic_search.personal_context_search(query: str) -> List[str]:\n    '''\n    在手机、电脑等本地设备上搜索信息。根据输入的query进行搜索，搜索知识库范围包括：\n1. 用户画像知识库(根据用户使用手机产生的所有历史记录总结得到)，例如查找用户生日、身份证号、父亲的姓名等；\n2. 手机/电脑设备后台运行的程序信息，将当前后台运行的程序以列表形式返回，每个元素是一个程序url。当搜索query包含“这张照片/这个ppt/这个文件/这个便签/...”，将返回后台运行的第1个程序url，即当前设备页面展示的对象；\n3. 手机/电脑自带内置程序中的信息，以及交互历史，例如通讯录中查找妈妈的联系人名称/手机号、相册中查找在海边看落日的照片、在备忘录中查找指定信息，最近设置的闹钟、日程信息等等；\n4. 用户自行下载的外置程序中的信息，以及交互历史，例如淘宝京东等购物平台的购物记录、爱奇艺等影视APP中的观看记录、浏览器的浏览记录、携程等差旅APP中的下单交互记录等等\n\n    Parameters\n    ----------\n    query : str\n        用于检索个人上下文信息的关键词、短语\n\n    Returns\n    ----------\n    : List[str]\n        返回满足条件的多个结果\n    '''\n    pass\n```",
        "query": "最近一周到武汉的机票哪天最便宜, 那一天我方便去武汉吗",
        "ground_truth": [
            {
                "id": 1,
                "name": "qunar.search_flights",
                "args": {
                    "departure_city": "北京",
                    "arrival_city": "武汉",
                    "departure_date": "2024-08-21",
                    "return_date": "2024-08-27"
                }
            },
            {
                "id": 2,
                "name": "models.extract_information_from_text",
                "args": {
                    "instruction": "找出价格最低的机票的出发日期",
                    "text": "#E1"
                }
            },
            {
                "id": 3,
                "name": "semantic_search.personal_context_search",
                "args": {
                    "query": "用户#E2日的日程安排"
                }
            }
        ],
        "plan_str": "SubTask1: 搜索最近一周从当前位置到武汉的机票价格\n#E1 = qunar.search_flights(departure_city=\"北京\", arrival_city=\"武汉\", departure_date=\"2024-08-21\", return_date=\"2024-08-27\")\nSubTask2: 从搜索结果中找出价格最低的机票，并返回对应出发日期\n#E2 = models.extract_information_from_text(instruction=\"找出价格最低的机票的出发日期\", text=#E1)\nSubTask3: 查询用户的日程安排，判断#E2对应的日子是否有空闲\n#E3 = semantic_search.personal_context_search(query=\"用户#E2日的日程安排\")"
    }
}